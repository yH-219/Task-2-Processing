
Processing_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a88  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08008c18  08008c18  00009c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800903c  0800903c  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800903c  0800903c  0000a03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009044  08009044  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009044  08009044  0000a044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009048  08009048  0000a048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800904c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  200001d4  08009220  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08009220  0000b590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f06  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272d  00000000  00000000  0001d10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001f838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d03  00000000  00000000  000208f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c81  00000000  00000000  000215f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012dc3  00000000  00000000  00043274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cba8b  00000000  00000000  00056037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121ac2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005740  00000000  00000000  00121b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00127248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c00 	.word	0x08008c00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008c00 	.word	0x08008c00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f000 ff59 	bl	8001e2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 f830 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 f9c4 	bl	800130c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f84:	f000 f992 	bl	80012ac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f88:	f000 f960 	bl	800124c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000f8c:	f000 f88a 	bl	80010a4 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000f90:	f000 f8fe 	bl	8001190 <MX_TIM6_Init>
  MX_TIM16_Init();
 8000f94:	f000 f932 	bl	80011fc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  // Audio Reading
  HAL_UART_Receive_IT(&huart1, RX_Buffer, UART1_RX_BUFFER_SIZE);
 8000f98:	2202      	movs	r2, #2
 8000f9a:	490a      	ldr	r1, [pc, #40]	@ (8000fc4 <main+0x50>)
 8000f9c:	480a      	ldr	r0, [pc, #40]	@ (8000fc8 <main+0x54>)
 8000f9e:	f003 fd5f 	bl	8004a60 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, UART2_RX_Buffer, UART2_RX_BUFFER_SIZE);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4909      	ldr	r1, [pc, #36]	@ (8000fcc <main+0x58>)
 8000fa6:	480a      	ldr	r0, [pc, #40]	@ (8000fd0 <main+0x5c>)
 8000fa8:	f003 fd5a 	bl	8004a60 <HAL_UART_Receive_IT>

  // Distance Reading
  HAL_TIM_Base_Start (&htim6); // Timer to count to 10 microseconds
 8000fac:	4809      	ldr	r0, [pc, #36]	@ (8000fd4 <main+0x60>)
 8000fae:	f002 fcc1 	bl	8003934 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Timer to measure distance
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <main+0x64>)
 8000fb6:	f002 fdbf 	bl	8003b38 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000fba:	4808      	ldr	r0, [pc, #32]	@ (8000fdc <main+0x68>)
 8000fbc:	f002 fd06 	bl	80039cc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <main+0x4c>
 8000fc4:	200003e8 	.word	0x200003e8
 8000fc8:	200002d4 	.word	0x200002d4
 8000fcc:	20000428 	.word	0x20000428
 8000fd0:	2000035c 	.word	0x2000035c
 8000fd4:	2000023c 	.word	0x2000023c
 8000fd8:	200001f0 	.word	0x200001f0
 8000fdc:	20000288 	.word	0x20000288

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b096      	sub	sp, #88	@ 0x58
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	2244      	movs	r2, #68	@ 0x44
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f005 fd39 	bl	8006a66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001002:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001006:	f001 fab7 	bl	8002578 <HAL_PWREx_ControlVoltageScaling>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001010:	f000 fc48 	bl	80018a4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001014:	f001 fa92 	bl	800253c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001018:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <SystemClock_Config+0xc0>)
 800101a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800101e:	4a20      	ldr	r2, [pc, #128]	@ (80010a0 <SystemClock_Config+0xc0>)
 8001020:	f023 0318 	bic.w	r3, r3, #24
 8001024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001028:	2314      	movs	r3, #20
 800102a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001038:	2360      	movs	r3, #96	@ 0x60
 800103a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001040:	2301      	movs	r3, #1
 8001042:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001044:	2301      	movs	r3, #1
 8001046:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001048:	2310      	movs	r3, #16
 800104a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800104c:	2307      	movs	r3, #7
 800104e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001050:	2302      	movs	r3, #2
 8001052:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fae1 	bl	8002624 <HAL_RCC_OscConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001068:	f000 fc1c 	bl	80018a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106c:	230f      	movs	r3, #15
 800106e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001070:	2303      	movs	r3, #3
 8001072:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	2101      	movs	r1, #1
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fee1 	bl	8002e4c <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001090:	f000 fc08 	bl	80018a4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001094:	f002 faf4 	bl	8003680 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001098:	bf00      	nop
 800109a:	3758      	adds	r7, #88	@ 0x58
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000

080010a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	@ 0x30
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <MX_TIM1_Init+0xe4>)
 80010d2:	4a2e      	ldr	r2, [pc, #184]	@ (800118c <MX_TIM1_Init+0xe8>)
 80010d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <MX_TIM1_Init+0xe4>)
 80010d8:	221f      	movs	r2, #31
 80010da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <MX_TIM1_Init+0xe4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <MX_TIM1_Init+0xe4>)
 80010e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <MX_TIM1_Init+0xe4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f0:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <MX_TIM1_Init+0xe4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <MX_TIM1_Init+0xe4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010fc:	4822      	ldr	r0, [pc, #136]	@ (8001188 <MX_TIM1_Init+0xe4>)
 80010fe:	f002 fbc1 	bl	8003884 <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001108:	f000 fbcc 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001110:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	4619      	mov	r1, r3
 8001118:	481b      	ldr	r0, [pc, #108]	@ (8001188 <MX_TIM1_Init+0xe4>)
 800111a:	f002 ffde 	bl	80040da <HAL_TIM_ConfigClockSource>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001124:	f000 fbbe 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001128:	4817      	ldr	r0, [pc, #92]	@ (8001188 <MX_TIM1_Init+0xe4>)
 800112a:	f002 fca3 	bl	8003a74 <HAL_TIM_IC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001134:	f000 fbb6 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	480f      	ldr	r0, [pc, #60]	@ (8001188 <MX_TIM1_Init+0xe4>)
 800114c:	f003 fb2c 	bl	80047a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001156:	f000 fba5 	bl	80018a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800115a:	230a      	movs	r3, #10
 800115c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800115e:	2301      	movs	r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_TIM1_Init+0xe4>)
 8001172:	f002 ff16 	bl	8003fa2 <HAL_TIM_IC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800117c:	f000 fb92 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	@ 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200001f0 	.word	0x200001f0
 800118c:	40012c00 	.word	0x40012c00

08001190 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <MX_TIM6_Init+0x64>)
 80011a2:	4a15      	ldr	r2, [pc, #84]	@ (80011f8 <MX_TIM6_Init+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32-1;
 80011a6:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <MX_TIM6_Init+0x64>)
 80011a8:	221f      	movs	r2, #31
 80011aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_TIM6_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <MX_TIM6_Init+0x64>)
 80011b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_TIM6_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <MX_TIM6_Init+0x64>)
 80011c2:	f002 fb5f 	bl	8003884 <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011cc:	f000 fb6a 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <MX_TIM6_Init+0x64>)
 80011de:	f003 fae3 	bl	80047a8 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011e8:	f000 fb5c 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2000023c 	.word	0x2000023c
 80011f8:	40001000 	.word	0x40001000

080011fc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001200:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <MX_TIM16_Init+0x48>)
 8001202:	4a11      	ldr	r2, [pc, #68]	@ (8001248 <MX_TIM16_Init+0x4c>)
 8001204:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32000-1;
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_TIM16_Init+0x48>)
 8001208:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 800120c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <MX_TIM16_Init+0x48>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 500-1;
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <MX_TIM16_Init+0x48>)
 8001216:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800121a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_TIM16_Init+0x48>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <MX_TIM16_Init+0x48>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MX_TIM16_Init+0x48>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_TIM16_Init+0x48>)
 8001230:	f002 fb28 	bl	8003884 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800123a:	f000 fb33 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000288 	.word	0x20000288
 8001248:	40014400 	.word	0x40014400

0800124c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001252:	4a15      	ldr	r2, [pc, #84]	@ (80012a8 <MX_USART1_UART_Init+0x5c>)
 8001254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001258:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 800125c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001290:	f003 fb0e 	bl	80048b0 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800129a:	f000 fb03 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200002d4 	.word	0x200002d4
 80012a8:	40013800 	.word	0x40013800

080012ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_USART2_UART_Init+0x58>)
 80012b2:	4a15      	ldr	r2, [pc, #84]	@ (8001308 <MX_USART2_UART_Init+0x5c>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80012b6:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <MX_USART2_UART_Init+0x58>)
 80012b8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80012bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_USART2_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_USART2_UART_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_USART2_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_USART2_UART_Init+0x58>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <MX_USART2_UART_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_USART2_UART_Init+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MX_USART2_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_USART2_UART_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_USART2_UART_Init+0x58>)
 80012f0:	f003 fade 	bl	80048b0 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012fa:	f000 fad3 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000035c 	.word	0x2000035c
 8001308:	40004400 	.word	0x40004400

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <MX_GPIO_Init+0xb8>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a27      	ldr	r2, [pc, #156]	@ (80013c4 <MX_GPIO_Init+0xb8>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <MX_GPIO_Init+0xb8>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <MX_GPIO_Init+0xb8>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a21      	ldr	r2, [pc, #132]	@ (80013c4 <MX_GPIO_Init+0xb8>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <MX_GPIO_Init+0xb8>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <MX_GPIO_Init+0xb8>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a1b      	ldr	r2, [pc, #108]	@ (80013c4 <MX_GPIO_Init+0xb8>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <MX_GPIO_Init+0xb8>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2140      	movs	r1, #64	@ 0x40
 800136e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001372:	f001 f8cb 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2138      	movs	r1, #56	@ 0x38
 800137a:	4813      	ldr	r0, [pc, #76]	@ (80013c8 <MX_GPIO_Init+0xbc>)
 800137c:	f001 f8c6 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001380:	2340      	movs	r3, #64	@ 0x40
 8001382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139a:	f000 ff4d 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = LD3_Pin|GPIO_PIN_4|GPIO_PIN_5;
 800139e:	2338      	movs	r3, #56	@ 0x38
 80013a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <MX_GPIO_Init+0xbc>)
 80013b6:	f000 ff3f 	bl	8002238 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000400 	.word	0x48000400

080013cc <Handle_UART_Command>:

/* USER CODE BEGIN 4 */
// Pick Audio Recording Mode
void Handle_UART_Command()
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    if (UART2_RX_Buffer[0] == '1')
 80013d0:	4b32      	ldr	r3, [pc, #200]	@ (800149c <Handle_UART_Command+0xd0>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b31      	cmp	r3, #49	@ 0x31
 80013d6:	d11e      	bne.n	8001416 <Handle_UART_Command+0x4a>
    {
        /* Enter manual recording mode: The Processing STM transmits the data as normal.
         Go to HAL_UART_RxCpltCallback
         Duration is determined by user in Python Script*/
    	recording_mode = 1;
 80013d8:	4b31      	ldr	r3, [pc, #196]	@ (80014a0 <Handle_UART_Command+0xd4>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
		recording_active = 1;
 80013de:	4b31      	ldr	r3, [pc, #196]	@ (80014a4 <Handle_UART_Command+0xd8>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Blue LED ON for Manual Recording Mode
 80013e4:	2201      	movs	r2, #1
 80013e6:	2120      	movs	r1, #32
 80013e8:	482f      	ldr	r0, [pc, #188]	@ (80014a8 <Handle_UART_Command+0xdc>)
 80013ea:	f001 f88f 	bl	800250c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2110      	movs	r1, #16
 80013f2:	482d      	ldr	r0, [pc, #180]	@ (80014a8 <Handle_UART_Command+0xdc>)
 80013f4:	f001 f88a 	bl	800250c <HAL_GPIO_WritePin>
		sprintf(string_1, "Manual Recording Mode Selected");
 80013f8:	492c      	ldr	r1, [pc, #176]	@ (80014ac <Handle_UART_Command+0xe0>)
 80013fa:	482d      	ldr	r0, [pc, #180]	@ (80014b0 <Handle_UART_Command+0xe4>)
 80013fc:	f005 face 	bl	800699c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)string_1, strlen(string_1),10);
 8001400:	482b      	ldr	r0, [pc, #172]	@ (80014b0 <Handle_UART_Command+0xe4>)
 8001402:	f7fe ff35 	bl	8000270 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	230a      	movs	r3, #10
 800140c:	4928      	ldr	r1, [pc, #160]	@ (80014b0 <Handle_UART_Command+0xe4>)
 800140e:	4829      	ldr	r0, [pc, #164]	@ (80014b4 <Handle_UART_Command+0xe8>)
 8001410:	f003 fa9c 	bl	800494c <HAL_UART_Transmit>
		sprintf(string_1, "Else Selected");
		HAL_UART_Transmit(&huart2, (uint8_t*)string_1, strlen(string_1),10);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn OFF LEDs
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
    }
}
 8001414:	e040      	b.n	8001498 <Handle_UART_Command+0xcc>
    else if (UART2_RX_Buffer[0] == '2')
 8001416:	4b21      	ldr	r3, [pc, #132]	@ (800149c <Handle_UART_Command+0xd0>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b32      	cmp	r3, #50	@ 0x32
 800141c:	d11e      	bne.n	800145c <Handle_UART_Command+0x90>
    	recording_mode = 2;
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <Handle_UART_Command+0xd4>)
 8001420:	2202      	movs	r2, #2
 8001422:	701a      	strb	r2, [r3, #0]
		recording_active = 1;
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <Handle_UART_Command+0xd8>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Red LED ON for Distance Trigger Mode
 800142a:	2201      	movs	r2, #1
 800142c:	2110      	movs	r1, #16
 800142e:	481e      	ldr	r0, [pc, #120]	@ (80014a8 <Handle_UART_Command+0xdc>)
 8001430:	f001 f86c 	bl	800250c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	2120      	movs	r1, #32
 8001438:	481b      	ldr	r0, [pc, #108]	@ (80014a8 <Handle_UART_Command+0xdc>)
 800143a:	f001 f867 	bl	800250c <HAL_GPIO_WritePin>
		sprintf(string_1, "Distance Trigger Mode Selected");
 800143e:	491e      	ldr	r1, [pc, #120]	@ (80014b8 <Handle_UART_Command+0xec>)
 8001440:	481b      	ldr	r0, [pc, #108]	@ (80014b0 <Handle_UART_Command+0xe4>)
 8001442:	f005 faab 	bl	800699c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)string_1, strlen(string_1),10);
 8001446:	481a      	ldr	r0, [pc, #104]	@ (80014b0 <Handle_UART_Command+0xe4>)
 8001448:	f7fe ff12 	bl	8000270 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	230a      	movs	r3, #10
 8001452:	4917      	ldr	r1, [pc, #92]	@ (80014b0 <Handle_UART_Command+0xe4>)
 8001454:	4817      	ldr	r0, [pc, #92]	@ (80014b4 <Handle_UART_Command+0xe8>)
 8001456:	f003 fa79 	bl	800494c <HAL_UART_Transmit>
}
 800145a:	e01d      	b.n	8001498 <Handle_UART_Command+0xcc>
    	recording_mode = 1;
 800145c:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <Handle_UART_Command+0xd4>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
		recording_active = 1;
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <Handle_UART_Command+0xd8>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
		sprintf(string_1, "Else Selected");
 8001468:	4914      	ldr	r1, [pc, #80]	@ (80014bc <Handle_UART_Command+0xf0>)
 800146a:	4811      	ldr	r0, [pc, #68]	@ (80014b0 <Handle_UART_Command+0xe4>)
 800146c:	f005 fa96 	bl	800699c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)string_1, strlen(string_1),10);
 8001470:	480f      	ldr	r0, [pc, #60]	@ (80014b0 <Handle_UART_Command+0xe4>)
 8001472:	f7fe fefd 	bl	8000270 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	230a      	movs	r3, #10
 800147c:	490c      	ldr	r1, [pc, #48]	@ (80014b0 <Handle_UART_Command+0xe4>)
 800147e:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <Handle_UART_Command+0xe8>)
 8001480:	f003 fa64 	bl	800494c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn OFF LEDs
 8001484:	2200      	movs	r2, #0
 8001486:	2120      	movs	r1, #32
 8001488:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <Handle_UART_Command+0xdc>)
 800148a:	f001 f83f 	bl	800250c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2110      	movs	r1, #16
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <Handle_UART_Command+0xdc>)
 8001494:	f001 f83a 	bl	800250c <HAL_GPIO_WritePin>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000428 	.word	0x20000428
 80014a0:	200003e4 	.word	0x200003e4
 80014a4:	200003e5 	.word	0x200003e5
 80014a8:	48000400 	.word	0x48000400
 80014ac:	08008c18 	.word	0x08008c18
 80014b0:	200003f0 	.word	0x200003f0
 80014b4:	2000035c 	.word	0x2000035c
 80014b8:	08008c38 	.word	0x08008c38
 80014bc:	08008c58 	.word	0x08008c58

080014c0 <HAL_UART_RxCpltCallback>:
/*****************Audio Reading Functions*****************/
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a54      	ldr	r2, [pc, #336]	@ (8001620 <HAL_UART_RxCpltCallback+0x160>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	f040 8096 	bne.w	8001600 <HAL_UART_RxCpltCallback+0x140>
	{
		samples_collected += 1;
 80014d4:	4b53      	ldr	r3, [pc, #332]	@ (8001624 <HAL_UART_RxCpltCallback+0x164>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	4a52      	ldr	r2, [pc, #328]	@ (8001624 <HAL_UART_RxCpltCallback+0x164>)
 80014dc:	6013      	str	r3, [r2, #0]
		LSB_8 = RX_Buffer[0]; // Extract least significant 8 bits of the ADC value
 80014de:	4b52      	ldr	r3, [pc, #328]	@ (8001628 <HAL_UART_RxCpltCallback+0x168>)
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	4b52      	ldr	r3, [pc, #328]	@ (800162c <HAL_UART_RxCpltCallback+0x16c>)
 80014e4:	701a      	strb	r2, [r3, #0]
		MSB_8 = RX_Buffer[1]; // Extract most significant 8 bits of the ADC value
 80014e6:	4b50      	ldr	r3, [pc, #320]	@ (8001628 <HAL_UART_RxCpltCallback+0x168>)
 80014e8:	785a      	ldrb	r2, [r3, #1]
 80014ea:	4b51      	ldr	r3, [pc, #324]	@ (8001630 <HAL_UART_RxCpltCallback+0x170>)
 80014ec:	701a      	strb	r2, [r3, #0]
//		// Construct 16-bit unsigned ADC value
//		ADC_output = MSB_8;
//		ADC_output = ADC_output << 8;
//		ADC_output = ADC_output | LSB_8;

		ADC_output = ((RX_Buffer[1] << 8) | RX_Buffer[0]);
 80014ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001628 <HAL_UART_RxCpltCallback+0x168>)
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001628 <HAL_UART_RxCpltCallback+0x168>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21b      	sxth	r3, r3
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b4b      	ldr	r3, [pc, #300]	@ (8001634 <HAL_UART_RxCpltCallback+0x174>)
 8001506:	801a      	strh	r2, [r3, #0]
//		int8_t out_buf[2] = {0};
//		out_buf[0] = ADC_output & 0xFF;
//		out_buf[1] = (ADC_output >> 8) & 0xFF; // MSB

		// MOVING AVERAGE FILTER
		adc_sum -= adc_buffer[buffer_index];
 8001508:	4b4b      	ldr	r3, [pc, #300]	@ (8001638 <HAL_UART_RxCpltCallback+0x178>)
 800150a:	881a      	ldrh	r2, [r3, #0]
 800150c:	4b4b      	ldr	r3, [pc, #300]	@ (800163c <HAL_UART_RxCpltCallback+0x17c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	4b4b      	ldr	r3, [pc, #300]	@ (8001640 <HAL_UART_RxCpltCallback+0x180>)
 8001514:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b46      	ldr	r3, [pc, #280]	@ (8001638 <HAL_UART_RxCpltCallback+0x178>)
 800151e:	801a      	strh	r2, [r3, #0]
		adc_buffer[buffer_index] = ADC_output;
 8001520:	4b46      	ldr	r3, [pc, #280]	@ (800163c <HAL_UART_RxCpltCallback+0x17c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b43      	ldr	r3, [pc, #268]	@ (8001634 <HAL_UART_RxCpltCallback+0x174>)
 8001528:	8819      	ldrh	r1, [r3, #0]
 800152a:	4b45      	ldr	r3, [pc, #276]	@ (8001640 <HAL_UART_RxCpltCallback+0x180>)
 800152c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		adc_sum += adc_buffer[buffer_index];
 8001530:	4b42      	ldr	r3, [pc, #264]	@ (800163c <HAL_UART_RxCpltCallback+0x17c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b42      	ldr	r3, [pc, #264]	@ (8001640 <HAL_UART_RxCpltCallback+0x180>)
 8001538:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800153c:	4b3e      	ldr	r3, [pc, #248]	@ (8001638 <HAL_UART_RxCpltCallback+0x178>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	4413      	add	r3, r2
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b3c      	ldr	r3, [pc, #240]	@ (8001638 <HAL_UART_RxCpltCallback+0x178>)
 8001546:	801a      	strh	r2, [r3, #0]
		buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 8001548:	4b3c      	ldr	r3, [pc, #240]	@ (800163c <HAL_UART_RxCpltCallback+0x17c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <HAL_UART_RxCpltCallback+0x184>)
 8001550:	fb83 3102 	smull	r3, r1, r3, r2
 8001554:	17d3      	asrs	r3, r2, #31
 8001556:	1ac9      	subs	r1, r1, r3
 8001558:	460b      	mov	r3, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	440b      	add	r3, r1
 800155e:	1ad1      	subs	r1, r2, r3
 8001560:	b2ca      	uxtb	r2, r1
 8001562:	4b36      	ldr	r3, [pc, #216]	@ (800163c <HAL_UART_RxCpltCallback+0x17c>)
 8001564:	701a      	strb	r2, [r3, #0]
		// Account for initial edge case where adc_buffer[1] to [3] is still 0
		uint8_t tx_buf[2] = {0};
 8001566:	2300      	movs	r3, #0
 8001568:	81bb      	strh	r3, [r7, #12]
		if (samples_collected >= 4 & recording_active == 1)
 800156a:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <HAL_UART_RxCpltCallback+0x164>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b03      	cmp	r3, #3
 8001570:	bfcc      	ite	gt
 8001572:	2301      	movgt	r3, #1
 8001574:	2300      	movle	r3, #0
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <HAL_UART_RxCpltCallback+0x188>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b01      	cmp	r3, #1
 8001580:	bf0c      	ite	eq
 8001582:	2301      	moveq	r3, #1
 8001584:	2300      	movne	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4013      	ands	r3, r2
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d031      	beq.n	80015f4 <HAL_UART_RxCpltCallback+0x134>
		{
			uint16_t avg_adc_value = adc_sum/MOVING_AVG_SIZE;
 8001590:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <HAL_UART_RxCpltCallback+0x178>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	4a2d      	ldr	r2, [pc, #180]	@ (800164c <HAL_UART_RxCpltCallback+0x18c>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	81fb      	strh	r3, [r7, #14]
			tx_buf[0] = avg_adc_value & 0xFF;        // LSB
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	733b      	strb	r3, [r7, #12]
			tx_buf[1] = (avg_adc_value >> 8) & 0xFF; // MSB
 80015a4:	89fb      	ldrh	r3, [r7, #14]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	737b      	strb	r3, [r7, #13]
			if (recording_mode == 1) // Manual Recording Mode
 80015ae:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <HAL_UART_RxCpltCallback+0x190>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d107      	bne.n	80015c8 <HAL_UART_RxCpltCallback+0x108>
			{
				// Transmit avg_adc_value over UART under interrupt mode
				HAL_UART_Transmit(&huart2, (uint8_t*)tx_buf,2,10);
 80015b8:	f107 010c 	add.w	r1, r7, #12
 80015bc:	230a      	movs	r3, #10
 80015be:	2202      	movs	r2, #2
 80015c0:	4824      	ldr	r0, [pc, #144]	@ (8001654 <HAL_UART_RxCpltCallback+0x194>)
 80015c2:	f003 f9c3 	bl	800494c <HAL_UART_Transmit>
 80015c6:	e015      	b.n	80015f4 <HAL_UART_RxCpltCallback+0x134>
			}
			else if (recording_mode == 2 && distance <= 10.0) // Distance Trigger Mode
 80015c8:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <HAL_UART_RxCpltCallback+0x190>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d110      	bne.n	80015f4 <HAL_UART_RxCpltCallback+0x134>
 80015d2:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <HAL_UART_RxCpltCallback+0x198>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80015dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	d806      	bhi.n	80015f4 <HAL_UART_RxCpltCallback+0x134>
			{
				// Transmit avg_adc_value over UART under interrupt mode
				HAL_UART_Transmit(&huart2, (uint8_t*)tx_buf,2,10);
 80015e6:	f107 010c 	add.w	r1, r7, #12
 80015ea:	230a      	movs	r3, #10
 80015ec:	2202      	movs	r2, #2
 80015ee:	4819      	ldr	r0, [pc, #100]	@ (8001654 <HAL_UART_RxCpltCallback+0x194>)
 80015f0:	f003 f9ac 	bl	800494c <HAL_UART_Transmit>
			}
		}
		HAL_UART_Receive_IT(&huart1, RX_Buffer, UART1_RX_BUFFER_SIZE); // Receive through UART1 Interrupt
 80015f4:	2202      	movs	r2, #2
 80015f6:	490c      	ldr	r1, [pc, #48]	@ (8001628 <HAL_UART_RxCpltCallback+0x168>)
 80015f8:	4818      	ldr	r0, [pc, #96]	@ (800165c <HAL_UART_RxCpltCallback+0x19c>)
 80015fa:	f003 fa31 	bl	8004a60 <HAL_UART_Receive_IT>
	else if (huart->Instance == USART2)
	    {
	        Handle_UART_Command();  // Call command handler
	        HAL_UART_Receive_IT(&huart2, UART2_RX_Buffer, UART2_RX_BUFFER_SIZE); // Restart UART2 receive
	    }
}
 80015fe:	e00b      	b.n	8001618 <HAL_UART_RxCpltCallback+0x158>
	else if (huart->Instance == USART2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a16      	ldr	r2, [pc, #88]	@ (8001660 <HAL_UART_RxCpltCallback+0x1a0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d106      	bne.n	8001618 <HAL_UART_RxCpltCallback+0x158>
	        Handle_UART_Command();  // Call command handler
 800160a:	f7ff fedf 	bl	80013cc <Handle_UART_Command>
	        HAL_UART_Receive_IT(&huart2, UART2_RX_Buffer, UART2_RX_BUFFER_SIZE); // Restart UART2 receive
 800160e:	2201      	movs	r2, #1
 8001610:	4914      	ldr	r1, [pc, #80]	@ (8001664 <HAL_UART_RxCpltCallback+0x1a4>)
 8001612:	4810      	ldr	r0, [pc, #64]	@ (8001654 <HAL_UART_RxCpltCallback+0x194>)
 8001614:	f003 fa24 	bl	8004a60 <HAL_UART_Receive_IT>
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40013800 	.word	0x40013800
 8001624:	20000424 	.word	0x20000424
 8001628:	200003e8 	.word	0x200003e8
 800162c:	200003eb 	.word	0x200003eb
 8001630:	200003ea 	.word	0x200003ea
 8001634:	200003ec 	.word	0x200003ec
 8001638:	2000041e 	.word	0x2000041e
 800163c:	20000420 	.word	0x20000420
 8001640:	20000418 	.word	0x20000418
 8001644:	55555556 	.word	0x55555556
 8001648:	200003e5 	.word	0x200003e5
 800164c:	aaaaaaab 	.word	0xaaaaaaab
 8001650:	200003e4 	.word	0x200003e4
 8001654:	2000035c 	.word	0x2000035c
 8001658:	20000430 	.word	0x20000430
 800165c:	200002d4 	.word	0x200002d4
 8001660:	40004400 	.word	0x40004400
 8001664:	20000428 	.word	0x20000428

08001668 <delay_uS>:

/*****************Distance Trigger Mode Functions*****************/
void delay_uS(uint16_t delay)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <delay_uS+0x30>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < delay)
 800167a:	bf00      	nop
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <delay_uS+0x30>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	429a      	cmp	r2, r3
 8001686:	d3f9      	bcc.n	800167c <delay_uS+0x14>
	{

	}
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	2000023c 	.word	0x2000023c

0800169c <HCSR04_Read>:

void HCSR04_Read()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2140      	movs	r1, #64	@ 0x40
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a8:	f000 ff30 	bl	800250c <HAL_GPIO_WritePin>
	delay_uS(10);
 80016ac:	200a      	movs	r0, #10
 80016ae:	f7ff ffdb 	bl	8001668 <delay_uS>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2140      	movs	r1, #64	@ 0x40
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ba:	f000 ff27 	bl	800250c <HAL_GPIO_WritePin>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	if ((htim == &htim1) && (htim->Channel == 1))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a3b      	ldr	r2, [pc, #236]	@ (80017bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d16f      	bne.n	80017b4 <HAL_TIM_IC_CaptureCallback+0xf0>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7f1b      	ldrb	r3, [r3, #28]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d16b      	bne.n	80017b4 <HAL_TIM_IC_CaptureCallback+0xf0>
	{
		if (flag == 0)
 80016dc:	4b38      	ldr	r3, [pc, #224]	@ (80017c0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10b      	bne.n	80016fc <HAL_TIM_IC_CaptureCallback+0x38>
		{
			count_1 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 80016e4:	2100      	movs	r1, #0
 80016e6:	4835      	ldr	r0, [pc, #212]	@ (80017bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 80016e8:	f002 fdc0 	bl	800426c <HAL_TIM_ReadCapturedValue>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80016f2:	801a      	strh	r2, [r3, #0]
			flag = 1;
 80016f4:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
			sprintf(string_1, "distance: %f cm\n", distance);
			HAL_UART_Transmit(&huart2, (uint8_t*)string_1, strlen(string_1),10);
			flag = 0;
		}
	}
}
 80016fa:	e05b      	b.n	80017b4 <HAL_TIM_IC_CaptureCallback+0xf0>
			count_2 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 80016fc:	2100      	movs	r1, #0
 80016fe:	482f      	ldr	r0, [pc, #188]	@ (80017bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001700:	f002 fdb4 	bl	800426c <HAL_TIM_ReadCapturedValue>
 8001704:	4603      	mov	r3, r0
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b2f      	ldr	r3, [pc, #188]	@ (80017c8 <HAL_TIM_IC_CaptureCallback+0x104>)
 800170a:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim,0);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24
			if (count_2 >= count_1)
 8001714:	4b2c      	ldr	r3, [pc, #176]	@ (80017c8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001716:	881a      	ldrh	r2, [r3, #0]
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d317      	bcc.n	8001750 <HAL_TIM_IC_CaptureCallback+0x8c>
			    distance = (count_2 - count_1) / 58.0;
 8001720:	4b29      	ldr	r3, [pc, #164]	@ (80017c8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fef9 	bl	8000524 <__aeabi_i2d>
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <HAL_TIM_IC_CaptureCallback+0x108>)
 8001738:	f7ff f888 	bl	800084c <__aeabi_ddiv>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa30 	bl	8000ba8 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	4a21      	ldr	r2, [pc, #132]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e019      	b.n	8001784 <HAL_TIM_IC_CaptureCallback+0xc0>
			    distance = ((0xFFFF - count_1) + count_2 + 1) / 58.0;
 8001750:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001758:	33ff      	adds	r3, #255	@ 0xff
 800175a:	4a1b      	ldr	r2, [pc, #108]	@ (80017c8 <HAL_TIM_IC_CaptureCallback+0x104>)
 800175c:	8812      	ldrh	r2, [r2, #0]
 800175e:	4413      	add	r3, r2
 8001760:	3301      	adds	r3, #1
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fede 	bl	8000524 <__aeabi_i2d>
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_TIM_IC_CaptureCallback+0x108>)
 800176e:	f7ff f86d 	bl	800084c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff fa15 	bl	8000ba8 <__aeabi_d2f>
 800177e:	4603      	mov	r3, r0
 8001780:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001782:	6013      	str	r3, [r2, #0]
			sprintf(string_1, "distance: %f cm\n", distance);
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fedd 	bl	8000548 <__aeabi_f2d>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4910      	ldr	r1, [pc, #64]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001794:	4810      	ldr	r0, [pc, #64]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001796:	f005 f901 	bl	800699c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)string_1, strlen(string_1),10);
 800179a:	480f      	ldr	r0, [pc, #60]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x114>)
 800179c:	f7fe fd68 	bl	8000270 <strlen>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	230a      	movs	r3, #10
 80017a6:	490c      	ldr	r1, [pc, #48]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x114>)
 80017a8:	480c      	ldr	r0, [pc, #48]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x118>)
 80017aa:	f003 f8cf 	bl	800494c <HAL_UART_Transmit>
			flag = 0;
 80017ae:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200001f0 	.word	0x200001f0
 80017c0:	2000042c 	.word	0x2000042c
 80017c4:	20000434 	.word	0x20000434
 80017c8:	20000436 	.word	0x20000436
 80017cc:	404d0000 	.word	0x404d0000
 80017d0:	20000430 	.word	0x20000430
 80017d4:	08008c68 	.word	0x08008c68
 80017d8:	200003f0 	.word	0x200003f0
 80017dc:	2000035c 	.word	0x2000035c

080017e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    if (htim == &htim16)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a27      	ldr	r2, [pc, #156]	@ (8001888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d147      	bne.n	8001880 <HAL_TIM_PeriodElapsedCallback+0xa0>
    {
    	if (recording_mode != 2)
 80017f0:	4b26      	ldr	r3, [pc, #152]	@ (800188c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d005      	beq.n	8001806 <HAL_TIM_PeriodElapsedCallback+0x26>
    	{
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2108      	movs	r1, #8
 80017fe:	4824      	ldr	r0, [pc, #144]	@ (8001890 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001800:	f000 fe84 	bl	800250c <HAL_GPIO_WritePin>
			return; // Only handle in distance mode
 8001804:	e03c      	b.n	8001880 <HAL_TIM_PeriodElapsedCallback+0xa0>
    	}

    	// Only do this if not interrupted
    	HCSR04_Read();
 8001806:	f7ff ff49 	bl	800169c <HCSR04_Read>

    	if (distance < min_distance)
 800180a:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d513      	bpl.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x66>
    	{
    		no_object_counter = 0; // Reset debounce counter
 800181e:	4b1e      	ldr	r3, [pc, #120]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
			if (!object_detected)
 8001824:	4b1d      	ldr	r3, [pc, #116]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d128      	bne.n	8001880 <HAL_TIM_PeriodElapsedCallback+0xa0>
			{
				object_detected = 1;
 800182e:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
				recording_active = 1;
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]

				// Optional: feedback via LED or UART
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // LED ON
 800183a:	2201      	movs	r2, #1
 800183c:	2108      	movs	r1, #8
 800183e:	4814      	ldr	r0, [pc, #80]	@ (8001890 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001840:	f000 fe64 	bl	800250c <HAL_GPIO_WritePin>
 8001844:	e01c      	b.n	8001880 <HAL_TIM_PeriodElapsedCallback+0xa0>
				// HAL_UART_Transmit(&huart2, (uint8_t*)"Recording started\n", 18, 10);
			}
    	}
    	else
		{
			if (object_detected)
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d017      	beq.n	8001880 <HAL_TIM_PeriodElapsedCallback+0xa0>
			{
				no_object_counter++;
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	3301      	adds	r3, #1
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800185c:	701a      	strb	r2, [r3, #0]
				if (no_object_counter >= no_object_timeout_ticks)
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2202      	movs	r2, #2
 8001866:	4293      	cmp	r3, r2
 8001868:	d30a      	bcc.n	8001880 <HAL_TIM_PeriodElapsedCallback+0xa0>
				{
					object_detected = 0;
 800186a:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
					recording_active = 0;
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // LED OFF
 8001876:	2200      	movs	r2, #0
 8001878:	2108      	movs	r1, #8
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800187c:	f000 fe46 	bl	800250c <HAL_GPIO_WritePin>
					// HAL_UART_Transmit(&huart2, (uint8_t*)"Recording stopped\n", 18, 10);
				}
			}
		}
    }
}
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000288 	.word	0x20000288
 800188c:	200003e4 	.word	0x200003e4
 8001890:	48000400 	.word	0x48000400
 8001894:	20000430 	.word	0x20000430
 8001898:	20000439 	.word	0x20000439
 800189c:	20000438 	.word	0x20000438
 80018a0:	200003e5 	.word	0x200003e5

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <Error_Handler+0x8>

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <HAL_MspInit+0x44>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ba:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <HAL_MspInit+0x44>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018c2:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <HAL_MspInit+0x44>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_MspInit+0x44>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d2:	4a08      	ldr	r2, [pc, #32]	@ (80018f4 <HAL_MspInit+0x44>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_MspInit+0x44>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	@ 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a36      	ldr	r2, [pc, #216]	@ (80019f0 <HAL_TIM_Base_MspInit+0xf8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d13a      	bne.n	8001990 <HAL_TIM_Base_MspInit+0x98>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800191a:	4b36      	ldr	r3, [pc, #216]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191e:	4a35      	ldr	r2, [pc, #212]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 8001920:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001924:	6613      	str	r3, [r2, #96]	@ 0x60
 8001926:	4b33      	ldr	r3, [pc, #204]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b30      	ldr	r3, [pc, #192]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	4a2f      	ldr	r2, [pc, #188]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193e:	4b2d      	ldr	r3, [pc, #180]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800194a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800195c:	2301      	movs	r3, #1
 800195e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196a:	f000 fc65 	bl	8002238 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	2019      	movs	r0, #25
 8001974:	f000 fbab 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001978:	2019      	movs	r0, #25
 800197a:	f000 fbc4 	bl	8002106 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	201b      	movs	r0, #27
 8001984:	f000 fba3 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001988:	201b      	movs	r0, #27
 800198a:	f000 fbbc 	bl	8002106 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 800198e:	e02a      	b.n	80019e6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a18      	ldr	r2, [pc, #96]	@ (80019f8 <HAL_TIM_Base_MspInit+0x100>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10c      	bne.n	80019b4 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199e:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a6:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
}
 80019b2:	e018      	b.n	80019e6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM16)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a10      	ldr	r2, [pc, #64]	@ (80019fc <HAL_TIM_Base_MspInit+0x104>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d113      	bne.n	80019e6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019be:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ca:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <HAL_TIM_Base_MspInit+0xfc>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2019      	movs	r0, #25
 80019dc:	f000 fb77 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019e0:	2019      	movs	r0, #25
 80019e2:	f000 fb90 	bl	8002106 <HAL_NVIC_EnableIRQ>
}
 80019e6:	bf00      	nop
 80019e8:	3730      	adds	r7, #48	@ 0x30
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40012c00 	.word	0x40012c00
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40001000 	.word	0x40001000
 80019fc:	40014400 	.word	0x40014400

08001a00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0a0      	sub	sp, #128	@ 0x80
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a18:	f107 0318 	add.w	r3, r7, #24
 8001a1c:	2254      	movs	r2, #84	@ 0x54
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f005 f820 	bl	8006a66 <memset>
  if(huart->Instance==USART1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a4f      	ldr	r2, [pc, #316]	@ (8001b68 <HAL_UART_MspInit+0x168>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d140      	bne.n	8001ab2 <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a34:	2300      	movs	r3, #0
 8001a36:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 fc29 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a48:	f7ff ff2c 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a4c:	4b47      	ldr	r3, [pc, #284]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a50:	4a46      	ldr	r2, [pc, #280]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001a52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a56:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a58:	4b44      	ldr	r3, [pc, #272]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b41      	ldr	r3, [pc, #260]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a68:	4a40      	ldr	r2, [pc, #256]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a70:	4b3e      	ldr	r3, [pc, #248]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a7c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a8e:	2307      	movs	r3, #7
 8001a90:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a96:	4619      	mov	r1, r3
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a9c:	f000 fbcc 	bl	8002238 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	2025      	movs	r0, #37	@ 0x25
 8001aa6:	f000 fb12 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aaa:	2025      	movs	r0, #37	@ 0x25
 8001aac:	f000 fb2b 	bl	8002106 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ab0:	e055      	b.n	8001b5e <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a2e      	ldr	r2, [pc, #184]	@ (8001b70 <HAL_UART_MspInit+0x170>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d150      	bne.n	8001b5e <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 fbe3 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001ad4:	f7ff fee6 	bl	80018a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad8:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001adc:	4a23      	ldr	r2, [pc, #140]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ae4:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <HAL_UART_MspInit+0x16c>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b18:	2307      	movs	r3, #7
 8001b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b20:	4619      	mov	r1, r3
 8001b22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b26:	f000 fb87 	bl	8002238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b44:	4619      	mov	r1, r3
 8001b46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b4a:	f000 fb75 	bl	8002238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2026      	movs	r0, #38	@ 0x26
 8001b54:	f000 fabb 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b58:	2026      	movs	r0, #38	@ 0x26
 8001b5a:	f000 fad4 	bl	8002106 <HAL_NVIC_EnableIRQ>
}
 8001b5e:	bf00      	nop
 8001b60:	3780      	adds	r7, #128	@ 0x80
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40004400 	.word	0x40004400

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <NMI_Handler+0x4>

08001b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bca:	f000 f985 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd8:	4803      	ldr	r0, [pc, #12]	@ (8001be8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001bda:	f002 f8db 	bl	8003d94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001bde:	4803      	ldr	r0, [pc, #12]	@ (8001bec <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001be0:	f002 f8d8 	bl	8003d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200001f0 	.word	0x200001f0
 8001bec:	20000288 	.word	0x20000288

08001bf0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <TIM1_CC_IRQHandler+0x10>)
 8001bf6:	f002 f8cd 	bl	8003d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200001f0 	.word	0x200001f0

08001c04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <USART1_IRQHandler+0x10>)
 8001c0a:	f002 ff75 	bl	8004af8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200002d4 	.word	0x200002d4

08001c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <USART2_IRQHandler+0x10>)
 8001c1e:	f002 ff6b 	bl	8004af8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000035c 	.word	0x2000035c

08001c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return 1;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_kill>:

int _kill(int pid, int sig)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c46:	f004 ff61 	bl	8006b0c <__errno>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2216      	movs	r2, #22
 8001c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_exit>:

void _exit (int status)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ffe7 	bl	8001c3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c6e:	bf00      	nop
 8001c70:	e7fd      	b.n	8001c6e <_exit+0x12>

08001c72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e00a      	b.n	8001c9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c84:	f3af 8000 	nop.w
 8001c88:	4601      	mov	r1, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	60ba      	str	r2, [r7, #8]
 8001c90:	b2ca      	uxtb	r2, r1
 8001c92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf0      	blt.n	8001c84 <_read+0x12>
  }

  return len;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e009      	b.n	8001cd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	60ba      	str	r2, [r7, #8]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbf1      	blt.n	8001cbe <_write+0x12>
  }
  return len;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_close>:

int _close(int file)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_isatty>:

int _isatty(int file)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f004 fec6 	bl	8006b0c <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	2000c000 	.word	0x2000c000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	2000043c 	.word	0x2000043c
 8001db4:	20000590 	.word	0x20000590

08001db8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de0:	f7ff ffea 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	@ (8001e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e20 <LoopForever+0xe>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001e28 <LoopForever+0x16>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f004 fe85 	bl	8006b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e0e:	f7ff f8b1 	bl	8000f74 <main>

08001e12 <LoopForever>:

LoopForever:
    b LoopForever
 8001e12:	e7fe      	b.n	8001e12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e14:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e20:	0800904c 	.word	0x0800904c
  ldr r2, =_sbss
 8001e24:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e28:	20000590 	.word	0x20000590

08001e2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC1_IRQHandler>

08001e2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e38:	2003      	movs	r0, #3
 8001e3a:	f000 f93d 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f000 f80e 	bl	8001e60 <HAL_InitTick>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	e001      	b.n	8001e54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e50:	f7ff fd2e 	bl	80018b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e54:	79fb      	ldrb	r3, [r7, #7]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <HAL_InitTick+0x6c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d023      	beq.n	8001ebc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e74:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <HAL_InitTick+0x70>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <HAL_InitTick+0x6c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f949 	bl	8002122 <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10f      	bne.n	8001eb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d809      	bhi.n	8001eb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f000 f913 	bl	80020ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <HAL_InitTick+0x74>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e007      	b.n	8001ec0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	e004      	b.n	8001ec0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	e001      	b.n	8001ec0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_IncTick+0x20>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_IncTick+0x24>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <HAL_IncTick+0x24>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	20000440 	.word	0x20000440

08001f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b03      	ldr	r3, [pc, #12]	@ (8001f14 <HAL_GetTick+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000440 	.word	0x20000440

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	@ (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff29 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff3e 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff8e 	bl	800200c <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff31 	bl	8001f7c <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d008      	beq.n	8002164 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2204      	movs	r2, #4
 8002156:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e022      	b.n	80021aa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 020e 	bic.w	r2, r2, #14
 8002172:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002188:	f003 021c 	and.w	r2, r3, #28
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f202 	lsl.w	r2, r1, r2
 8002196:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d005      	beq.n	80021da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2204      	movs	r2, #4
 80021d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e029      	b.n	800222e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 020e 	bic.w	r2, r2, #14
 80021e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f003 021c 	and.w	r2, r3, #28
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f202 	lsl.w	r2, r1, r2
 800220c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
    }
  }
  return status;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002246:	e148      	b.n	80024da <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2101      	movs	r1, #1
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	4013      	ands	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 813a 	beq.w	80024d4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d005      	beq.n	8002278 <HAL_GPIO_Init+0x40>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d130      	bne.n	80022da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ae:	2201      	movs	r2, #1
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 0201 	and.w	r2, r3, #1
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d017      	beq.n	8002316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d123      	bne.n	800236a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	220f      	movs	r2, #15
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	08da      	lsrs	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3208      	adds	r2, #8
 8002364:	6939      	ldr	r1, [r7, #16]
 8002366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2203      	movs	r2, #3
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0203 	and.w	r2, r3, #3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8094 	beq.w	80024d4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ac:	4b52      	ldr	r3, [pc, #328]	@ (80024f8 <HAL_GPIO_Init+0x2c0>)
 80023ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b0:	4a51      	ldr	r2, [pc, #324]	@ (80024f8 <HAL_GPIO_Init+0x2c0>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80023b8:	4b4f      	ldr	r3, [pc, #316]	@ (80024f8 <HAL_GPIO_Init+0x2c0>)
 80023ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023c4:	4a4d      	ldr	r2, [pc, #308]	@ (80024fc <HAL_GPIO_Init+0x2c4>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	220f      	movs	r2, #15
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023ee:	d00d      	beq.n	800240c <HAL_GPIO_Init+0x1d4>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a43      	ldr	r2, [pc, #268]	@ (8002500 <HAL_GPIO_Init+0x2c8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <HAL_GPIO_Init+0x1d0>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a42      	ldr	r2, [pc, #264]	@ (8002504 <HAL_GPIO_Init+0x2cc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_GPIO_Init+0x1cc>
 8002400:	2302      	movs	r3, #2
 8002402:	e004      	b.n	800240e <HAL_GPIO_Init+0x1d6>
 8002404:	2307      	movs	r3, #7
 8002406:	e002      	b.n	800240e <HAL_GPIO_Init+0x1d6>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_GPIO_Init+0x1d6>
 800240c:	2300      	movs	r3, #0
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	f002 0203 	and.w	r2, r2, #3
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	4093      	lsls	r3, r2
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800241e:	4937      	ldr	r1, [pc, #220]	@ (80024fc <HAL_GPIO_Init+0x2c4>)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800242c:	4b36      	ldr	r3, [pc, #216]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002450:	4a2d      	ldr	r2, [pc, #180]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002456:	4b2c      	ldr	r3, [pc, #176]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800247a:	4a23      	ldr	r2, [pc, #140]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002480:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024a4:	4a18      	ldr	r2, [pc, #96]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024aa:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f aeaf 	bne.w	8002248 <HAL_GPIO_Init+0x10>
  }
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000
 8002500:	48000400 	.word	0x48000400
 8002504:	48000800 	.word	0x48000800
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002528:	e002      	b.n	8002530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40007000 	.word	0x40007000

0800255c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <HAL_PWREx_GetVoltageRange+0x18>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40007000 	.word	0x40007000

08002578 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002586:	d130      	bne.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002588:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002594:	d038      	beq.n	8002608 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002596:	4b20      	ldr	r3, [pc, #128]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800259e:	4a1e      	ldr	r2, [pc, #120]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025a6:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2232      	movs	r2, #50	@ 0x32
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0c9b      	lsrs	r3, r3, #18
 80025b8:	3301      	adds	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025bc:	e002      	b.n	80025c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025c4:	4b14      	ldr	r3, [pc, #80]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d0:	d102      	bne.n	80025d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f2      	bne.n	80025be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e4:	d110      	bne.n	8002608 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e00f      	b.n	800260a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f6:	d007      	beq.n	8002608 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025f8:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002600:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002602:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002606:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40007000 	.word	0x40007000
 800261c:	20000000 	.word	0x20000000
 8002620:	431bde83 	.word	0x431bde83

08002624 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f000 bc02 	b.w	8002e3c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002638:	4b96      	ldr	r3, [pc, #600]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002642:	4b94      	ldr	r3, [pc, #592]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80e4 	beq.w	8002822 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <HAL_RCC_OscConfig+0x4c>
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	f040 808b 	bne.w	800277e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b01      	cmp	r3, #1
 800266c:	f040 8087 	bne.w	800277e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002670:	4b88      	ldr	r3, [pc, #544]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_OscConfig+0x64>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e3d9      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1a      	ldr	r2, [r3, #32]
 800268c:	4b81      	ldr	r3, [pc, #516]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d004      	beq.n	80026a2 <HAL_RCC_OscConfig+0x7e>
 8002698:	4b7e      	ldr	r3, [pc, #504]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026a0:	e005      	b.n	80026ae <HAL_RCC_OscConfig+0x8a>
 80026a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80026a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d223      	bcs.n	80026fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fd8c 	bl	80031d4 <RCC_SetFlashLatencyFromMSIRange>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e3ba      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c6:	4b73      	ldr	r3, [pc, #460]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a72      	ldr	r2, [pc, #456]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80026cc:	f043 0308 	orr.w	r3, r3, #8
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b70      	ldr	r3, [pc, #448]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	496d      	ldr	r1, [pc, #436]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	4968      	ldr	r1, [pc, #416]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
 80026f8:	e025      	b.n	8002746 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026fa:	4b66      	ldr	r3, [pc, #408]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a65      	ldr	r2, [pc, #404]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002700:	f043 0308 	orr.w	r3, r3, #8
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b63      	ldr	r3, [pc, #396]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4960      	ldr	r1, [pc, #384]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002718:	4b5e      	ldr	r3, [pc, #376]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	495b      	ldr	r1, [pc, #364]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fd4c 	bl	80031d4 <RCC_SetFlashLatencyFromMSIRange>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e37a      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002746:	f000 fc81 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800274a:	4602      	mov	r2, r0
 800274c:	4b51      	ldr	r3, [pc, #324]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	4950      	ldr	r1, [pc, #320]	@ (8002898 <HAL_RCC_OscConfig+0x274>)
 8002758:	5ccb      	ldrb	r3, [r1, r3]
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a4e      	ldr	r2, [pc, #312]	@ (800289c <HAL_RCC_OscConfig+0x278>)
 8002764:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002766:	4b4e      	ldr	r3, [pc, #312]	@ (80028a0 <HAL_RCC_OscConfig+0x27c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fb78 	bl	8001e60 <HAL_InitTick>
 8002770:	4603      	mov	r3, r0
 8002772:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d052      	beq.n	8002820 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	e35e      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d032      	beq.n	80027ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002786:	4b43      	ldr	r3, [pc, #268]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a42      	ldr	r2, [pc, #264]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002792:	f7ff fbb5 	bl	8001f00 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800279a:	f7ff fbb1 	bl	8001f00 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e347      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ac:	4b39      	ldr	r3, [pc, #228]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b8:	4b36      	ldr	r3, [pc, #216]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a35      	ldr	r2, [pc, #212]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80027be:	f043 0308 	orr.w	r3, r3, #8
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4930      	ldr	r1, [pc, #192]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	492b      	ldr	r1, [pc, #172]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
 80027ea:	e01a      	b.n	8002822 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027ec:	4b29      	ldr	r3, [pc, #164]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a28      	ldr	r2, [pc, #160]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027f8:	f7ff fb82 	bl	8001f00 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002800:	f7ff fb7e 	bl	8001f00 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e314      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002812:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x1dc>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d073      	beq.n	8002916 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x21c>
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d10e      	bne.n	8002858 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d10b      	bne.n	8002858 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002840:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d063      	beq.n	8002914 <HAL_RCC_OscConfig+0x2f0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d15f      	bne.n	8002914 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e2f1      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002860:	d106      	bne.n	8002870 <HAL_RCC_OscConfig+0x24c>
 8002862:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a0b      	ldr	r2, [pc, #44]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e025      	b.n	80028bc <HAL_RCC_OscConfig+0x298>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002878:	d114      	bne.n	80028a4 <HAL_RCC_OscConfig+0x280>
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a05      	ldr	r2, [pc, #20]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b03      	ldr	r3, [pc, #12]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a02      	ldr	r2, [pc, #8]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e013      	b.n	80028bc <HAL_RCC_OscConfig+0x298>
 8002894:	40021000 	.word	0x40021000
 8002898:	08008c7c 	.word	0x08008c7c
 800289c:	20000000 	.word	0x20000000
 80028a0:	20000004 	.word	0x20000004
 80028a4:	4ba0      	ldr	r3, [pc, #640]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a9f      	ldr	r2, [pc, #636]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b9d      	ldr	r3, [pc, #628]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a9c      	ldr	r2, [pc, #624]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7ff fb1c 	bl	8001f00 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff fb18 	bl	8001f00 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	@ 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e2ae      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028de:	4b92      	ldr	r3, [pc, #584]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x2a8>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7ff fb08 	bl	8001f00 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f4:	f7ff fb04 	bl	8001f00 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	@ 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e29a      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002906:	4b88      	ldr	r3, [pc, #544]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x2d0>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d060      	beq.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d005      	beq.n	8002934 <HAL_RCC_OscConfig+0x310>
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d119      	bne.n	8002962 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d116      	bne.n	8002962 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002934:	4b7c      	ldr	r3, [pc, #496]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_OscConfig+0x328>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e277      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294c:	4b76      	ldr	r3, [pc, #472]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	4973      	ldr	r1, [pc, #460]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002960:	e040      	b.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d023      	beq.n	80029b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800296a:	4b6f      	ldr	r3, [pc, #444]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7ff fac3 	bl	8001f00 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297e:	f7ff fabf 	bl	8001f00 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e255      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002990:	4b65      	ldr	r3, [pc, #404]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b62      	ldr	r3, [pc, #392]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	061b      	lsls	r3, r3, #24
 80029aa:	495f      	ldr	r1, [pc, #380]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
 80029b0:	e018      	b.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 80029b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7ff fa9f 	bl	8001f00 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c6:	f7ff fa9b 	bl	8001f00 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e231      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d8:	4b53      	ldr	r3, [pc, #332]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f0      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d03c      	beq.n	8002a6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01c      	beq.n	8002a32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 80029fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fe:	4a4a      	ldr	r2, [pc, #296]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7ff fa7a 	bl	8001f00 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a10:	f7ff fa76 	bl	8001f00 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e20c      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a22:	4b41      	ldr	r3, [pc, #260]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ef      	beq.n	8002a10 <HAL_RCC_OscConfig+0x3ec>
 8002a30:	e01b      	b.n	8002a6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a32:	4b3d      	ldr	r3, [pc, #244]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a38:	4a3b      	ldr	r2, [pc, #236]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a42:	f7ff fa5d 	bl	8001f00 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a4a:	f7ff fa59 	bl	8001f00 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e1ef      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a5c:	4b32      	ldr	r3, [pc, #200]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1ef      	bne.n	8002a4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80a6 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8c:	4a26      	ldr	r2, [pc, #152]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a94:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa4:	4b21      	ldr	r3, [pc, #132]	@ (8002b2c <HAL_RCC_OscConfig+0x508>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d118      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b2c <HAL_RCC_OscConfig+0x508>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b2c <HAL_RCC_OscConfig+0x508>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abc:	f7ff fa20 	bl	8001f00 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7ff fa1c 	bl	8001f00 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e1b2      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad6:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <HAL_RCC_OscConfig+0x508>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d108      	bne.n	8002afc <HAL_RCC_OscConfig+0x4d8>
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002afa:	e029      	b.n	8002b50 <HAL_RCC_OscConfig+0x52c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d115      	bne.n	8002b30 <HAL_RCC_OscConfig+0x50c>
 8002b04:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0a:	4a07      	ldr	r2, [pc, #28]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b14:	4b04      	ldr	r3, [pc, #16]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1a:	4a03      	ldr	r2, [pc, #12]	@ (8002b28 <HAL_RCC_OscConfig+0x504>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x52c>
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	4b9a      	ldr	r3, [pc, #616]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	4a99      	ldr	r2, [pc, #612]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b40:	4b96      	ldr	r3, [pc, #600]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b46:	4a95      	ldr	r2, [pc, #596]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d016      	beq.n	8002b86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7ff f9d2 	bl	8001f00 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7ff f9ce 	bl	8001f00 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e162      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b76:	4b89      	ldr	r3, [pc, #548]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ed      	beq.n	8002b60 <HAL_RCC_OscConfig+0x53c>
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7ff f9bb 	bl	8001f00 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7ff f9b7 	bl	8001f00 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e14b      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba4:	4b7d      	ldr	r3, [pc, #500]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ed      	bne.n	8002b8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb2:	7ffb      	ldrb	r3, [r7, #31]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb8:	4b78      	ldr	r3, [pc, #480]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	4a77      	ldr	r2, [pc, #476]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d03c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bd8:	4b70      	ldr	r3, [pc, #448]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bde:	4a6f      	ldr	r2, [pc, #444]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7ff f98a 	bl	8001f00 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bf0:	f7ff f986 	bl	8001f00 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e11c      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c02:	4b66      	ldr	r3, [pc, #408]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ef      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x5cc>
 8002c10:	e01b      	b.n	8002c4a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c12:	4b62      	ldr	r3, [pc, #392]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c18:	4a60      	ldr	r2, [pc, #384]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7ff f96d 	bl	8001f00 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c2a:	f7ff f969 	bl	8001f00 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0ff      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c3c:	4b57      	ldr	r3, [pc, #348]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ef      	bne.n	8002c2a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80f3 	beq.w	8002e3a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	f040 80c9 	bne.w	8002df0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f003 0203 	and.w	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d12c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d123      	bne.n	8002ccc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d11b      	bne.n	8002ccc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d113      	bne.n	8002ccc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d109      	bne.n	8002ccc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d06b      	beq.n	8002da4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d062      	beq.n	8002d98 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cd2:	4b32      	ldr	r3, [pc, #200]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0ac      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002ce8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cee:	f7ff f907 	bl	8001f00 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7ff f903 	bl	8001f00 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e099      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d08:	4b24      	ldr	r3, [pc, #144]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d14:	4b21      	ldr	r3, [pc, #132]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <HAL_RCC_OscConfig+0x77c>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d24:	3a01      	subs	r2, #1
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	4311      	orrs	r1, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d2e:	0212      	lsls	r2, r2, #8
 8002d30:	4311      	orrs	r1, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d36:	0852      	lsrs	r2, r2, #1
 8002d38:	3a01      	subs	r2, #1
 8002d3a:	0552      	lsls	r2, r2, #21
 8002d3c:	4311      	orrs	r1, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d42:	0852      	lsrs	r2, r2, #1
 8002d44:	3a01      	subs	r2, #1
 8002d46:	0652      	lsls	r2, r2, #25
 8002d48:	4311      	orrs	r1, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d4e:	06d2      	lsls	r2, r2, #27
 8002d50:	430a      	orrs	r2, r1
 8002d52:	4912      	ldr	r1, [pc, #72]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d58:	4b10      	ldr	r3, [pc, #64]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d64:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a0c      	ldr	r2, [pc, #48]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d70:	f7ff f8c6 	bl	8001f00 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7ff f8c2 	bl	8001f00 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e058      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8a:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d96:	e050      	b.n	8002e3a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e04f      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da4:	4b27      	ldr	r3, [pc, #156]	@ (8002e44 <HAL_RCC_OscConfig+0x820>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d144      	bne.n	8002e3a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002db0:	4b24      	ldr	r3, [pc, #144]	@ (8002e44 <HAL_RCC_OscConfig+0x820>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a23      	ldr	r2, [pc, #140]	@ (8002e44 <HAL_RCC_OscConfig+0x820>)
 8002db6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dbc:	4b21      	ldr	r3, [pc, #132]	@ (8002e44 <HAL_RCC_OscConfig+0x820>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a20      	ldr	r2, [pc, #128]	@ (8002e44 <HAL_RCC_OscConfig+0x820>)
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dc8:	f7ff f89a 	bl	8001f00 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7ff f896 	bl	8001f00 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e02c      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	4b18      	ldr	r3, [pc, #96]	@ (8002e44 <HAL_RCC_OscConfig+0x820>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x7ac>
 8002dee:	e024      	b.n	8002e3a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d01f      	beq.n	8002e36 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <HAL_RCC_OscConfig+0x820>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a12      	ldr	r2, [pc, #72]	@ (8002e44 <HAL_RCC_OscConfig+0x820>)
 8002dfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7ff f87d 	bl	8001f00 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0a:	f7ff f879 	bl	8001f00 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e00f      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1c:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <HAL_RCC_OscConfig+0x820>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_OscConfig+0x820>)
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	4905      	ldr	r1, [pc, #20]	@ (8002e44 <HAL_RCC_OscConfig+0x820>)
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_RCC_OscConfig+0x824>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	60cb      	str	r3, [r1, #12]
 8002e34:	e001      	b.n	8002e3a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	feeefffc 	.word	0xfeeefffc

08002e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0e7      	b.n	8003030 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e60:	4b75      	ldr	r3, [pc, #468]	@ (8003038 <HAL_RCC_ClockConfig+0x1ec>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d910      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b72      	ldr	r3, [pc, #456]	@ (8003038 <HAL_RCC_ClockConfig+0x1ec>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 0207 	bic.w	r2, r3, #7
 8002e76:	4970      	ldr	r1, [pc, #448]	@ (8003038 <HAL_RCC_ClockConfig+0x1ec>)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b6e      	ldr	r3, [pc, #440]	@ (8003038 <HAL_RCC_ClockConfig+0x1ec>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0cf      	b.n	8003030 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b66      	ldr	r3, [pc, #408]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d908      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b63      	ldr	r3, [pc, #396]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4960      	ldr	r1, [pc, #384]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d04c      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d121      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0a6      	b.n	8003030 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eea:	4b54      	ldr	r3, [pc, #336]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d115      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e09a      	b.n	8003030 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f02:	4b4e      	ldr	r3, [pc, #312]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e08e      	b.n	8003030 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f12:	4b4a      	ldr	r3, [pc, #296]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e086      	b.n	8003030 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f22:	4b46      	ldr	r3, [pc, #280]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f023 0203 	bic.w	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4943      	ldr	r1, [pc, #268]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f34:	f7fe ffe4 	bl	8001f00 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3c:	f7fe ffe0 	bl	8001f00 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e06e      	b.n	8003030 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	4b3a      	ldr	r3, [pc, #232]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 020c 	and.w	r2, r3, #12
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d1eb      	bne.n	8002f3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4b31      	ldr	r3, [pc, #196]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d208      	bcs.n	8002f92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b2e      	ldr	r3, [pc, #184]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	492b      	ldr	r1, [pc, #172]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f92:	4b29      	ldr	r3, [pc, #164]	@ (8003038 <HAL_RCC_ClockConfig+0x1ec>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d210      	bcs.n	8002fc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa0:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 0207 	bic.w	r2, r3, #7
 8002fa8:	4923      	ldr	r1, [pc, #140]	@ (8003038 <HAL_RCC_ClockConfig+0x1ec>)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb0:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <HAL_RCC_ClockConfig+0x1ec>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e036      	b.n	8003030 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fce:	4b1b      	ldr	r3, [pc, #108]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	4918      	ldr	r1, [pc, #96]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d009      	beq.n	8003000 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fec:	4b13      	ldr	r3, [pc, #76]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4910      	ldr	r1, [pc, #64]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003000:	f000 f824 	bl	800304c <HAL_RCC_GetSysClockFreq>
 8003004:	4602      	mov	r2, r0
 8003006:	4b0d      	ldr	r3, [pc, #52]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	490b      	ldr	r1, [pc, #44]	@ (8003040 <HAL_RCC_ClockConfig+0x1f4>)
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
 800301c:	4a09      	ldr	r2, [pc, #36]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 800301e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003020:	4b09      	ldr	r3, [pc, #36]	@ (8003048 <HAL_RCC_ClockConfig+0x1fc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe ff1b 	bl	8001e60 <HAL_InitTick>
 800302a:	4603      	mov	r3, r0
 800302c:	72fb      	strb	r3, [r7, #11]

  return status;
 800302e:	7afb      	ldrb	r3, [r7, #11]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40022000 	.word	0x40022000
 800303c:	40021000 	.word	0x40021000
 8003040:	08008c7c 	.word	0x08008c7c
 8003044:	20000000 	.word	0x20000000
 8003048:	20000004 	.word	0x20000004

0800304c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	@ 0x24
 8003050:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305a:	4b3e      	ldr	r3, [pc, #248]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x108>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003064:	4b3b      	ldr	r3, [pc, #236]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x108>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x34>
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d121      	bne.n	80030be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d11e      	bne.n	80030be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003080:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x108>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d107      	bne.n	800309c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800308c:	4b31      	ldr	r3, [pc, #196]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x108>)
 800308e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	e005      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800309c:	4b2d      	ldr	r3, [pc, #180]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x108>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10d      	bne.n	80030d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d102      	bne.n	80030ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030c4:	4b25      	ldr	r3, [pc, #148]	@ (800315c <HAL_RCC_GetSysClockFreq+0x110>)
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	e004      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030d0:	4b23      	ldr	r3, [pc, #140]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x114>)
 80030d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d134      	bne.n	8003144 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030da:	4b1e      	ldr	r3, [pc, #120]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x108>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d003      	beq.n	80030f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d003      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0xac>
 80030f0:	e005      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030f2:	4b1a      	ldr	r3, [pc, #104]	@ (800315c <HAL_RCC_GetSysClockFreq+0x110>)
 80030f4:	617b      	str	r3, [r7, #20]
      break;
 80030f6:	e005      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030f8:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x114>)
 80030fa:	617b      	str	r3, [r7, #20]
      break;
 80030fc:	e002      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	617b      	str	r3, [r7, #20]
      break;
 8003102:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003104:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x108>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	3301      	adds	r3, #1
 8003110:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003112:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x108>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	fb03 f202 	mul.w	r2, r3, r2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800312a:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x108>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	0e5b      	lsrs	r3, r3, #25
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	3301      	adds	r3, #1
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003144:	69bb      	ldr	r3, [r7, #24]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3724      	adds	r7, #36	@ 0x24
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	08008c94 	.word	0x08008c94
 800315c:	00f42400 	.word	0x00f42400
 8003160:	007a1200 	.word	0x007a1200

08003164 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003168:	4b03      	ldr	r3, [pc, #12]	@ (8003178 <HAL_RCC_GetHCLKFreq+0x14>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000000 	.word	0x20000000

0800317c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003180:	f7ff fff0 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0a1b      	lsrs	r3, r3, #8
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4904      	ldr	r1, [pc, #16]	@ (80031a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	08008c8c 	.word	0x08008c8c

080031a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031ac:	f7ff ffda 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0adb      	lsrs	r3, r3, #11
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4904      	ldr	r1, [pc, #16]	@ (80031d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	08008c8c 	.word	0x08008c8c

080031d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031e0:	4b2a      	ldr	r3, [pc, #168]	@ (800328c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031ec:	f7ff f9b6 	bl	800255c <HAL_PWREx_GetVoltageRange>
 80031f0:	6178      	str	r0, [r7, #20]
 80031f2:	e014      	b.n	800321e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b25      	ldr	r3, [pc, #148]	@ (800328c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	4a24      	ldr	r2, [pc, #144]	@ (800328c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003200:	4b22      	ldr	r3, [pc, #136]	@ (800328c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800320c:	f7ff f9a6 	bl	800255c <HAL_PWREx_GetVoltageRange>
 8003210:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003212:	4b1e      	ldr	r3, [pc, #120]	@ (800328c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800321c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003224:	d10b      	bne.n	800323e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b80      	cmp	r3, #128	@ 0x80
 800322a:	d919      	bls.n	8003260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003230:	d902      	bls.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003232:	2302      	movs	r3, #2
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	e013      	b.n	8003260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003238:	2301      	movs	r3, #1
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e010      	b.n	8003260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b80      	cmp	r3, #128	@ 0x80
 8003242:	d902      	bls.n	800324a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003244:	2303      	movs	r3, #3
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	e00a      	b.n	8003260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b80      	cmp	r3, #128	@ 0x80
 800324e:	d102      	bne.n	8003256 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003250:	2302      	movs	r3, #2
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	e004      	b.n	8003260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b70      	cmp	r3, #112	@ 0x70
 800325a:	d101      	bne.n	8003260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800325c:	2301      	movs	r3, #1
 800325e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003260:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 0207 	bic.w	r2, r3, #7
 8003268:	4909      	ldr	r1, [pc, #36]	@ (8003290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003270:	4b07      	ldr	r3, [pc, #28]	@ (8003290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	429a      	cmp	r2, r3
 800327c:	d001      	beq.n	8003282 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	40022000 	.word	0x40022000

08003294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800329c:	2300      	movs	r3, #0
 800329e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032a0:	2300      	movs	r3, #0
 80032a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d031      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032b8:	d01a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032be:	d814      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d009      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032c8:	d10f      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80032ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032d6:	e00c      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f9de 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032e8:	e003      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	74fb      	strb	r3, [r7, #19]
      break;
 80032ee:	e000      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80032f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032f8:	4b51      	ldr	r3, [pc, #324]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	494e      	ldr	r1, [pc, #312]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800330e:	e001      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 809e 	beq.w	800345e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003326:	4b46      	ldr	r3, [pc, #280]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00d      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333c:	4b40      	ldr	r3, [pc, #256]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003340:	4a3f      	ldr	r2, [pc, #252]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003346:	6593      	str	r3, [r2, #88]	@ 0x58
 8003348:	4b3d      	ldr	r3, [pc, #244]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003354:	2301      	movs	r3, #1
 8003356:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003358:	4b3a      	ldr	r3, [pc, #232]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a39      	ldr	r2, [pc, #228]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003362:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003364:	f7fe fdcc 	bl	8001f00 <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800336a:	e009      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fe fdc8 	bl	8001f00 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d902      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	74fb      	strb	r3, [r7, #19]
        break;
 800337e:	e005      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003380:	4b30      	ldr	r3, [pc, #192]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ef      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d15a      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003392:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003398:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800339c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01e      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d019      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ae:	4b24      	ldr	r3, [pc, #144]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ba:	4b21      	ldr	r3, [pc, #132]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033da:	4a19      	ldr	r2, [pc, #100]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d016      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fe fd88 	bl	8001f00 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f2:	e00b      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7fe fd84 	bl	8001f00 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d902      	bls.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	74fb      	strb	r3, [r7, #19]
            break;
 800340a:	e006      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340c:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ec      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800341a:	7cfb      	ldrb	r3, [r7, #19]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003420:	4b07      	ldr	r3, [pc, #28]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003426:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342e:	4904      	ldr	r1, [pc, #16]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003436:	e009      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	74bb      	strb	r3, [r7, #18]
 800343c:	e006      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003448:	7cfb      	ldrb	r3, [r7, #19]
 800344a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800344c:	7c7b      	ldrb	r3, [r7, #17]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d105      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003452:	4b8a      	ldr	r3, [pc, #552]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003456:	4a89      	ldr	r2, [pc, #548]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800345c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800346a:	4b84      	ldr	r3, [pc, #528]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003470:	f023 0203 	bic.w	r2, r3, #3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	4980      	ldr	r1, [pc, #512]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800348c:	4b7b      	ldr	r3, [pc, #492]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003492:	f023 020c 	bic.w	r2, r3, #12
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	4978      	ldr	r1, [pc, #480]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ae:	4b73      	ldr	r3, [pc, #460]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034bc:	496f      	ldr	r1, [pc, #444]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034d0:	4b6a      	ldr	r3, [pc, #424]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034de:	4967      	ldr	r1, [pc, #412]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034f2:	4b62      	ldr	r3, [pc, #392]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003500:	495e      	ldr	r1, [pc, #376]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003514:	4b59      	ldr	r3, [pc, #356]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003522:	4956      	ldr	r1, [pc, #344]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003536:	4b51      	ldr	r3, [pc, #324]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003544:	494d      	ldr	r1, [pc, #308]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d028      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003558:	4b48      	ldr	r3, [pc, #288]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	4945      	ldr	r1, [pc, #276]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003576:	d106      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	4b40      	ldr	r3, [pc, #256]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a3f      	ldr	r2, [pc, #252]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800357e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003582:	60d3      	str	r3, [r2, #12]
 8003584:	e011      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800358e:	d10c      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f882 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d028      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035b6:	4b31      	ldr	r3, [pc, #196]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	492d      	ldr	r1, [pc, #180]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035d4:	d106      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d6:	4b29      	ldr	r3, [pc, #164]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4a28      	ldr	r2, [pc, #160]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035e0:	60d3      	str	r3, [r2, #12]
 80035e2:	e011      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f853 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01c      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003614:	4b19      	ldr	r3, [pc, #100]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003622:	4916      	ldr	r1, [pc, #88]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003632:	d10c      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	2102      	movs	r1, #2
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f830 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800365a:	4b08      	ldr	r3, [pc, #32]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003668:	4904      	ldr	r1, [pc, #16]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003670:	7cbb      	ldrb	r3, [r7, #18]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000

08003680 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003684:	4b05      	ldr	r3, [pc, #20]	@ (800369c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a04      	ldr	r2, [pc, #16]	@ (800369c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800368a:	f043 0304 	orr.w	r3, r3, #4
 800368e:	6013      	str	r3, [r2, #0]
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000

080036a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ae:	4b74      	ldr	r3, [pc, #464]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d018      	beq.n	80036ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036ba:	4b71      	ldr	r3, [pc, #452]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0203 	and.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d10d      	bne.n	80036e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
       ||
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036d2:	4b6b      	ldr	r3, [pc, #428]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
       ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d047      	beq.n	8003776 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
 80036ea:	e044      	b.n	8003776 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d018      	beq.n	8003726 <RCCEx_PLLSAI1_Config+0x86>
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d825      	bhi.n	8003744 <RCCEx_PLLSAI1_Config+0xa4>
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d002      	beq.n	8003702 <RCCEx_PLLSAI1_Config+0x62>
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d009      	beq.n	8003714 <RCCEx_PLLSAI1_Config+0x74>
 8003700:	e020      	b.n	8003744 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003702:	4b5f      	ldr	r3, [pc, #380]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d11d      	bne.n	800374a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003712:	e01a      	b.n	800374a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003714:	4b5a      	ldr	r3, [pc, #360]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d116      	bne.n	800374e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003724:	e013      	b.n	800374e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003726:	4b56      	ldr	r3, [pc, #344]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10f      	bne.n	8003752 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003732:	4b53      	ldr	r3, [pc, #332]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003742:	e006      	b.n	8003752 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      break;
 8003748:	e004      	b.n	8003754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374a:	bf00      	nop
 800374c:	e002      	b.n	8003754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374e:	bf00      	nop
 8003750:	e000      	b.n	8003754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003752:	bf00      	nop
    }

    if(status == HAL_OK)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10d      	bne.n	8003776 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800375a:	4b49      	ldr	r3, [pc, #292]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6819      	ldr	r1, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	3b01      	subs	r3, #1
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	430b      	orrs	r3, r1
 8003770:	4943      	ldr	r1, [pc, #268]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003772:	4313      	orrs	r3, r2
 8003774:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d17c      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800377c:	4b40      	ldr	r3, [pc, #256]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a3f      	ldr	r2, [pc, #252]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003782:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003788:	f7fe fbba 	bl	8001f00 <HAL_GetTick>
 800378c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800378e:	e009      	b.n	80037a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003790:	f7fe fbb6 	bl	8001f00 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d902      	bls.n	80037a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	73fb      	strb	r3, [r7, #15]
        break;
 80037a2:	e005      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a4:	4b36      	ldr	r3, [pc, #216]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ef      	bne.n	8003790 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d15f      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d110      	bne.n	80037de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037bc:	4b30      	ldr	r3, [pc, #192]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80037c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6892      	ldr	r2, [r2, #8]
 80037cc:	0211      	lsls	r1, r2, #8
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68d2      	ldr	r2, [r2, #12]
 80037d2:	06d2      	lsls	r2, r2, #27
 80037d4:	430a      	orrs	r2, r1
 80037d6:	492a      	ldr	r1, [pc, #168]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	610b      	str	r3, [r1, #16]
 80037dc:	e027      	b.n	800382e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d112      	bne.n	800380a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e4:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80037ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6892      	ldr	r2, [r2, #8]
 80037f4:	0211      	lsls	r1, r2, #8
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6912      	ldr	r2, [r2, #16]
 80037fa:	0852      	lsrs	r2, r2, #1
 80037fc:	3a01      	subs	r2, #1
 80037fe:	0552      	lsls	r2, r2, #21
 8003800:	430a      	orrs	r2, r1
 8003802:	491f      	ldr	r1, [pc, #124]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003804:	4313      	orrs	r3, r2
 8003806:	610b      	str	r3, [r1, #16]
 8003808:	e011      	b.n	800382e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800380a:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003812:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6892      	ldr	r2, [r2, #8]
 800381a:	0211      	lsls	r1, r2, #8
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6952      	ldr	r2, [r2, #20]
 8003820:	0852      	lsrs	r2, r2, #1
 8003822:	3a01      	subs	r2, #1
 8003824:	0652      	lsls	r2, r2, #25
 8003826:	430a      	orrs	r2, r1
 8003828:	4915      	ldr	r1, [pc, #84]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 800382a:	4313      	orrs	r3, r2
 800382c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800382e:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a13      	ldr	r2, [pc, #76]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003834:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003838:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fe fb61 	bl	8001f00 <HAL_GetTick>
 800383e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003840:	e009      	b.n	8003856 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003842:	f7fe fb5d 	bl	8001f00 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d902      	bls.n	8003856 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	73fb      	strb	r3, [r7, #15]
          break;
 8003854:	e005      	b.n	8003862 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003856:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0ef      	beq.n	8003842 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d106      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003868:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	4903      	ldr	r1, [pc, #12]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003872:	4313      	orrs	r3, r2
 8003874:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40021000 	.word	0x40021000

08003884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e049      	b.n	800392a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fe f824 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f000 fd34 	bl	8004330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e033      	b.n	80039b4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a19      	ldr	r2, [pc, #100]	@ (80039c0 <HAL_TIM_Base_Start+0x8c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d009      	beq.n	8003972 <HAL_TIM_Base_Start+0x3e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003966:	d004      	beq.n	8003972 <HAL_TIM_Base_Start+0x3e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a15      	ldr	r2, [pc, #84]	@ (80039c4 <HAL_TIM_Base_Start+0x90>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d115      	bne.n	800399e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	4b13      	ldr	r3, [pc, #76]	@ (80039c8 <HAL_TIM_Base_Start+0x94>)
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b06      	cmp	r3, #6
 8003982:	d015      	beq.n	80039b0 <HAL_TIM_Base_Start+0x7c>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398a:	d011      	beq.n	80039b0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399c:	e008      	b.n	80039b0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	e000      	b.n	80039b2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40012c00 	.word	0x40012c00
 80039c4:	40014000 	.word	0x40014000
 80039c8:	00010007 	.word	0x00010007

080039cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d001      	beq.n	80039e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e03b      	b.n	8003a5c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a19      	ldr	r2, [pc, #100]	@ (8003a68 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_TIM_Base_Start_IT+0x4e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a0e:	d004      	beq.n	8003a1a <HAL_TIM_Base_Start_IT+0x4e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a15      	ldr	r2, [pc, #84]	@ (8003a6c <HAL_TIM_Base_Start_IT+0xa0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d115      	bne.n	8003a46 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	4b13      	ldr	r3, [pc, #76]	@ (8003a70 <HAL_TIM_Base_Start_IT+0xa4>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d015      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x8c>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a32:	d011      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a44:	e008      	b.n	8003a58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e000      	b.n	8003a5a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	00010007 	.word	0x00010007

08003a74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e049      	b.n	8003b1a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f841 	bl	8003b22 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f000 fc3c 	bl	8004330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_TIM_IC_Start_IT+0x1e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	e023      	b.n	8003b9e <HAL_TIM_IC_Start_IT+0x66>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_IC_Start_IT+0x2e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	e01b      	b.n	8003b9e <HAL_TIM_IC_Start_IT+0x66>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_IC_Start_IT+0x3e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	e013      	b.n	8003b9e <HAL_TIM_IC_Start_IT+0x66>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b0c      	cmp	r3, #12
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_IC_Start_IT+0x4e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	e00b      	b.n	8003b9e <HAL_TIM_IC_Start_IT+0x66>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_IC_Start_IT+0x5e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	e003      	b.n	8003b9e <HAL_TIM_IC_Start_IT+0x66>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d104      	bne.n	8003bb0 <HAL_TIM_IC_Start_IT+0x78>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e013      	b.n	8003bd8 <HAL_TIM_IC_Start_IT+0xa0>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d104      	bne.n	8003bc0 <HAL_TIM_IC_Start_IT+0x88>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e00b      	b.n	8003bd8 <HAL_TIM_IC_Start_IT+0xa0>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d104      	bne.n	8003bd0 <HAL_TIM_IC_Start_IT+0x98>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e003      	b.n	8003bd8 <HAL_TIM_IC_Start_IT+0xa0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bda:	7bbb      	ldrb	r3, [r7, #14]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d102      	bne.n	8003be6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003be0:	7b7b      	ldrb	r3, [r7, #13]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d001      	beq.n	8003bea <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0c9      	b.n	8003d7e <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d104      	bne.n	8003bfa <HAL_TIM_IC_Start_IT+0xc2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bf8:	e023      	b.n	8003c42 <HAL_TIM_IC_Start_IT+0x10a>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_IC_Start_IT+0xd2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c08:	e01b      	b.n	8003c42 <HAL_TIM_IC_Start_IT+0x10a>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_IC_Start_IT+0xe2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c18:	e013      	b.n	8003c42 <HAL_TIM_IC_Start_IT+0x10a>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_IC_Start_IT+0xf2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c28:	e00b      	b.n	8003c42 <HAL_TIM_IC_Start_IT+0x10a>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_IC_Start_IT+0x102>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c38:	e003      	b.n	8003c42 <HAL_TIM_IC_Start_IT+0x10a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_IC_Start_IT+0x11a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c50:	e013      	b.n	8003c7a <HAL_TIM_IC_Start_IT+0x142>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_IC_Start_IT+0x12a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c60:	e00b      	b.n	8003c7a <HAL_TIM_IC_Start_IT+0x142>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_IC_Start_IT+0x13a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c70:	e003      	b.n	8003c7a <HAL_TIM_IC_Start_IT+0x142>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	d841      	bhi.n	8003d04 <HAL_TIM_IC_Start_IT+0x1cc>
 8003c80:	a201      	add	r2, pc, #4	@ (adr r2, 8003c88 <HAL_TIM_IC_Start_IT+0x150>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003cbd 	.word	0x08003cbd
 8003c8c:	08003d05 	.word	0x08003d05
 8003c90:	08003d05 	.word	0x08003d05
 8003c94:	08003d05 	.word	0x08003d05
 8003c98:	08003ccf 	.word	0x08003ccf
 8003c9c:	08003d05 	.word	0x08003d05
 8003ca0:	08003d05 	.word	0x08003d05
 8003ca4:	08003d05 	.word	0x08003d05
 8003ca8:	08003ce1 	.word	0x08003ce1
 8003cac:	08003d05 	.word	0x08003d05
 8003cb0:	08003d05 	.word	0x08003d05
 8003cb4:	08003d05 	.word	0x08003d05
 8003cb8:	08003cf3 	.word	0x08003cf3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0202 	orr.w	r2, r2, #2
 8003cca:	60da      	str	r2, [r3, #12]
      break;
 8003ccc:	e01d      	b.n	8003d0a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0204 	orr.w	r2, r2, #4
 8003cdc:	60da      	str	r2, [r3, #12]
      break;
 8003cde:	e014      	b.n	8003d0a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	60da      	str	r2, [r3, #12]
      break;
 8003cf0:	e00b      	b.n	8003d0a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0210 	orr.w	r2, r2, #16
 8003d00:	60da      	str	r2, [r3, #12]
      break;
 8003d02:	e002      	b.n	8003d0a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      break;
 8003d08:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d135      	bne.n	8003d7c <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2201      	movs	r2, #1
 8003d16:	6839      	ldr	r1, [r7, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fd1f 	bl	800475c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a19      	ldr	r2, [pc, #100]	@ (8003d88 <HAL_TIM_IC_Start_IT+0x250>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d009      	beq.n	8003d3c <HAL_TIM_IC_Start_IT+0x204>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d30:	d004      	beq.n	8003d3c <HAL_TIM_IC_Start_IT+0x204>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a15      	ldr	r2, [pc, #84]	@ (8003d8c <HAL_TIM_IC_Start_IT+0x254>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d115      	bne.n	8003d68 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <HAL_TIM_IC_Start_IT+0x258>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d015      	beq.n	8003d7a <HAL_TIM_IC_Start_IT+0x242>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d54:	d011      	beq.n	8003d7a <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0201 	orr.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d66:	e008      	b.n	8003d7a <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e000      	b.n	8003d7c <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	00010007 	.word	0x00010007

08003d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d020      	beq.n	8003df8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01b      	beq.n	8003df8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0202 	mvn.w	r2, #2
 8003dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd fc70 	bl	80016c4 <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fa84 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fa8b 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d020      	beq.n	8003e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01b      	beq.n	8003e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0204 	mvn.w	r2, #4
 8003e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fd fc4a 	bl	80016c4 <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa5e 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fa65 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d020      	beq.n	8003e90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01b      	beq.n	8003e90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0208 	mvn.w	r2, #8
 8003e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2204      	movs	r2, #4
 8003e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fd fc24 	bl	80016c4 <HAL_TIM_IC_CaptureCallback>
 8003e7c:	e005      	b.n	8003e8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fa38 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fa3f 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d020      	beq.n	8003edc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01b      	beq.n	8003edc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0210 	mvn.w	r2, #16
 8003eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd fbfe 	bl	80016c4 <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa12 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fa19 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00c      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0201 	mvn.w	r2, #1
 8003ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fd fc70 	bl	80017e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d104      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00c      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fcad 	bl	8004888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00c      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fca5 	bl	800489c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00c      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f9d3 	bl	800431c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00c      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0220 	mvn.w	r2, #32
 8003f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fc6d 	bl	8004874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e088      	b.n	80040d2 <HAL_TIM_IC_ConfigChannel+0x130>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d11b      	bne.n	8004006 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003fde:	f000 fa17 	bl	8004410 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699a      	ldr	r2, [r3, #24]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 020c 	bic.w	r2, r2, #12
 8003ff0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6999      	ldr	r1, [r3, #24]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	619a      	str	r2, [r3, #24]
 8004004:	e060      	b.n	80040c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d11c      	bne.n	8004046 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800401c:	f000 fa7d 	bl	800451a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800402e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6999      	ldr	r1, [r3, #24]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	021a      	lsls	r2, r3, #8
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	619a      	str	r2, [r3, #24]
 8004044:	e040      	b.n	80040c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800405c:	f000 faca 	bl	80045f4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 020c 	bic.w	r2, r2, #12
 800406e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69d9      	ldr	r1, [r3, #28]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	61da      	str	r2, [r3, #28]
 8004082:	e021      	b.n	80040c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d11c      	bne.n	80040c4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800409a:	f000 fae7 	bl	800466c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80040ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69d9      	ldr	r1, [r3, #28]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	021a      	lsls	r2, r3, #8
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	61da      	str	r2, [r3, #28]
 80040c2:	e001      	b.n	80040c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_ConfigClockSource+0x1c>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e0b6      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x18a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004114:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004118:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004120:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004132:	d03e      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0xd8>
 8004134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004138:	f200 8087 	bhi.w	800424a <HAL_TIM_ConfigClockSource+0x170>
 800413c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004140:	f000 8086 	beq.w	8004250 <HAL_TIM_ConfigClockSource+0x176>
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004148:	d87f      	bhi.n	800424a <HAL_TIM_ConfigClockSource+0x170>
 800414a:	2b70      	cmp	r3, #112	@ 0x70
 800414c:	d01a      	beq.n	8004184 <HAL_TIM_ConfigClockSource+0xaa>
 800414e:	2b70      	cmp	r3, #112	@ 0x70
 8004150:	d87b      	bhi.n	800424a <HAL_TIM_ConfigClockSource+0x170>
 8004152:	2b60      	cmp	r3, #96	@ 0x60
 8004154:	d050      	beq.n	80041f8 <HAL_TIM_ConfigClockSource+0x11e>
 8004156:	2b60      	cmp	r3, #96	@ 0x60
 8004158:	d877      	bhi.n	800424a <HAL_TIM_ConfigClockSource+0x170>
 800415a:	2b50      	cmp	r3, #80	@ 0x50
 800415c:	d03c      	beq.n	80041d8 <HAL_TIM_ConfigClockSource+0xfe>
 800415e:	2b50      	cmp	r3, #80	@ 0x50
 8004160:	d873      	bhi.n	800424a <HAL_TIM_ConfigClockSource+0x170>
 8004162:	2b40      	cmp	r3, #64	@ 0x40
 8004164:	d058      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0x13e>
 8004166:	2b40      	cmp	r3, #64	@ 0x40
 8004168:	d86f      	bhi.n	800424a <HAL_TIM_ConfigClockSource+0x170>
 800416a:	2b30      	cmp	r3, #48	@ 0x30
 800416c:	d064      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0x15e>
 800416e:	2b30      	cmp	r3, #48	@ 0x30
 8004170:	d86b      	bhi.n	800424a <HAL_TIM_ConfigClockSource+0x170>
 8004172:	2b20      	cmp	r3, #32
 8004174:	d060      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0x15e>
 8004176:	2b20      	cmp	r3, #32
 8004178:	d867      	bhi.n	800424a <HAL_TIM_ConfigClockSource+0x170>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d05c      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0x15e>
 800417e:	2b10      	cmp	r3, #16
 8004180:	d05a      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0x15e>
 8004182:	e062      	b.n	800424a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004194:	f000 fac2 	bl	800471c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]
      break;
 80041b0:	e04f      	b.n	8004252 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041c2:	f000 faab 	bl	800471c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041d4:	609a      	str	r2, [r3, #8]
      break;
 80041d6:	e03c      	b.n	8004252 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e4:	461a      	mov	r2, r3
 80041e6:	f000 f969 	bl	80044bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2150      	movs	r1, #80	@ 0x50
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fa78 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 80041f6:	e02c      	b.n	8004252 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004204:	461a      	mov	r2, r3
 8004206:	f000 f9c5 	bl	8004594 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2160      	movs	r1, #96	@ 0x60
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fa68 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 8004216:	e01c      	b.n	8004252 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004224:	461a      	mov	r2, r3
 8004226:	f000 f949 	bl	80044bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2140      	movs	r1, #64	@ 0x40
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fa58 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 8004236:	e00c      	b.n	8004252 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4619      	mov	r1, r3
 8004242:	4610      	mov	r0, r2
 8004244:	f000 fa4f 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 8004248:	e003      	b.n	8004252 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
      break;
 800424e:	e000      	b.n	8004252 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004250:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004262:	7bfb      	ldrb	r3, [r7, #15]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d831      	bhi.n	80042e4 <HAL_TIM_ReadCapturedValue+0x78>
 8004280:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080042e5 	.word	0x080042e5
 8004290:	080042e5 	.word	0x080042e5
 8004294:	080042e5 	.word	0x080042e5
 8004298:	080042c7 	.word	0x080042c7
 800429c:	080042e5 	.word	0x080042e5
 80042a0:	080042e5 	.word	0x080042e5
 80042a4:	080042e5 	.word	0x080042e5
 80042a8:	080042d1 	.word	0x080042d1
 80042ac:	080042e5 	.word	0x080042e5
 80042b0:	080042e5 	.word	0x080042e5
 80042b4:	080042e5 	.word	0x080042e5
 80042b8:	080042db 	.word	0x080042db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c2:	60fb      	str	r3, [r7, #12]

      break;
 80042c4:	e00f      	b.n	80042e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042cc:	60fb      	str	r3, [r7, #12]

      break;
 80042ce:	e00a      	b.n	80042e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d6:	60fb      	str	r3, [r7, #12]

      break;
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	60fb      	str	r3, [r7, #12]

      break;
 80042e2:	e000      	b.n	80042e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80042e4:	bf00      	nop
  }

  return tmpreg;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a30      	ldr	r2, [pc, #192]	@ (8004404 <TIM_Base_SetConfig+0xd4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_Base_SetConfig+0x20>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434e:	d108      	bne.n	8004362 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a27      	ldr	r2, [pc, #156]	@ (8004404 <TIM_Base_SetConfig+0xd4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00b      	beq.n	8004382 <TIM_Base_SetConfig+0x52>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004370:	d007      	beq.n	8004382 <TIM_Base_SetConfig+0x52>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a24      	ldr	r2, [pc, #144]	@ (8004408 <TIM_Base_SetConfig+0xd8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d003      	beq.n	8004382 <TIM_Base_SetConfig+0x52>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a23      	ldr	r2, [pc, #140]	@ (800440c <TIM_Base_SetConfig+0xdc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d108      	bne.n	8004394 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a12      	ldr	r2, [pc, #72]	@ (8004404 <TIM_Base_SetConfig+0xd4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d007      	beq.n	80043d0 <TIM_Base_SetConfig+0xa0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a11      	ldr	r2, [pc, #68]	@ (8004408 <TIM_Base_SetConfig+0xd8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_Base_SetConfig+0xa0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a10      	ldr	r2, [pc, #64]	@ (800440c <TIM_Base_SetConfig+0xdc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d103      	bne.n	80043d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d105      	bne.n	80043f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f023 0201 	bic.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	611a      	str	r2, [r3, #16]
  }
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40012c00 	.word	0x40012c00
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400

08004410 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f023 0201 	bic.w	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a1e      	ldr	r2, [pc, #120]	@ (80044b4 <TIM_TI1_SetConfig+0xa4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <TIM_TI1_SetConfig+0x3e>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004444:	d003      	beq.n	800444e <TIM_TI1_SetConfig+0x3e>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a1b      	ldr	r2, [pc, #108]	@ (80044b8 <TIM_TI1_SetConfig+0xa8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d101      	bne.n	8004452 <TIM_TI1_SetConfig+0x42>
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <TIM_TI1_SetConfig+0x44>
 8004452:	2300      	movs	r3, #0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0303 	bic.w	r3, r3, #3
 800445e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	e003      	b.n	8004472 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	b2db      	uxtb	r3, r3
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f023 030a 	bic.w	r3, r3, #10
 800448c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f003 030a 	and.w	r3, r3, #10
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40014000 	.word	0x40014000

080044bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f023 0201 	bic.w	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f023 030a 	bic.w	r3, r3, #10
 80044f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800451a:	b480      	push	{r7}
 800451c:	b087      	sub	sp, #28
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f023 0210 	bic.w	r2, r3, #16
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004558:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	031b      	lsls	r3, r3, #12
 800455e:	b29b      	uxth	r3, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800456c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	621a      	str	r2, [r3, #32]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f023 0210 	bic.w	r2, r3, #16
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	031b      	lsls	r3, r3, #12
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	621a      	str	r2, [r3, #32]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f023 0303 	bic.w	r3, r3, #3
 8004620:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004630:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	b2db      	uxtb	r3, r3
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004644:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	621a      	str	r2, [r3, #32]
}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004698:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	031b      	lsls	r3, r3, #12
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80046be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	031b      	lsls	r3, r3, #12
 80046c4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	f043 0307 	orr.w	r3, r3, #7
 8004708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	609a      	str	r2, [r3, #8]
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004736:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	021a      	lsls	r2, r3, #8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	431a      	orrs	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4313      	orrs	r3, r2
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	609a      	str	r2, [r3, #8]
}
 8004750:	bf00      	nop
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	2201      	movs	r2, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a1a      	ldr	r2, [r3, #32]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	43db      	mvns	r3, r3
 800477e:	401a      	ands	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1a      	ldr	r2, [r3, #32]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	fa01 f303 	lsl.w	r3, r1, r3
 8004794:	431a      	orrs	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047bc:	2302      	movs	r3, #2
 80047be:	e04f      	b.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a21      	ldr	r2, [pc, #132]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d108      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80047f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a14      	ldr	r2, [pc, #80]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004828:	d004      	beq.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a10      	ldr	r2, [pc, #64]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d10c      	bne.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800483a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	4313      	orrs	r3, r2
 8004844:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40012c00 	.word	0x40012c00
 8004870:	40014000 	.word	0x40014000

08004874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e040      	b.n	8004944 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fd f894 	bl	8001a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	@ 0x24
 80048dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0201 	bic.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fe50 	bl	800559c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fc21 	bl	8005144 <UART_SetConfig>
 8004902:	4603      	mov	r3, r0
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e01b      	b.n	8004944 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800491a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800492a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fecf 	bl	80056e0 <UART_CheckIdleState>
 8004942:	4603      	mov	r3, r0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	@ 0x28
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004960:	2b20      	cmp	r3, #32
 8004962:	d177      	bne.n	8004a54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_UART_Transmit+0x24>
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e070      	b.n	8004a56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2221      	movs	r2, #33	@ 0x21
 8004980:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004982:	f7fd fabd 	bl	8001f00 <HAL_GetTick>
 8004986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a0:	d108      	bne.n	80049b4 <HAL_UART_Transmit+0x68>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	e003      	b.n	80049bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049bc:	e02f      	b.n	8004a1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2180      	movs	r1, #128	@ 0x80
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 ff31 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e03b      	b.n	8004a56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	881a      	ldrh	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f0:	b292      	uxth	r2, r2
 80049f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	3302      	adds	r3, #2
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e007      	b.n	8004a0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1c9      	bne.n	80049be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2200      	movs	r2, #0
 8004a32:	2140      	movs	r1, #64	@ 0x40
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fefb 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d004      	beq.n	8004a4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e005      	b.n	8004a56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e000      	b.n	8004a56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
  }
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	@ 0x28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d137      	bne.n	8004ae8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_UART_Receive_IT+0x24>
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e030      	b.n	8004aea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a18      	ldr	r2, [pc, #96]	@ (8004af4 <HAL_UART_Receive_IT+0x94>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d01f      	beq.n	8004ad8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d018      	beq.n	8004ad8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	623b      	str	r3, [r7, #32]
 8004ac6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	69f9      	ldr	r1, [r7, #28]
 8004aca:	6a3a      	ldr	r2, [r7, #32]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e6      	bne.n	8004aa6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	461a      	mov	r2, r3
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 ff14 	bl	800590c <UART_Start_Receive_IT>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	e000      	b.n	8004aea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ae8:	2302      	movs	r3, #2
  }
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3728      	adds	r7, #40	@ 0x28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40008000 	.word	0x40008000

08004af8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b0ba      	sub	sp, #232	@ 0xe8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004b22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004b26:	4013      	ands	r3, r2
 8004b28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004b2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d115      	bne.n	8004b60 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00f      	beq.n	8004b60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d009      	beq.n	8004b60 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 82ca 	beq.w	80050ea <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4798      	blx	r3
      }
      return;
 8004b5e:	e2c4      	b.n	80050ea <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8117 	beq.w	8004d98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004b7a:	4b85      	ldr	r3, [pc, #532]	@ (8004d90 <HAL_UART_IRQHandler+0x298>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 810a 	beq.w	8004d98 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d011      	beq.n	8004bb4 <HAL_UART_IRQHandler+0xbc>
 8004b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00b      	beq.n	8004bb4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004baa:	f043 0201 	orr.w	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d011      	beq.n	8004be4 <HAL_UART_IRQHandler+0xec>
 8004bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00b      	beq.n	8004be4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bda:	f043 0204 	orr.w	r2, r3, #4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d011      	beq.n	8004c14 <HAL_UART_IRQHandler+0x11c>
 8004bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2204      	movs	r2, #4
 8004c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c0a:	f043 0202 	orr.w	r2, r3, #2
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d017      	beq.n	8004c50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00b      	beq.n	8004c50 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c46:	f043 0208 	orr.w	r2, r3, #8
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d012      	beq.n	8004c82 <HAL_UART_IRQHandler+0x18a>
 8004c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00c      	beq.n	8004c82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c78:	f043 0220 	orr.w	r2, r3, #32
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8230 	beq.w	80050ee <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00d      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cca:	2b40      	cmp	r3, #64	@ 0x40
 8004ccc:	d005      	beq.n	8004cda <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d04f      	beq.n	8004d7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fedc 	bl	8005a98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cea:	2b40      	cmp	r3, #64	@ 0x40
 8004cec:	d141      	bne.n	8004d72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1d9      	bne.n	8004cee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d013      	beq.n	8004d6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d46:	4a13      	ldr	r2, [pc, #76]	@ (8004d94 <HAL_UART_IRQHandler+0x29c>)
 8004d48:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fd fa31 	bl	80021b6 <HAL_DMA_Abort_IT>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d017      	beq.n	8004d8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d64:	4610      	mov	r0, r2
 8004d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d68:	e00f      	b.n	8004d8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f9d4 	bl	8005118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	e00b      	b.n	8004d8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f9d0 	bl	8005118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d78:	e007      	b.n	8004d8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f9cc 	bl	8005118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004d88:	e1b1      	b.n	80050ee <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8a:	bf00      	nop
    return;
 8004d8c:	e1af      	b.n	80050ee <HAL_UART_IRQHandler+0x5f6>
 8004d8e:	bf00      	nop
 8004d90:	04000120 	.word	0x04000120
 8004d94:	08005b61 	.word	0x08005b61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	f040 816a 	bne.w	8005076 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8163 	beq.w	8005076 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 815c 	beq.w	8005076 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2210      	movs	r2, #16
 8004dc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd0:	2b40      	cmp	r3, #64	@ 0x40
 8004dd2:	f040 80d4 	bne.w	8004f7e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004de2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80ad 	beq.w	8004f46 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004df6:	429a      	cmp	r2, r3
 8004df8:	f080 80a5 	bcs.w	8004f46 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f040 8086 	bne.w	8004f24 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1da      	bne.n	8004e18 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3308      	adds	r3, #8
 8004e82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e1      	bne.n	8004e62 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ec2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ec8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e3      	bne.n	8004e9e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef4:	f023 0310 	bic.w	r3, r3, #16
 8004ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e4      	bne.n	8004ee4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fd f90b 	bl	800213a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f8f4 	bl	800512c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004f44:	e0d5      	b.n	80050f2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f50:	429a      	cmp	r2, r3
 8004f52:	f040 80ce 	bne.w	80050f2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	f040 80c5 	bne.w	80050f2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f8d8 	bl	800512c <HAL_UARTEx_RxEventCallback>
      return;
 8004f7c:	e0b9      	b.n	80050f2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80ab 	beq.w	80050f6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80a6 	beq.w	80050f6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e4      	bne.n	8004faa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3308      	adds	r3, #8
 8005000:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005004:	633a      	str	r2, [r7, #48]	@ 0x30
 8005006:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800500a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e3      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	60fb      	str	r3, [r7, #12]
   return(result);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f023 0310 	bic.w	r3, r3, #16
 8005040:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	69b9      	ldr	r1, [r7, #24]
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	617b      	str	r3, [r7, #20]
   return(result);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e4      	bne.n	800502c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2202      	movs	r2, #2
 8005066:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f85c 	bl	800512c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005074:	e03f      	b.n	80050f6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00e      	beq.n	80050a0 <HAL_UART_IRQHandler+0x5a8>
 8005082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005096:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 ff5d 	bl	8005f58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800509e:	e02d      	b.n	80050fc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00e      	beq.n	80050ca <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01c      	beq.n	80050fa <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	4798      	blx	r3
    }
    return;
 80050c8:	e017      	b.n	80050fa <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d012      	beq.n	80050fc <HAL_UART_IRQHandler+0x604>
 80050d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00c      	beq.n	80050fc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fd52 	bl	8005b8c <UART_EndTransmit_IT>
    return;
 80050e8:	e008      	b.n	80050fc <HAL_UART_IRQHandler+0x604>
      return;
 80050ea:	bf00      	nop
 80050ec:	e006      	b.n	80050fc <HAL_UART_IRQHandler+0x604>
    return;
 80050ee:	bf00      	nop
 80050f0:	e004      	b.n	80050fc <HAL_UART_IRQHandler+0x604>
      return;
 80050f2:	bf00      	nop
 80050f4:	e002      	b.n	80050fc <HAL_UART_IRQHandler+0x604>
      return;
 80050f6:	bf00      	nop
 80050f8:	e000      	b.n	80050fc <HAL_UART_IRQHandler+0x604>
    return;
 80050fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80050fc:	37e8      	adds	r7, #232	@ 0xe8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop

08005104 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005148:	b08a      	sub	sp, #40	@ 0x28
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	431a      	orrs	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	431a      	orrs	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	4313      	orrs	r3, r2
 800516a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4bb4      	ldr	r3, [pc, #720]	@ (8005444 <UART_SetConfig+0x300>)
 8005174:	4013      	ands	r3, r2
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800517c:	430b      	orrs	r3, r1
 800517e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4aa9      	ldr	r2, [pc, #676]	@ (8005448 <UART_SetConfig+0x304>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ac:	4313      	orrs	r3, r2
 80051ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c0:	430a      	orrs	r2, r1
 80051c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4aa0      	ldr	r2, [pc, #640]	@ (800544c <UART_SetConfig+0x308>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d126      	bne.n	800521c <UART_SetConfig+0xd8>
 80051ce:	4ba0      	ldr	r3, [pc, #640]	@ (8005450 <UART_SetConfig+0x30c>)
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d81b      	bhi.n	8005214 <UART_SetConfig+0xd0>
 80051dc:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <UART_SetConfig+0xa0>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	08005205 	.word	0x08005205
 80051ec:	080051fd 	.word	0x080051fd
 80051f0:	0800520d 	.word	0x0800520d
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051fa:	e080      	b.n	80052fe <UART_SetConfig+0x1ba>
 80051fc:	2302      	movs	r3, #2
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005202:	e07c      	b.n	80052fe <UART_SetConfig+0x1ba>
 8005204:	2304      	movs	r3, #4
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800520a:	e078      	b.n	80052fe <UART_SetConfig+0x1ba>
 800520c:	2308      	movs	r3, #8
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005212:	e074      	b.n	80052fe <UART_SetConfig+0x1ba>
 8005214:	2310      	movs	r3, #16
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800521a:	e070      	b.n	80052fe <UART_SetConfig+0x1ba>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a8c      	ldr	r2, [pc, #560]	@ (8005454 <UART_SetConfig+0x310>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d138      	bne.n	8005298 <UART_SetConfig+0x154>
 8005226:	4b8a      	ldr	r3, [pc, #552]	@ (8005450 <UART_SetConfig+0x30c>)
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522c:	f003 030c 	and.w	r3, r3, #12
 8005230:	2b0c      	cmp	r3, #12
 8005232:	d82d      	bhi.n	8005290 <UART_SetConfig+0x14c>
 8005234:	a201      	add	r2, pc, #4	@ (adr r2, 800523c <UART_SetConfig+0xf8>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005271 	.word	0x08005271
 8005240:	08005291 	.word	0x08005291
 8005244:	08005291 	.word	0x08005291
 8005248:	08005291 	.word	0x08005291
 800524c:	08005281 	.word	0x08005281
 8005250:	08005291 	.word	0x08005291
 8005254:	08005291 	.word	0x08005291
 8005258:	08005291 	.word	0x08005291
 800525c:	08005279 	.word	0x08005279
 8005260:	08005291 	.word	0x08005291
 8005264:	08005291 	.word	0x08005291
 8005268:	08005291 	.word	0x08005291
 800526c:	08005289 	.word	0x08005289
 8005270:	2300      	movs	r3, #0
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005276:	e042      	b.n	80052fe <UART_SetConfig+0x1ba>
 8005278:	2302      	movs	r3, #2
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800527e:	e03e      	b.n	80052fe <UART_SetConfig+0x1ba>
 8005280:	2304      	movs	r3, #4
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005286:	e03a      	b.n	80052fe <UART_SetConfig+0x1ba>
 8005288:	2308      	movs	r3, #8
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528e:	e036      	b.n	80052fe <UART_SetConfig+0x1ba>
 8005290:	2310      	movs	r3, #16
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005296:	e032      	b.n	80052fe <UART_SetConfig+0x1ba>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a6a      	ldr	r2, [pc, #424]	@ (8005448 <UART_SetConfig+0x304>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d12a      	bne.n	80052f8 <UART_SetConfig+0x1b4>
 80052a2:	4b6b      	ldr	r3, [pc, #428]	@ (8005450 <UART_SetConfig+0x30c>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80052ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052b0:	d01a      	beq.n	80052e8 <UART_SetConfig+0x1a4>
 80052b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052b6:	d81b      	bhi.n	80052f0 <UART_SetConfig+0x1ac>
 80052b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052bc:	d00c      	beq.n	80052d8 <UART_SetConfig+0x194>
 80052be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c2:	d815      	bhi.n	80052f0 <UART_SetConfig+0x1ac>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <UART_SetConfig+0x18c>
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052cc:	d008      	beq.n	80052e0 <UART_SetConfig+0x19c>
 80052ce:	e00f      	b.n	80052f0 <UART_SetConfig+0x1ac>
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052d6:	e012      	b.n	80052fe <UART_SetConfig+0x1ba>
 80052d8:	2302      	movs	r3, #2
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052de:	e00e      	b.n	80052fe <UART_SetConfig+0x1ba>
 80052e0:	2304      	movs	r3, #4
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052e6:	e00a      	b.n	80052fe <UART_SetConfig+0x1ba>
 80052e8:	2308      	movs	r3, #8
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ee:	e006      	b.n	80052fe <UART_SetConfig+0x1ba>
 80052f0:	2310      	movs	r3, #16
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f6:	e002      	b.n	80052fe <UART_SetConfig+0x1ba>
 80052f8:	2310      	movs	r3, #16
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a51      	ldr	r2, [pc, #324]	@ (8005448 <UART_SetConfig+0x304>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d17a      	bne.n	80053fe <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005308:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800530c:	2b08      	cmp	r3, #8
 800530e:	d824      	bhi.n	800535a <UART_SetConfig+0x216>
 8005310:	a201      	add	r2, pc, #4	@ (adr r2, 8005318 <UART_SetConfig+0x1d4>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	0800533d 	.word	0x0800533d
 800531c:	0800535b 	.word	0x0800535b
 8005320:	08005345 	.word	0x08005345
 8005324:	0800535b 	.word	0x0800535b
 8005328:	0800534b 	.word	0x0800534b
 800532c:	0800535b 	.word	0x0800535b
 8005330:	0800535b 	.word	0x0800535b
 8005334:	0800535b 	.word	0x0800535b
 8005338:	08005353 	.word	0x08005353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800533c:	f7fd ff1e 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8005340:	61f8      	str	r0, [r7, #28]
        break;
 8005342:	e010      	b.n	8005366 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005344:	4b44      	ldr	r3, [pc, #272]	@ (8005458 <UART_SetConfig+0x314>)
 8005346:	61fb      	str	r3, [r7, #28]
        break;
 8005348:	e00d      	b.n	8005366 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800534a:	f7fd fe7f 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800534e:	61f8      	str	r0, [r7, #28]
        break;
 8005350:	e009      	b.n	8005366 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005356:	61fb      	str	r3, [r7, #28]
        break;
 8005358:	e005      	b.n	8005366 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005364:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8107 	beq.w	800557c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	4413      	add	r3, r2
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	429a      	cmp	r2, r3
 800537c:	d305      	bcc.n	800538a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	429a      	cmp	r2, r3
 8005388:	d903      	bls.n	8005392 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005390:	e0f4      	b.n	800557c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2200      	movs	r2, #0
 8005396:	461c      	mov	r4, r3
 8005398:	4615      	mov	r5, r2
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	022b      	lsls	r3, r5, #8
 80053a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053a8:	0222      	lsls	r2, r4, #8
 80053aa:	68f9      	ldr	r1, [r7, #12]
 80053ac:	6849      	ldr	r1, [r1, #4]
 80053ae:	0849      	lsrs	r1, r1, #1
 80053b0:	2000      	movs	r0, #0
 80053b2:	4688      	mov	r8, r1
 80053b4:	4681      	mov	r9, r0
 80053b6:	eb12 0a08 	adds.w	sl, r2, r8
 80053ba:	eb43 0b09 	adc.w	fp, r3, r9
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053cc:	4650      	mov	r0, sl
 80053ce:	4659      	mov	r1, fp
 80053d0:	f7fb fc3a 	bl	8000c48 <__aeabi_uldivmod>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4613      	mov	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053e2:	d308      	bcc.n	80053f6 <UART_SetConfig+0x2b2>
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ea:	d204      	bcs.n	80053f6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	60da      	str	r2, [r3, #12]
 80053f4:	e0c2      	b.n	800557c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053fc:	e0be      	b.n	800557c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005406:	d16a      	bne.n	80054de <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005408:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800540c:	2b08      	cmp	r3, #8
 800540e:	d834      	bhi.n	800547a <UART_SetConfig+0x336>
 8005410:	a201      	add	r2, pc, #4	@ (adr r2, 8005418 <UART_SetConfig+0x2d4>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	0800543d 	.word	0x0800543d
 800541c:	0800545d 	.word	0x0800545d
 8005420:	08005465 	.word	0x08005465
 8005424:	0800547b 	.word	0x0800547b
 8005428:	0800546b 	.word	0x0800546b
 800542c:	0800547b 	.word	0x0800547b
 8005430:	0800547b 	.word	0x0800547b
 8005434:	0800547b 	.word	0x0800547b
 8005438:	08005473 	.word	0x08005473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800543c:	f7fd fe9e 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8005440:	61f8      	str	r0, [r7, #28]
        break;
 8005442:	e020      	b.n	8005486 <UART_SetConfig+0x342>
 8005444:	efff69f3 	.word	0xefff69f3
 8005448:	40008000 	.word	0x40008000
 800544c:	40013800 	.word	0x40013800
 8005450:	40021000 	.word	0x40021000
 8005454:	40004400 	.word	0x40004400
 8005458:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800545c:	f7fd fea4 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 8005460:	61f8      	str	r0, [r7, #28]
        break;
 8005462:	e010      	b.n	8005486 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005464:	4b4c      	ldr	r3, [pc, #304]	@ (8005598 <UART_SetConfig+0x454>)
 8005466:	61fb      	str	r3, [r7, #28]
        break;
 8005468:	e00d      	b.n	8005486 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800546a:	f7fd fdef 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800546e:	61f8      	str	r0, [r7, #28]
        break;
 8005470:	e009      	b.n	8005486 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005476:	61fb      	str	r3, [r7, #28]
        break;
 8005478:	e005      	b.n	8005486 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d077      	beq.n	800557c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	005a      	lsls	r2, r3, #1
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	085b      	lsrs	r3, r3, #1
 8005496:	441a      	add	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2b0f      	cmp	r3, #15
 80054a6:	d916      	bls.n	80054d6 <UART_SetConfig+0x392>
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ae:	d212      	bcs.n	80054d6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f023 030f 	bic.w	r3, r3, #15
 80054b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	8afb      	ldrh	r3, [r7, #22]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	8afa      	ldrh	r2, [r7, #22]
 80054d2:	60da      	str	r2, [r3, #12]
 80054d4:	e052      	b.n	800557c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80054dc:	e04e      	b.n	800557c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d827      	bhi.n	8005536 <UART_SetConfig+0x3f2>
 80054e6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ec <UART_SetConfig+0x3a8>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005511 	.word	0x08005511
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005521 	.word	0x08005521
 80054f8:	08005537 	.word	0x08005537
 80054fc:	08005527 	.word	0x08005527
 8005500:	08005537 	.word	0x08005537
 8005504:	08005537 	.word	0x08005537
 8005508:	08005537 	.word	0x08005537
 800550c:	0800552f 	.word	0x0800552f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005510:	f7fd fe34 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8005514:	61f8      	str	r0, [r7, #28]
        break;
 8005516:	e014      	b.n	8005542 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005518:	f7fd fe46 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 800551c:	61f8      	str	r0, [r7, #28]
        break;
 800551e:	e010      	b.n	8005542 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005520:	4b1d      	ldr	r3, [pc, #116]	@ (8005598 <UART_SetConfig+0x454>)
 8005522:	61fb      	str	r3, [r7, #28]
        break;
 8005524:	e00d      	b.n	8005542 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005526:	f7fd fd91 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800552a:	61f8      	str	r0, [r7, #28]
        break;
 800552c:	e009      	b.n	8005542 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800552e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005532:	61fb      	str	r3, [r7, #28]
        break;
 8005534:	e005      	b.n	8005542 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005540:	bf00      	nop
    }

    if (pclk != 0U)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d019      	beq.n	800557c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	085a      	lsrs	r2, r3, #1
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	441a      	add	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	fbb2 f3f3 	udiv	r3, r2, r3
 800555a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2b0f      	cmp	r3, #15
 8005560:	d909      	bls.n	8005576 <UART_SetConfig+0x432>
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005568:	d205      	bcs.n	8005576 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60da      	str	r2, [r3, #12]
 8005574:	e002      	b.n	800557c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005588:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800558c:	4618      	mov	r0, r3
 800558e:	3728      	adds	r7, #40	@ 0x28
 8005590:	46bd      	mov	sp, r7
 8005592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005596:	bf00      	nop
 8005598:	00f42400 	.word	0x00f42400

0800559c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	d01a      	beq.n	80056b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800569a:	d10a      	bne.n	80056b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	605a      	str	r2, [r3, #4]
  }
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b098      	sub	sp, #96	@ 0x60
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056f0:	f7fc fc06 	bl	8001f00 <HAL_GetTick>
 80056f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b08      	cmp	r3, #8
 8005702:	d12e      	bne.n	8005762 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005704:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800570c:	2200      	movs	r2, #0
 800570e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f88c 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d021      	beq.n	8005762 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005732:	653b      	str	r3, [r7, #80]	@ 0x50
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800573c:	647b      	str	r3, [r7, #68]	@ 0x44
 800573e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005742:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800574a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e6      	bne.n	800571e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e062      	b.n	8005828 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b04      	cmp	r3, #4
 800576e:	d149      	bne.n	8005804 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005770:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005778:	2200      	movs	r2, #0
 800577a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f856 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d03c      	beq.n	8005804 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	623b      	str	r3, [r7, #32]
   return(result);
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800579e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80057aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e6      	bne.n	800578a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3308      	adds	r3, #8
 80057c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3308      	adds	r3, #8
 80057da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057dc:	61fa      	str	r2, [r7, #28]
 80057de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	69b9      	ldr	r1, [r7, #24]
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	617b      	str	r3, [r7, #20]
   return(result);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e5      	bne.n	80057bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e011      	b.n	8005828 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3758      	adds	r7, #88	@ 0x58
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005840:	e04f      	b.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d04b      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584a:	f7fc fb59 	bl	8001f00 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	429a      	cmp	r2, r3
 8005858:	d302      	bcc.n	8005860 <UART_WaitOnFlagUntilTimeout+0x30>
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e04e      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d037      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b80      	cmp	r3, #128	@ 0x80
 8005876:	d034      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b40      	cmp	r3, #64	@ 0x40
 800587c:	d031      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b08      	cmp	r3, #8
 800588a:	d110      	bne.n	80058ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2208      	movs	r2, #8
 8005892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f8ff 	bl	8005a98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2208      	movs	r2, #8
 800589e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e029      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058bc:	d111      	bne.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f8e5 	bl	8005a98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e00f      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d0a0      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800590c:	b480      	push	{r7}
 800590e:	b097      	sub	sp, #92	@ 0x5c
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	88fa      	ldrh	r2, [r7, #6]
 800592c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800593e:	d10e      	bne.n	800595e <UART_Start_Receive_IT+0x52>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d105      	bne.n	8005954 <UART_Start_Receive_IT+0x48>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800594e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005952:	e02d      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	22ff      	movs	r2, #255	@ 0xff
 8005958:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800595c:	e028      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10d      	bne.n	8005982 <UART_Start_Receive_IT+0x76>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <UART_Start_Receive_IT+0x6c>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	22ff      	movs	r2, #255	@ 0xff
 8005972:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005976:	e01b      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	227f      	movs	r2, #127	@ 0x7f
 800597c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005980:	e016      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800598a:	d10d      	bne.n	80059a8 <UART_Start_Receive_IT+0x9c>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <UART_Start_Receive_IT+0x92>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	227f      	movs	r2, #127	@ 0x7f
 8005998:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800599c:	e008      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	223f      	movs	r2, #63	@ 0x3f
 80059a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059a6:	e003      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2222      	movs	r2, #34	@ 0x22
 80059bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80059e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80059ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e5      	bne.n	80059c0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059fc:	d107      	bne.n	8005a0e <UART_Start_Receive_IT+0x102>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4a21      	ldr	r2, [pc, #132]	@ (8005a90 <UART_Start_Receive_IT+0x184>)
 8005a0a:	669a      	str	r2, [r3, #104]	@ 0x68
 8005a0c:	e002      	b.n	8005a14 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4a20      	ldr	r2, [pc, #128]	@ (8005a94 <UART_Start_Receive_IT+0x188>)
 8005a12:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d019      	beq.n	8005a50 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a3c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e6      	bne.n	8005a1c <UART_Start_Receive_IT+0x110>
 8005a4e:	e018      	b.n	8005a82 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f043 0320 	orr.w	r3, r3, #32
 8005a64:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a6e:	623b      	str	r3, [r7, #32]
 8005a70:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	69f9      	ldr	r1, [r7, #28]
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e6      	bne.n	8005a50 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	375c      	adds	r7, #92	@ 0x5c
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	08005d9d 	.word	0x08005d9d
 8005a94:	08005be1 	.word	0x08005be1

08005a98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b095      	sub	sp, #84	@ 0x54
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005abe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ac4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e6      	bne.n	8005aa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3308      	adds	r3, #8
 8005af0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005af4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005af8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e5      	bne.n	8005ad2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d118      	bne.n	8005b40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f023 0310 	bic.w	r3, r3, #16
 8005b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6979      	ldr	r1, [r7, #20]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	613b      	str	r3, [r7, #16]
   return(result);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e6      	bne.n	8005b0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b54:	bf00      	nop
 8005b56:	3754      	adds	r7, #84	@ 0x54
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff faca 	bl	8005118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	6979      	ldr	r1, [r7, #20]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e6      	bne.n	8005b94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff fa96 	bl	8005104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bd8:	bf00      	nop
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b09c      	sub	sp, #112	@ 0x70
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bf8:	2b22      	cmp	r3, #34	@ 0x22
 8005bfa:	f040 80be 	bne.w	8005d7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005c04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c0c:	b2d9      	uxtb	r1, r3
 8005c0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c18:	400a      	ands	r2, r1
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f040 80a3 	bne.w	8005d8e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c50:	e853 3f00 	ldrex	r3, [r3]
 8005c54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e6      	bne.n	8005c48 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3308      	adds	r3, #8
 8005c98:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005c9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ca0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e5      	bne.n	8005c7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a34      	ldr	r2, [pc, #208]	@ (8005d98 <UART_RxISR_8BIT+0x1b8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d01f      	beq.n	8005d0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d018      	beq.n	8005d0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cee:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e6      	bne.n	8005cda <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d12e      	bne.n	8005d72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0310 	bic.w	r3, r3, #16
 8005d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d38:	61fb      	str	r3, [r7, #28]
 8005d3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	69b9      	ldr	r1, [r7, #24]
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	617b      	str	r3, [r7, #20]
   return(result);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e6      	bne.n	8005d1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d103      	bne.n	8005d62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2210      	movs	r2, #16
 8005d60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff f9de 	bl	800512c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d70:	e00d      	b.n	8005d8e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fb fba4 	bl	80014c0 <HAL_UART_RxCpltCallback>
}
 8005d78:	e009      	b.n	8005d8e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	8b1b      	ldrh	r3, [r3, #24]
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0208 	orr.w	r2, r2, #8
 8005d8a:	b292      	uxth	r2, r2
 8005d8c:	831a      	strh	r2, [r3, #24]
}
 8005d8e:	bf00      	nop
 8005d90:	3770      	adds	r7, #112	@ 0x70
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40008000 	.word	0x40008000

08005d9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b09c      	sub	sp, #112	@ 0x70
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005daa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005db4:	2b22      	cmp	r3, #34	@ 0x22
 8005db6:	f040 80be 	bne.w	8005f36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005dc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005dca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005dce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	1c9a      	adds	r2, r3, #2
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f040 80a3 	bne.w	8005f4a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e18:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e22:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e24:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e2a:	e841 2300 	strex	r3, r2, [r1]
 8005e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1e6      	bne.n	8005e04 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	f023 0301 	bic.w	r3, r3, #1
 8005e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3308      	adds	r3, #8
 8005e54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e56:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e5      	bne.n	8005e36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a34      	ldr	r2, [pc, #208]	@ (8005f54 <UART_RxISR_16BIT+0x1b8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d01f      	beq.n	8005ec8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d018      	beq.n	8005ec8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eb6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e6      	bne.n	8005e96 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d12e      	bne.n	8005f2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f023 0310 	bic.w	r3, r3, #16
 8005eea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6979      	ldr	r1, [r7, #20]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	613b      	str	r3, [r7, #16]
   return(result);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e6      	bne.n	8005ed6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	2b10      	cmp	r3, #16
 8005f14:	d103      	bne.n	8005f1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2210      	movs	r2, #16
 8005f1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff f900 	bl	800512c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f2c:	e00d      	b.n	8005f4a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fb fac6 	bl	80014c0 <HAL_UART_RxCpltCallback>
}
 8005f34:	e009      	b.n	8005f4a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	8b1b      	ldrh	r3, [r3, #24]
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0208 	orr.w	r2, r2, #8
 8005f46:	b292      	uxth	r2, r2
 8005f48:	831a      	strh	r2, [r3, #24]
}
 8005f4a:	bf00      	nop
 8005f4c:	3770      	adds	r7, #112	@ 0x70
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40008000 	.word	0x40008000

08005f58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <__cvt>:
 8005f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	ec57 6b10 	vmov	r6, r7, d0
 8005f74:	2f00      	cmp	r7, #0
 8005f76:	460c      	mov	r4, r1
 8005f78:	4619      	mov	r1, r3
 8005f7a:	463b      	mov	r3, r7
 8005f7c:	bfbb      	ittet	lt
 8005f7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f82:	461f      	movlt	r7, r3
 8005f84:	2300      	movge	r3, #0
 8005f86:	232d      	movlt	r3, #45	@ 0x2d
 8005f88:	700b      	strb	r3, [r1, #0]
 8005f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f90:	4691      	mov	r9, r2
 8005f92:	f023 0820 	bic.w	r8, r3, #32
 8005f96:	bfbc      	itt	lt
 8005f98:	4632      	movlt	r2, r6
 8005f9a:	4616      	movlt	r6, r2
 8005f9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fa0:	d005      	beq.n	8005fae <__cvt+0x42>
 8005fa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fa6:	d100      	bne.n	8005faa <__cvt+0x3e>
 8005fa8:	3401      	adds	r4, #1
 8005faa:	2102      	movs	r1, #2
 8005fac:	e000      	b.n	8005fb0 <__cvt+0x44>
 8005fae:	2103      	movs	r1, #3
 8005fb0:	ab03      	add	r3, sp, #12
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	ab02      	add	r3, sp, #8
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	ec47 6b10 	vmov	d0, r6, r7
 8005fbc:	4653      	mov	r3, sl
 8005fbe:	4622      	mov	r2, r4
 8005fc0:	f000 fe5a 	bl	8006c78 <_dtoa_r>
 8005fc4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005fc8:	4605      	mov	r5, r0
 8005fca:	d119      	bne.n	8006000 <__cvt+0x94>
 8005fcc:	f019 0f01 	tst.w	r9, #1
 8005fd0:	d00e      	beq.n	8005ff0 <__cvt+0x84>
 8005fd2:	eb00 0904 	add.w	r9, r0, r4
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4630      	mov	r0, r6
 8005fdc:	4639      	mov	r1, r7
 8005fde:	f7fa fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fe2:	b108      	cbz	r0, 8005fe8 <__cvt+0x7c>
 8005fe4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fe8:	2230      	movs	r2, #48	@ 0x30
 8005fea:	9b03      	ldr	r3, [sp, #12]
 8005fec:	454b      	cmp	r3, r9
 8005fee:	d31e      	bcc.n	800602e <__cvt+0xc2>
 8005ff0:	9b03      	ldr	r3, [sp, #12]
 8005ff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ff4:	1b5b      	subs	r3, r3, r5
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	b004      	add	sp, #16
 8005ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006004:	eb00 0904 	add.w	r9, r0, r4
 8006008:	d1e5      	bne.n	8005fd6 <__cvt+0x6a>
 800600a:	7803      	ldrb	r3, [r0, #0]
 800600c:	2b30      	cmp	r3, #48	@ 0x30
 800600e:	d10a      	bne.n	8006026 <__cvt+0xba>
 8006010:	2200      	movs	r2, #0
 8006012:	2300      	movs	r3, #0
 8006014:	4630      	mov	r0, r6
 8006016:	4639      	mov	r1, r7
 8006018:	f7fa fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800601c:	b918      	cbnz	r0, 8006026 <__cvt+0xba>
 800601e:	f1c4 0401 	rsb	r4, r4, #1
 8006022:	f8ca 4000 	str.w	r4, [sl]
 8006026:	f8da 3000 	ldr.w	r3, [sl]
 800602a:	4499      	add	r9, r3
 800602c:	e7d3      	b.n	8005fd6 <__cvt+0x6a>
 800602e:	1c59      	adds	r1, r3, #1
 8006030:	9103      	str	r1, [sp, #12]
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	e7d9      	b.n	8005fea <__cvt+0x7e>

08006036 <__exponent>:
 8006036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006038:	2900      	cmp	r1, #0
 800603a:	bfba      	itte	lt
 800603c:	4249      	neglt	r1, r1
 800603e:	232d      	movlt	r3, #45	@ 0x2d
 8006040:	232b      	movge	r3, #43	@ 0x2b
 8006042:	2909      	cmp	r1, #9
 8006044:	7002      	strb	r2, [r0, #0]
 8006046:	7043      	strb	r3, [r0, #1]
 8006048:	dd29      	ble.n	800609e <__exponent+0x68>
 800604a:	f10d 0307 	add.w	r3, sp, #7
 800604e:	461d      	mov	r5, r3
 8006050:	270a      	movs	r7, #10
 8006052:	461a      	mov	r2, r3
 8006054:	fbb1 f6f7 	udiv	r6, r1, r7
 8006058:	fb07 1416 	mls	r4, r7, r6, r1
 800605c:	3430      	adds	r4, #48	@ 0x30
 800605e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006062:	460c      	mov	r4, r1
 8006064:	2c63      	cmp	r4, #99	@ 0x63
 8006066:	f103 33ff 	add.w	r3, r3, #4294967295
 800606a:	4631      	mov	r1, r6
 800606c:	dcf1      	bgt.n	8006052 <__exponent+0x1c>
 800606e:	3130      	adds	r1, #48	@ 0x30
 8006070:	1e94      	subs	r4, r2, #2
 8006072:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006076:	1c41      	adds	r1, r0, #1
 8006078:	4623      	mov	r3, r4
 800607a:	42ab      	cmp	r3, r5
 800607c:	d30a      	bcc.n	8006094 <__exponent+0x5e>
 800607e:	f10d 0309 	add.w	r3, sp, #9
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	42ac      	cmp	r4, r5
 8006086:	bf88      	it	hi
 8006088:	2300      	movhi	r3, #0
 800608a:	3302      	adds	r3, #2
 800608c:	4403      	add	r3, r0
 800608e:	1a18      	subs	r0, r3, r0
 8006090:	b003      	add	sp, #12
 8006092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006094:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006098:	f801 6f01 	strb.w	r6, [r1, #1]!
 800609c:	e7ed      	b.n	800607a <__exponent+0x44>
 800609e:	2330      	movs	r3, #48	@ 0x30
 80060a0:	3130      	adds	r1, #48	@ 0x30
 80060a2:	7083      	strb	r3, [r0, #2]
 80060a4:	70c1      	strb	r1, [r0, #3]
 80060a6:	1d03      	adds	r3, r0, #4
 80060a8:	e7f1      	b.n	800608e <__exponent+0x58>
	...

080060ac <_printf_float>:
 80060ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b0:	b08d      	sub	sp, #52	@ 0x34
 80060b2:	460c      	mov	r4, r1
 80060b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060b8:	4616      	mov	r6, r2
 80060ba:	461f      	mov	r7, r3
 80060bc:	4605      	mov	r5, r0
 80060be:	f000 fcdb 	bl	8006a78 <_localeconv_r>
 80060c2:	6803      	ldr	r3, [r0, #0]
 80060c4:	9304      	str	r3, [sp, #16]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fa f8d2 	bl	8000270 <strlen>
 80060cc:	2300      	movs	r3, #0
 80060ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80060d0:	f8d8 3000 	ldr.w	r3, [r8]
 80060d4:	9005      	str	r0, [sp, #20]
 80060d6:	3307      	adds	r3, #7
 80060d8:	f023 0307 	bic.w	r3, r3, #7
 80060dc:	f103 0208 	add.w	r2, r3, #8
 80060e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060e4:	f8d4 b000 	ldr.w	fp, [r4]
 80060e8:	f8c8 2000 	str.w	r2, [r8]
 80060ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80060f4:	9307      	str	r3, [sp, #28]
 80060f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80060fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80060fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006102:	4b9c      	ldr	r3, [pc, #624]	@ (8006374 <_printf_float+0x2c8>)
 8006104:	f04f 32ff 	mov.w	r2, #4294967295
 8006108:	f7fa fd10 	bl	8000b2c <__aeabi_dcmpun>
 800610c:	bb70      	cbnz	r0, 800616c <_printf_float+0xc0>
 800610e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006112:	4b98      	ldr	r3, [pc, #608]	@ (8006374 <_printf_float+0x2c8>)
 8006114:	f04f 32ff 	mov.w	r2, #4294967295
 8006118:	f7fa fcea 	bl	8000af0 <__aeabi_dcmple>
 800611c:	bb30      	cbnz	r0, 800616c <_printf_float+0xc0>
 800611e:	2200      	movs	r2, #0
 8006120:	2300      	movs	r3, #0
 8006122:	4640      	mov	r0, r8
 8006124:	4649      	mov	r1, r9
 8006126:	f7fa fcd9 	bl	8000adc <__aeabi_dcmplt>
 800612a:	b110      	cbz	r0, 8006132 <_printf_float+0x86>
 800612c:	232d      	movs	r3, #45	@ 0x2d
 800612e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006132:	4a91      	ldr	r2, [pc, #580]	@ (8006378 <_printf_float+0x2cc>)
 8006134:	4b91      	ldr	r3, [pc, #580]	@ (800637c <_printf_float+0x2d0>)
 8006136:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800613a:	bf8c      	ite	hi
 800613c:	4690      	movhi	r8, r2
 800613e:	4698      	movls	r8, r3
 8006140:	2303      	movs	r3, #3
 8006142:	6123      	str	r3, [r4, #16]
 8006144:	f02b 0304 	bic.w	r3, fp, #4
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	f04f 0900 	mov.w	r9, #0
 800614e:	9700      	str	r7, [sp, #0]
 8006150:	4633      	mov	r3, r6
 8006152:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006154:	4621      	mov	r1, r4
 8006156:	4628      	mov	r0, r5
 8006158:	f000 f9d2 	bl	8006500 <_printf_common>
 800615c:	3001      	adds	r0, #1
 800615e:	f040 808d 	bne.w	800627c <_printf_float+0x1d0>
 8006162:	f04f 30ff 	mov.w	r0, #4294967295
 8006166:	b00d      	add	sp, #52	@ 0x34
 8006168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	4640      	mov	r0, r8
 8006172:	4649      	mov	r1, r9
 8006174:	f7fa fcda 	bl	8000b2c <__aeabi_dcmpun>
 8006178:	b140      	cbz	r0, 800618c <_printf_float+0xe0>
 800617a:	464b      	mov	r3, r9
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfbc      	itt	lt
 8006180:	232d      	movlt	r3, #45	@ 0x2d
 8006182:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006186:	4a7e      	ldr	r2, [pc, #504]	@ (8006380 <_printf_float+0x2d4>)
 8006188:	4b7e      	ldr	r3, [pc, #504]	@ (8006384 <_printf_float+0x2d8>)
 800618a:	e7d4      	b.n	8006136 <_printf_float+0x8a>
 800618c:	6863      	ldr	r3, [r4, #4]
 800618e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006192:	9206      	str	r2, [sp, #24]
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	d13b      	bne.n	8006210 <_printf_float+0x164>
 8006198:	2306      	movs	r3, #6
 800619a:	6063      	str	r3, [r4, #4]
 800619c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80061a0:	2300      	movs	r3, #0
 80061a2:	6022      	str	r2, [r4, #0]
 80061a4:	9303      	str	r3, [sp, #12]
 80061a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80061a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061ac:	ab09      	add	r3, sp, #36	@ 0x24
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	6861      	ldr	r1, [r4, #4]
 80061b2:	ec49 8b10 	vmov	d0, r8, r9
 80061b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061ba:	4628      	mov	r0, r5
 80061bc:	f7ff fed6 	bl	8005f6c <__cvt>
 80061c0:	9b06      	ldr	r3, [sp, #24]
 80061c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061c4:	2b47      	cmp	r3, #71	@ 0x47
 80061c6:	4680      	mov	r8, r0
 80061c8:	d129      	bne.n	800621e <_printf_float+0x172>
 80061ca:	1cc8      	adds	r0, r1, #3
 80061cc:	db02      	blt.n	80061d4 <_printf_float+0x128>
 80061ce:	6863      	ldr	r3, [r4, #4]
 80061d0:	4299      	cmp	r1, r3
 80061d2:	dd41      	ble.n	8006258 <_printf_float+0x1ac>
 80061d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80061d8:	fa5f fa8a 	uxtb.w	sl, sl
 80061dc:	3901      	subs	r1, #1
 80061de:	4652      	mov	r2, sl
 80061e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80061e6:	f7ff ff26 	bl	8006036 <__exponent>
 80061ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061ec:	1813      	adds	r3, r2, r0
 80061ee:	2a01      	cmp	r2, #1
 80061f0:	4681      	mov	r9, r0
 80061f2:	6123      	str	r3, [r4, #16]
 80061f4:	dc02      	bgt.n	80061fc <_printf_float+0x150>
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	07d2      	lsls	r2, r2, #31
 80061fa:	d501      	bpl.n	8006200 <_printf_float+0x154>
 80061fc:	3301      	adds	r3, #1
 80061fe:	6123      	str	r3, [r4, #16]
 8006200:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0a2      	beq.n	800614e <_printf_float+0xa2>
 8006208:	232d      	movs	r3, #45	@ 0x2d
 800620a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800620e:	e79e      	b.n	800614e <_printf_float+0xa2>
 8006210:	9a06      	ldr	r2, [sp, #24]
 8006212:	2a47      	cmp	r2, #71	@ 0x47
 8006214:	d1c2      	bne.n	800619c <_printf_float+0xf0>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1c0      	bne.n	800619c <_printf_float+0xf0>
 800621a:	2301      	movs	r3, #1
 800621c:	e7bd      	b.n	800619a <_printf_float+0xee>
 800621e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006222:	d9db      	bls.n	80061dc <_printf_float+0x130>
 8006224:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006228:	d118      	bne.n	800625c <_printf_float+0x1b0>
 800622a:	2900      	cmp	r1, #0
 800622c:	6863      	ldr	r3, [r4, #4]
 800622e:	dd0b      	ble.n	8006248 <_printf_float+0x19c>
 8006230:	6121      	str	r1, [r4, #16]
 8006232:	b913      	cbnz	r3, 800623a <_printf_float+0x18e>
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	07d0      	lsls	r0, r2, #31
 8006238:	d502      	bpl.n	8006240 <_printf_float+0x194>
 800623a:	3301      	adds	r3, #1
 800623c:	440b      	add	r3, r1
 800623e:	6123      	str	r3, [r4, #16]
 8006240:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006242:	f04f 0900 	mov.w	r9, #0
 8006246:	e7db      	b.n	8006200 <_printf_float+0x154>
 8006248:	b913      	cbnz	r3, 8006250 <_printf_float+0x1a4>
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	07d2      	lsls	r2, r2, #31
 800624e:	d501      	bpl.n	8006254 <_printf_float+0x1a8>
 8006250:	3302      	adds	r3, #2
 8006252:	e7f4      	b.n	800623e <_printf_float+0x192>
 8006254:	2301      	movs	r3, #1
 8006256:	e7f2      	b.n	800623e <_printf_float+0x192>
 8006258:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800625c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800625e:	4299      	cmp	r1, r3
 8006260:	db05      	blt.n	800626e <_printf_float+0x1c2>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	6121      	str	r1, [r4, #16]
 8006266:	07d8      	lsls	r0, r3, #31
 8006268:	d5ea      	bpl.n	8006240 <_printf_float+0x194>
 800626a:	1c4b      	adds	r3, r1, #1
 800626c:	e7e7      	b.n	800623e <_printf_float+0x192>
 800626e:	2900      	cmp	r1, #0
 8006270:	bfd4      	ite	le
 8006272:	f1c1 0202 	rsble	r2, r1, #2
 8006276:	2201      	movgt	r2, #1
 8006278:	4413      	add	r3, r2
 800627a:	e7e0      	b.n	800623e <_printf_float+0x192>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	055a      	lsls	r2, r3, #21
 8006280:	d407      	bmi.n	8006292 <_printf_float+0x1e6>
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	4642      	mov	r2, r8
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	d12b      	bne.n	80062e8 <_printf_float+0x23c>
 8006290:	e767      	b.n	8006162 <_printf_float+0xb6>
 8006292:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006296:	f240 80dd 	bls.w	8006454 <_printf_float+0x3a8>
 800629a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800629e:	2200      	movs	r2, #0
 80062a0:	2300      	movs	r3, #0
 80062a2:	f7fa fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d033      	beq.n	8006312 <_printf_float+0x266>
 80062aa:	4a37      	ldr	r2, [pc, #220]	@ (8006388 <_printf_float+0x2dc>)
 80062ac:	2301      	movs	r3, #1
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	f43f af54 	beq.w	8006162 <_printf_float+0xb6>
 80062ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062be:	4543      	cmp	r3, r8
 80062c0:	db02      	blt.n	80062c8 <_printf_float+0x21c>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	07d8      	lsls	r0, r3, #31
 80062c6:	d50f      	bpl.n	80062e8 <_printf_float+0x23c>
 80062c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062cc:	4631      	mov	r1, r6
 80062ce:	4628      	mov	r0, r5
 80062d0:	47b8      	blx	r7
 80062d2:	3001      	adds	r0, #1
 80062d4:	f43f af45 	beq.w	8006162 <_printf_float+0xb6>
 80062d8:	f04f 0900 	mov.w	r9, #0
 80062dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80062e0:	f104 0a1a 	add.w	sl, r4, #26
 80062e4:	45c8      	cmp	r8, r9
 80062e6:	dc09      	bgt.n	80062fc <_printf_float+0x250>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	079b      	lsls	r3, r3, #30
 80062ec:	f100 8103 	bmi.w	80064f6 <_printf_float+0x44a>
 80062f0:	68e0      	ldr	r0, [r4, #12]
 80062f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062f4:	4298      	cmp	r0, r3
 80062f6:	bfb8      	it	lt
 80062f8:	4618      	movlt	r0, r3
 80062fa:	e734      	b.n	8006166 <_printf_float+0xba>
 80062fc:	2301      	movs	r3, #1
 80062fe:	4652      	mov	r2, sl
 8006300:	4631      	mov	r1, r6
 8006302:	4628      	mov	r0, r5
 8006304:	47b8      	blx	r7
 8006306:	3001      	adds	r0, #1
 8006308:	f43f af2b 	beq.w	8006162 <_printf_float+0xb6>
 800630c:	f109 0901 	add.w	r9, r9, #1
 8006310:	e7e8      	b.n	80062e4 <_printf_float+0x238>
 8006312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006314:	2b00      	cmp	r3, #0
 8006316:	dc39      	bgt.n	800638c <_printf_float+0x2e0>
 8006318:	4a1b      	ldr	r2, [pc, #108]	@ (8006388 <_printf_float+0x2dc>)
 800631a:	2301      	movs	r3, #1
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	f43f af1d 	beq.w	8006162 <_printf_float+0xb6>
 8006328:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800632c:	ea59 0303 	orrs.w	r3, r9, r3
 8006330:	d102      	bne.n	8006338 <_printf_float+0x28c>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	07d9      	lsls	r1, r3, #31
 8006336:	d5d7      	bpl.n	80062e8 <_printf_float+0x23c>
 8006338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	f43f af0d 	beq.w	8006162 <_printf_float+0xb6>
 8006348:	f04f 0a00 	mov.w	sl, #0
 800634c:	f104 0b1a 	add.w	fp, r4, #26
 8006350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006352:	425b      	negs	r3, r3
 8006354:	4553      	cmp	r3, sl
 8006356:	dc01      	bgt.n	800635c <_printf_float+0x2b0>
 8006358:	464b      	mov	r3, r9
 800635a:	e793      	b.n	8006284 <_printf_float+0x1d8>
 800635c:	2301      	movs	r3, #1
 800635e:	465a      	mov	r2, fp
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	f43f aefb 	beq.w	8006162 <_printf_float+0xb6>
 800636c:	f10a 0a01 	add.w	sl, sl, #1
 8006370:	e7ee      	b.n	8006350 <_printf_float+0x2a4>
 8006372:	bf00      	nop
 8006374:	7fefffff 	.word	0x7fefffff
 8006378:	08008cc8 	.word	0x08008cc8
 800637c:	08008cc4 	.word	0x08008cc4
 8006380:	08008cd0 	.word	0x08008cd0
 8006384:	08008ccc 	.word	0x08008ccc
 8006388:	08008cd4 	.word	0x08008cd4
 800638c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800638e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006392:	4553      	cmp	r3, sl
 8006394:	bfa8      	it	ge
 8006396:	4653      	movge	r3, sl
 8006398:	2b00      	cmp	r3, #0
 800639a:	4699      	mov	r9, r3
 800639c:	dc36      	bgt.n	800640c <_printf_float+0x360>
 800639e:	f04f 0b00 	mov.w	fp, #0
 80063a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063a6:	f104 021a 	add.w	r2, r4, #26
 80063aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063ac:	9306      	str	r3, [sp, #24]
 80063ae:	eba3 0309 	sub.w	r3, r3, r9
 80063b2:	455b      	cmp	r3, fp
 80063b4:	dc31      	bgt.n	800641a <_printf_float+0x36e>
 80063b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b8:	459a      	cmp	sl, r3
 80063ba:	dc3a      	bgt.n	8006432 <_printf_float+0x386>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	07da      	lsls	r2, r3, #31
 80063c0:	d437      	bmi.n	8006432 <_printf_float+0x386>
 80063c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c4:	ebaa 0903 	sub.w	r9, sl, r3
 80063c8:	9b06      	ldr	r3, [sp, #24]
 80063ca:	ebaa 0303 	sub.w	r3, sl, r3
 80063ce:	4599      	cmp	r9, r3
 80063d0:	bfa8      	it	ge
 80063d2:	4699      	movge	r9, r3
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	dc33      	bgt.n	8006442 <_printf_float+0x396>
 80063da:	f04f 0800 	mov.w	r8, #0
 80063de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063e2:	f104 0b1a 	add.w	fp, r4, #26
 80063e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063e8:	ebaa 0303 	sub.w	r3, sl, r3
 80063ec:	eba3 0309 	sub.w	r3, r3, r9
 80063f0:	4543      	cmp	r3, r8
 80063f2:	f77f af79 	ble.w	80062e8 <_printf_float+0x23c>
 80063f6:	2301      	movs	r3, #1
 80063f8:	465a      	mov	r2, fp
 80063fa:	4631      	mov	r1, r6
 80063fc:	4628      	mov	r0, r5
 80063fe:	47b8      	blx	r7
 8006400:	3001      	adds	r0, #1
 8006402:	f43f aeae 	beq.w	8006162 <_printf_float+0xb6>
 8006406:	f108 0801 	add.w	r8, r8, #1
 800640a:	e7ec      	b.n	80063e6 <_printf_float+0x33a>
 800640c:	4642      	mov	r2, r8
 800640e:	4631      	mov	r1, r6
 8006410:	4628      	mov	r0, r5
 8006412:	47b8      	blx	r7
 8006414:	3001      	adds	r0, #1
 8006416:	d1c2      	bne.n	800639e <_printf_float+0x2f2>
 8006418:	e6a3      	b.n	8006162 <_printf_float+0xb6>
 800641a:	2301      	movs	r3, #1
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	9206      	str	r2, [sp, #24]
 8006422:	47b8      	blx	r7
 8006424:	3001      	adds	r0, #1
 8006426:	f43f ae9c 	beq.w	8006162 <_printf_float+0xb6>
 800642a:	9a06      	ldr	r2, [sp, #24]
 800642c:	f10b 0b01 	add.w	fp, fp, #1
 8006430:	e7bb      	b.n	80063aa <_printf_float+0x2fe>
 8006432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	d1c0      	bne.n	80063c2 <_printf_float+0x316>
 8006440:	e68f      	b.n	8006162 <_printf_float+0xb6>
 8006442:	9a06      	ldr	r2, [sp, #24]
 8006444:	464b      	mov	r3, r9
 8006446:	4442      	add	r2, r8
 8006448:	4631      	mov	r1, r6
 800644a:	4628      	mov	r0, r5
 800644c:	47b8      	blx	r7
 800644e:	3001      	adds	r0, #1
 8006450:	d1c3      	bne.n	80063da <_printf_float+0x32e>
 8006452:	e686      	b.n	8006162 <_printf_float+0xb6>
 8006454:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006458:	f1ba 0f01 	cmp.w	sl, #1
 800645c:	dc01      	bgt.n	8006462 <_printf_float+0x3b6>
 800645e:	07db      	lsls	r3, r3, #31
 8006460:	d536      	bpl.n	80064d0 <_printf_float+0x424>
 8006462:	2301      	movs	r3, #1
 8006464:	4642      	mov	r2, r8
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	f43f ae78 	beq.w	8006162 <_printf_float+0xb6>
 8006472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	47b8      	blx	r7
 800647c:	3001      	adds	r0, #1
 800647e:	f43f ae70 	beq.w	8006162 <_printf_float+0xb6>
 8006482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006486:	2200      	movs	r2, #0
 8006488:	2300      	movs	r3, #0
 800648a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800648e:	f7fa fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006492:	b9c0      	cbnz	r0, 80064c6 <_printf_float+0x41a>
 8006494:	4653      	mov	r3, sl
 8006496:	f108 0201 	add.w	r2, r8, #1
 800649a:	4631      	mov	r1, r6
 800649c:	4628      	mov	r0, r5
 800649e:	47b8      	blx	r7
 80064a0:	3001      	adds	r0, #1
 80064a2:	d10c      	bne.n	80064be <_printf_float+0x412>
 80064a4:	e65d      	b.n	8006162 <_printf_float+0xb6>
 80064a6:	2301      	movs	r3, #1
 80064a8:	465a      	mov	r2, fp
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	f43f ae56 	beq.w	8006162 <_printf_float+0xb6>
 80064b6:	f108 0801 	add.w	r8, r8, #1
 80064ba:	45d0      	cmp	r8, sl
 80064bc:	dbf3      	blt.n	80064a6 <_printf_float+0x3fa>
 80064be:	464b      	mov	r3, r9
 80064c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064c4:	e6df      	b.n	8006286 <_printf_float+0x1da>
 80064c6:	f04f 0800 	mov.w	r8, #0
 80064ca:	f104 0b1a 	add.w	fp, r4, #26
 80064ce:	e7f4      	b.n	80064ba <_printf_float+0x40e>
 80064d0:	2301      	movs	r3, #1
 80064d2:	4642      	mov	r2, r8
 80064d4:	e7e1      	b.n	800649a <_printf_float+0x3ee>
 80064d6:	2301      	movs	r3, #1
 80064d8:	464a      	mov	r2, r9
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f ae3e 	beq.w	8006162 <_printf_float+0xb6>
 80064e6:	f108 0801 	add.w	r8, r8, #1
 80064ea:	68e3      	ldr	r3, [r4, #12]
 80064ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064ee:	1a5b      	subs	r3, r3, r1
 80064f0:	4543      	cmp	r3, r8
 80064f2:	dcf0      	bgt.n	80064d6 <_printf_float+0x42a>
 80064f4:	e6fc      	b.n	80062f0 <_printf_float+0x244>
 80064f6:	f04f 0800 	mov.w	r8, #0
 80064fa:	f104 0919 	add.w	r9, r4, #25
 80064fe:	e7f4      	b.n	80064ea <_printf_float+0x43e>

08006500 <_printf_common>:
 8006500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	4616      	mov	r6, r2
 8006506:	4698      	mov	r8, r3
 8006508:	688a      	ldr	r2, [r1, #8]
 800650a:	690b      	ldr	r3, [r1, #16]
 800650c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006510:	4293      	cmp	r3, r2
 8006512:	bfb8      	it	lt
 8006514:	4613      	movlt	r3, r2
 8006516:	6033      	str	r3, [r6, #0]
 8006518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800651c:	4607      	mov	r7, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b10a      	cbz	r2, 8006526 <_printf_common+0x26>
 8006522:	3301      	adds	r3, #1
 8006524:	6033      	str	r3, [r6, #0]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	0699      	lsls	r1, r3, #26
 800652a:	bf42      	ittt	mi
 800652c:	6833      	ldrmi	r3, [r6, #0]
 800652e:	3302      	addmi	r3, #2
 8006530:	6033      	strmi	r3, [r6, #0]
 8006532:	6825      	ldr	r5, [r4, #0]
 8006534:	f015 0506 	ands.w	r5, r5, #6
 8006538:	d106      	bne.n	8006548 <_printf_common+0x48>
 800653a:	f104 0a19 	add.w	sl, r4, #25
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	6832      	ldr	r2, [r6, #0]
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	42ab      	cmp	r3, r5
 8006546:	dc26      	bgt.n	8006596 <_printf_common+0x96>
 8006548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	3b00      	subs	r3, #0
 8006550:	bf18      	it	ne
 8006552:	2301      	movne	r3, #1
 8006554:	0692      	lsls	r2, r2, #26
 8006556:	d42b      	bmi.n	80065b0 <_printf_common+0xb0>
 8006558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800655c:	4641      	mov	r1, r8
 800655e:	4638      	mov	r0, r7
 8006560:	47c8      	blx	r9
 8006562:	3001      	adds	r0, #1
 8006564:	d01e      	beq.n	80065a4 <_printf_common+0xa4>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	6922      	ldr	r2, [r4, #16]
 800656a:	f003 0306 	and.w	r3, r3, #6
 800656e:	2b04      	cmp	r3, #4
 8006570:	bf02      	ittt	eq
 8006572:	68e5      	ldreq	r5, [r4, #12]
 8006574:	6833      	ldreq	r3, [r6, #0]
 8006576:	1aed      	subeq	r5, r5, r3
 8006578:	68a3      	ldr	r3, [r4, #8]
 800657a:	bf0c      	ite	eq
 800657c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006580:	2500      	movne	r5, #0
 8006582:	4293      	cmp	r3, r2
 8006584:	bfc4      	itt	gt
 8006586:	1a9b      	subgt	r3, r3, r2
 8006588:	18ed      	addgt	r5, r5, r3
 800658a:	2600      	movs	r6, #0
 800658c:	341a      	adds	r4, #26
 800658e:	42b5      	cmp	r5, r6
 8006590:	d11a      	bne.n	80065c8 <_printf_common+0xc8>
 8006592:	2000      	movs	r0, #0
 8006594:	e008      	b.n	80065a8 <_printf_common+0xa8>
 8006596:	2301      	movs	r3, #1
 8006598:	4652      	mov	r2, sl
 800659a:	4641      	mov	r1, r8
 800659c:	4638      	mov	r0, r7
 800659e:	47c8      	blx	r9
 80065a0:	3001      	adds	r0, #1
 80065a2:	d103      	bne.n	80065ac <_printf_common+0xac>
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ac:	3501      	adds	r5, #1
 80065ae:	e7c6      	b.n	800653e <_printf_common+0x3e>
 80065b0:	18e1      	adds	r1, r4, r3
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	2030      	movs	r0, #48	@ 0x30
 80065b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065ba:	4422      	add	r2, r4
 80065bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065c4:	3302      	adds	r3, #2
 80065c6:	e7c7      	b.n	8006558 <_printf_common+0x58>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4622      	mov	r2, r4
 80065cc:	4641      	mov	r1, r8
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c8      	blx	r9
 80065d2:	3001      	adds	r0, #1
 80065d4:	d0e6      	beq.n	80065a4 <_printf_common+0xa4>
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7d9      	b.n	800658e <_printf_common+0x8e>
	...

080065dc <_printf_i>:
 80065dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	7e0f      	ldrb	r7, [r1, #24]
 80065e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065e4:	2f78      	cmp	r7, #120	@ 0x78
 80065e6:	4691      	mov	r9, r2
 80065e8:	4680      	mov	r8, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	469a      	mov	sl, r3
 80065ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065f2:	d807      	bhi.n	8006604 <_printf_i+0x28>
 80065f4:	2f62      	cmp	r7, #98	@ 0x62
 80065f6:	d80a      	bhi.n	800660e <_printf_i+0x32>
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	f000 80d1 	beq.w	80067a0 <_printf_i+0x1c4>
 80065fe:	2f58      	cmp	r7, #88	@ 0x58
 8006600:	f000 80b8 	beq.w	8006774 <_printf_i+0x198>
 8006604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800660c:	e03a      	b.n	8006684 <_printf_i+0xa8>
 800660e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006612:	2b15      	cmp	r3, #21
 8006614:	d8f6      	bhi.n	8006604 <_printf_i+0x28>
 8006616:	a101      	add	r1, pc, #4	@ (adr r1, 800661c <_printf_i+0x40>)
 8006618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800661c:	08006675 	.word	0x08006675
 8006620:	08006689 	.word	0x08006689
 8006624:	08006605 	.word	0x08006605
 8006628:	08006605 	.word	0x08006605
 800662c:	08006605 	.word	0x08006605
 8006630:	08006605 	.word	0x08006605
 8006634:	08006689 	.word	0x08006689
 8006638:	08006605 	.word	0x08006605
 800663c:	08006605 	.word	0x08006605
 8006640:	08006605 	.word	0x08006605
 8006644:	08006605 	.word	0x08006605
 8006648:	08006787 	.word	0x08006787
 800664c:	080066b3 	.word	0x080066b3
 8006650:	08006741 	.word	0x08006741
 8006654:	08006605 	.word	0x08006605
 8006658:	08006605 	.word	0x08006605
 800665c:	080067a9 	.word	0x080067a9
 8006660:	08006605 	.word	0x08006605
 8006664:	080066b3 	.word	0x080066b3
 8006668:	08006605 	.word	0x08006605
 800666c:	08006605 	.word	0x08006605
 8006670:	08006749 	.word	0x08006749
 8006674:	6833      	ldr	r3, [r6, #0]
 8006676:	1d1a      	adds	r2, r3, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6032      	str	r2, [r6, #0]
 800667c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006684:	2301      	movs	r3, #1
 8006686:	e09c      	b.n	80067c2 <_printf_i+0x1e6>
 8006688:	6833      	ldr	r3, [r6, #0]
 800668a:	6820      	ldr	r0, [r4, #0]
 800668c:	1d19      	adds	r1, r3, #4
 800668e:	6031      	str	r1, [r6, #0]
 8006690:	0606      	lsls	r6, r0, #24
 8006692:	d501      	bpl.n	8006698 <_printf_i+0xbc>
 8006694:	681d      	ldr	r5, [r3, #0]
 8006696:	e003      	b.n	80066a0 <_printf_i+0xc4>
 8006698:	0645      	lsls	r5, r0, #25
 800669a:	d5fb      	bpl.n	8006694 <_printf_i+0xb8>
 800669c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	da03      	bge.n	80066ac <_printf_i+0xd0>
 80066a4:	232d      	movs	r3, #45	@ 0x2d
 80066a6:	426d      	negs	r5, r5
 80066a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066ac:	4858      	ldr	r0, [pc, #352]	@ (8006810 <_printf_i+0x234>)
 80066ae:	230a      	movs	r3, #10
 80066b0:	e011      	b.n	80066d6 <_printf_i+0xfa>
 80066b2:	6821      	ldr	r1, [r4, #0]
 80066b4:	6833      	ldr	r3, [r6, #0]
 80066b6:	0608      	lsls	r0, r1, #24
 80066b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80066bc:	d402      	bmi.n	80066c4 <_printf_i+0xe8>
 80066be:	0649      	lsls	r1, r1, #25
 80066c0:	bf48      	it	mi
 80066c2:	b2ad      	uxthmi	r5, r5
 80066c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80066c6:	4852      	ldr	r0, [pc, #328]	@ (8006810 <_printf_i+0x234>)
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	bf14      	ite	ne
 80066cc:	230a      	movne	r3, #10
 80066ce:	2308      	moveq	r3, #8
 80066d0:	2100      	movs	r1, #0
 80066d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066d6:	6866      	ldr	r6, [r4, #4]
 80066d8:	60a6      	str	r6, [r4, #8]
 80066da:	2e00      	cmp	r6, #0
 80066dc:	db05      	blt.n	80066ea <_printf_i+0x10e>
 80066de:	6821      	ldr	r1, [r4, #0]
 80066e0:	432e      	orrs	r6, r5
 80066e2:	f021 0104 	bic.w	r1, r1, #4
 80066e6:	6021      	str	r1, [r4, #0]
 80066e8:	d04b      	beq.n	8006782 <_printf_i+0x1a6>
 80066ea:	4616      	mov	r6, r2
 80066ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80066f0:	fb03 5711 	mls	r7, r3, r1, r5
 80066f4:	5dc7      	ldrb	r7, [r0, r7]
 80066f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066fa:	462f      	mov	r7, r5
 80066fc:	42bb      	cmp	r3, r7
 80066fe:	460d      	mov	r5, r1
 8006700:	d9f4      	bls.n	80066ec <_printf_i+0x110>
 8006702:	2b08      	cmp	r3, #8
 8006704:	d10b      	bne.n	800671e <_printf_i+0x142>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	07df      	lsls	r7, r3, #31
 800670a:	d508      	bpl.n	800671e <_printf_i+0x142>
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	6861      	ldr	r1, [r4, #4]
 8006710:	4299      	cmp	r1, r3
 8006712:	bfde      	ittt	le
 8006714:	2330      	movle	r3, #48	@ 0x30
 8006716:	f806 3c01 	strble.w	r3, [r6, #-1]
 800671a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800671e:	1b92      	subs	r2, r2, r6
 8006720:	6122      	str	r2, [r4, #16]
 8006722:	f8cd a000 	str.w	sl, [sp]
 8006726:	464b      	mov	r3, r9
 8006728:	aa03      	add	r2, sp, #12
 800672a:	4621      	mov	r1, r4
 800672c:	4640      	mov	r0, r8
 800672e:	f7ff fee7 	bl	8006500 <_printf_common>
 8006732:	3001      	adds	r0, #1
 8006734:	d14a      	bne.n	80067cc <_printf_i+0x1f0>
 8006736:	f04f 30ff 	mov.w	r0, #4294967295
 800673a:	b004      	add	sp, #16
 800673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	f043 0320 	orr.w	r3, r3, #32
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	4832      	ldr	r0, [pc, #200]	@ (8006814 <_printf_i+0x238>)
 800674a:	2778      	movs	r7, #120	@ 0x78
 800674c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	6831      	ldr	r1, [r6, #0]
 8006754:	061f      	lsls	r7, r3, #24
 8006756:	f851 5b04 	ldr.w	r5, [r1], #4
 800675a:	d402      	bmi.n	8006762 <_printf_i+0x186>
 800675c:	065f      	lsls	r7, r3, #25
 800675e:	bf48      	it	mi
 8006760:	b2ad      	uxthmi	r5, r5
 8006762:	6031      	str	r1, [r6, #0]
 8006764:	07d9      	lsls	r1, r3, #31
 8006766:	bf44      	itt	mi
 8006768:	f043 0320 	orrmi.w	r3, r3, #32
 800676c:	6023      	strmi	r3, [r4, #0]
 800676e:	b11d      	cbz	r5, 8006778 <_printf_i+0x19c>
 8006770:	2310      	movs	r3, #16
 8006772:	e7ad      	b.n	80066d0 <_printf_i+0xf4>
 8006774:	4826      	ldr	r0, [pc, #152]	@ (8006810 <_printf_i+0x234>)
 8006776:	e7e9      	b.n	800674c <_printf_i+0x170>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	f023 0320 	bic.w	r3, r3, #32
 800677e:	6023      	str	r3, [r4, #0]
 8006780:	e7f6      	b.n	8006770 <_printf_i+0x194>
 8006782:	4616      	mov	r6, r2
 8006784:	e7bd      	b.n	8006702 <_printf_i+0x126>
 8006786:	6833      	ldr	r3, [r6, #0]
 8006788:	6825      	ldr	r5, [r4, #0]
 800678a:	6961      	ldr	r1, [r4, #20]
 800678c:	1d18      	adds	r0, r3, #4
 800678e:	6030      	str	r0, [r6, #0]
 8006790:	062e      	lsls	r6, r5, #24
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	d501      	bpl.n	800679a <_printf_i+0x1be>
 8006796:	6019      	str	r1, [r3, #0]
 8006798:	e002      	b.n	80067a0 <_printf_i+0x1c4>
 800679a:	0668      	lsls	r0, r5, #25
 800679c:	d5fb      	bpl.n	8006796 <_printf_i+0x1ba>
 800679e:	8019      	strh	r1, [r3, #0]
 80067a0:	2300      	movs	r3, #0
 80067a2:	6123      	str	r3, [r4, #16]
 80067a4:	4616      	mov	r6, r2
 80067a6:	e7bc      	b.n	8006722 <_printf_i+0x146>
 80067a8:	6833      	ldr	r3, [r6, #0]
 80067aa:	1d1a      	adds	r2, r3, #4
 80067ac:	6032      	str	r2, [r6, #0]
 80067ae:	681e      	ldr	r6, [r3, #0]
 80067b0:	6862      	ldr	r2, [r4, #4]
 80067b2:	2100      	movs	r1, #0
 80067b4:	4630      	mov	r0, r6
 80067b6:	f7f9 fd0b 	bl	80001d0 <memchr>
 80067ba:	b108      	cbz	r0, 80067c0 <_printf_i+0x1e4>
 80067bc:	1b80      	subs	r0, r0, r6
 80067be:	6060      	str	r0, [r4, #4]
 80067c0:	6863      	ldr	r3, [r4, #4]
 80067c2:	6123      	str	r3, [r4, #16]
 80067c4:	2300      	movs	r3, #0
 80067c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ca:	e7aa      	b.n	8006722 <_printf_i+0x146>
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	4632      	mov	r2, r6
 80067d0:	4649      	mov	r1, r9
 80067d2:	4640      	mov	r0, r8
 80067d4:	47d0      	blx	sl
 80067d6:	3001      	adds	r0, #1
 80067d8:	d0ad      	beq.n	8006736 <_printf_i+0x15a>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	079b      	lsls	r3, r3, #30
 80067de:	d413      	bmi.n	8006808 <_printf_i+0x22c>
 80067e0:	68e0      	ldr	r0, [r4, #12]
 80067e2:	9b03      	ldr	r3, [sp, #12]
 80067e4:	4298      	cmp	r0, r3
 80067e6:	bfb8      	it	lt
 80067e8:	4618      	movlt	r0, r3
 80067ea:	e7a6      	b.n	800673a <_printf_i+0x15e>
 80067ec:	2301      	movs	r3, #1
 80067ee:	4632      	mov	r2, r6
 80067f0:	4649      	mov	r1, r9
 80067f2:	4640      	mov	r0, r8
 80067f4:	47d0      	blx	sl
 80067f6:	3001      	adds	r0, #1
 80067f8:	d09d      	beq.n	8006736 <_printf_i+0x15a>
 80067fa:	3501      	adds	r5, #1
 80067fc:	68e3      	ldr	r3, [r4, #12]
 80067fe:	9903      	ldr	r1, [sp, #12]
 8006800:	1a5b      	subs	r3, r3, r1
 8006802:	42ab      	cmp	r3, r5
 8006804:	dcf2      	bgt.n	80067ec <_printf_i+0x210>
 8006806:	e7eb      	b.n	80067e0 <_printf_i+0x204>
 8006808:	2500      	movs	r5, #0
 800680a:	f104 0619 	add.w	r6, r4, #25
 800680e:	e7f5      	b.n	80067fc <_printf_i+0x220>
 8006810:	08008cd6 	.word	0x08008cd6
 8006814:	08008ce7 	.word	0x08008ce7

08006818 <std>:
 8006818:	2300      	movs	r3, #0
 800681a:	b510      	push	{r4, lr}
 800681c:	4604      	mov	r4, r0
 800681e:	e9c0 3300 	strd	r3, r3, [r0]
 8006822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006826:	6083      	str	r3, [r0, #8]
 8006828:	8181      	strh	r1, [r0, #12]
 800682a:	6643      	str	r3, [r0, #100]	@ 0x64
 800682c:	81c2      	strh	r2, [r0, #14]
 800682e:	6183      	str	r3, [r0, #24]
 8006830:	4619      	mov	r1, r3
 8006832:	2208      	movs	r2, #8
 8006834:	305c      	adds	r0, #92	@ 0x5c
 8006836:	f000 f916 	bl	8006a66 <memset>
 800683a:	4b0d      	ldr	r3, [pc, #52]	@ (8006870 <std+0x58>)
 800683c:	6263      	str	r3, [r4, #36]	@ 0x24
 800683e:	4b0d      	ldr	r3, [pc, #52]	@ (8006874 <std+0x5c>)
 8006840:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006842:	4b0d      	ldr	r3, [pc, #52]	@ (8006878 <std+0x60>)
 8006844:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006846:	4b0d      	ldr	r3, [pc, #52]	@ (800687c <std+0x64>)
 8006848:	6323      	str	r3, [r4, #48]	@ 0x30
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <std+0x68>)
 800684c:	6224      	str	r4, [r4, #32]
 800684e:	429c      	cmp	r4, r3
 8006850:	d006      	beq.n	8006860 <std+0x48>
 8006852:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006856:	4294      	cmp	r4, r2
 8006858:	d002      	beq.n	8006860 <std+0x48>
 800685a:	33d0      	adds	r3, #208	@ 0xd0
 800685c:	429c      	cmp	r4, r3
 800685e:	d105      	bne.n	800686c <std+0x54>
 8006860:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006868:	f000 b97a 	b.w	8006b60 <__retarget_lock_init_recursive>
 800686c:	bd10      	pop	{r4, pc}
 800686e:	bf00      	nop
 8006870:	080069e1 	.word	0x080069e1
 8006874:	08006a03 	.word	0x08006a03
 8006878:	08006a3b 	.word	0x08006a3b
 800687c:	08006a5f 	.word	0x08006a5f
 8006880:	20000444 	.word	0x20000444

08006884 <stdio_exit_handler>:
 8006884:	4a02      	ldr	r2, [pc, #8]	@ (8006890 <stdio_exit_handler+0xc>)
 8006886:	4903      	ldr	r1, [pc, #12]	@ (8006894 <stdio_exit_handler+0x10>)
 8006888:	4803      	ldr	r0, [pc, #12]	@ (8006898 <stdio_exit_handler+0x14>)
 800688a:	f000 b869 	b.w	8006960 <_fwalk_sglue>
 800688e:	bf00      	nop
 8006890:	2000000c 	.word	0x2000000c
 8006894:	080084c5 	.word	0x080084c5
 8006898:	2000001c 	.word	0x2000001c

0800689c <cleanup_stdio>:
 800689c:	6841      	ldr	r1, [r0, #4]
 800689e:	4b0c      	ldr	r3, [pc, #48]	@ (80068d0 <cleanup_stdio+0x34>)
 80068a0:	4299      	cmp	r1, r3
 80068a2:	b510      	push	{r4, lr}
 80068a4:	4604      	mov	r4, r0
 80068a6:	d001      	beq.n	80068ac <cleanup_stdio+0x10>
 80068a8:	f001 fe0c 	bl	80084c4 <_fflush_r>
 80068ac:	68a1      	ldr	r1, [r4, #8]
 80068ae:	4b09      	ldr	r3, [pc, #36]	@ (80068d4 <cleanup_stdio+0x38>)
 80068b0:	4299      	cmp	r1, r3
 80068b2:	d002      	beq.n	80068ba <cleanup_stdio+0x1e>
 80068b4:	4620      	mov	r0, r4
 80068b6:	f001 fe05 	bl	80084c4 <_fflush_r>
 80068ba:	68e1      	ldr	r1, [r4, #12]
 80068bc:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <cleanup_stdio+0x3c>)
 80068be:	4299      	cmp	r1, r3
 80068c0:	d004      	beq.n	80068cc <cleanup_stdio+0x30>
 80068c2:	4620      	mov	r0, r4
 80068c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c8:	f001 bdfc 	b.w	80084c4 <_fflush_r>
 80068cc:	bd10      	pop	{r4, pc}
 80068ce:	bf00      	nop
 80068d0:	20000444 	.word	0x20000444
 80068d4:	200004ac 	.word	0x200004ac
 80068d8:	20000514 	.word	0x20000514

080068dc <global_stdio_init.part.0>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	4b0b      	ldr	r3, [pc, #44]	@ (800690c <global_stdio_init.part.0+0x30>)
 80068e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006910 <global_stdio_init.part.0+0x34>)
 80068e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006914 <global_stdio_init.part.0+0x38>)
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	4620      	mov	r0, r4
 80068e8:	2200      	movs	r2, #0
 80068ea:	2104      	movs	r1, #4
 80068ec:	f7ff ff94 	bl	8006818 <std>
 80068f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068f4:	2201      	movs	r2, #1
 80068f6:	2109      	movs	r1, #9
 80068f8:	f7ff ff8e 	bl	8006818 <std>
 80068fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006900:	2202      	movs	r2, #2
 8006902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006906:	2112      	movs	r1, #18
 8006908:	f7ff bf86 	b.w	8006818 <std>
 800690c:	2000057c 	.word	0x2000057c
 8006910:	20000444 	.word	0x20000444
 8006914:	08006885 	.word	0x08006885

08006918 <__sfp_lock_acquire>:
 8006918:	4801      	ldr	r0, [pc, #4]	@ (8006920 <__sfp_lock_acquire+0x8>)
 800691a:	f000 b922 	b.w	8006b62 <__retarget_lock_acquire_recursive>
 800691e:	bf00      	nop
 8006920:	20000585 	.word	0x20000585

08006924 <__sfp_lock_release>:
 8006924:	4801      	ldr	r0, [pc, #4]	@ (800692c <__sfp_lock_release+0x8>)
 8006926:	f000 b91d 	b.w	8006b64 <__retarget_lock_release_recursive>
 800692a:	bf00      	nop
 800692c:	20000585 	.word	0x20000585

08006930 <__sinit>:
 8006930:	b510      	push	{r4, lr}
 8006932:	4604      	mov	r4, r0
 8006934:	f7ff fff0 	bl	8006918 <__sfp_lock_acquire>
 8006938:	6a23      	ldr	r3, [r4, #32]
 800693a:	b11b      	cbz	r3, 8006944 <__sinit+0x14>
 800693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006940:	f7ff bff0 	b.w	8006924 <__sfp_lock_release>
 8006944:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <__sinit+0x28>)
 8006946:	6223      	str	r3, [r4, #32]
 8006948:	4b04      	ldr	r3, [pc, #16]	@ (800695c <__sinit+0x2c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f5      	bne.n	800693c <__sinit+0xc>
 8006950:	f7ff ffc4 	bl	80068dc <global_stdio_init.part.0>
 8006954:	e7f2      	b.n	800693c <__sinit+0xc>
 8006956:	bf00      	nop
 8006958:	0800689d 	.word	0x0800689d
 800695c:	2000057c 	.word	0x2000057c

08006960 <_fwalk_sglue>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	4607      	mov	r7, r0
 8006966:	4688      	mov	r8, r1
 8006968:	4614      	mov	r4, r2
 800696a:	2600      	movs	r6, #0
 800696c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006970:	f1b9 0901 	subs.w	r9, r9, #1
 8006974:	d505      	bpl.n	8006982 <_fwalk_sglue+0x22>
 8006976:	6824      	ldr	r4, [r4, #0]
 8006978:	2c00      	cmp	r4, #0
 800697a:	d1f7      	bne.n	800696c <_fwalk_sglue+0xc>
 800697c:	4630      	mov	r0, r6
 800697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006982:	89ab      	ldrh	r3, [r5, #12]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d907      	bls.n	8006998 <_fwalk_sglue+0x38>
 8006988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800698c:	3301      	adds	r3, #1
 800698e:	d003      	beq.n	8006998 <_fwalk_sglue+0x38>
 8006990:	4629      	mov	r1, r5
 8006992:	4638      	mov	r0, r7
 8006994:	47c0      	blx	r8
 8006996:	4306      	orrs	r6, r0
 8006998:	3568      	adds	r5, #104	@ 0x68
 800699a:	e7e9      	b.n	8006970 <_fwalk_sglue+0x10>

0800699c <siprintf>:
 800699c:	b40e      	push	{r1, r2, r3}
 800699e:	b510      	push	{r4, lr}
 80069a0:	b09d      	sub	sp, #116	@ 0x74
 80069a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80069a4:	9002      	str	r0, [sp, #8]
 80069a6:	9006      	str	r0, [sp, #24]
 80069a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069ac:	480a      	ldr	r0, [pc, #40]	@ (80069d8 <siprintf+0x3c>)
 80069ae:	9107      	str	r1, [sp, #28]
 80069b0:	9104      	str	r1, [sp, #16]
 80069b2:	490a      	ldr	r1, [pc, #40]	@ (80069dc <siprintf+0x40>)
 80069b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b8:	9105      	str	r1, [sp, #20]
 80069ba:	2400      	movs	r4, #0
 80069bc:	a902      	add	r1, sp, #8
 80069be:	6800      	ldr	r0, [r0, #0]
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80069c4:	f001 fbfe 	bl	80081c4 <_svfiprintf_r>
 80069c8:	9b02      	ldr	r3, [sp, #8]
 80069ca:	701c      	strb	r4, [r3, #0]
 80069cc:	b01d      	add	sp, #116	@ 0x74
 80069ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d2:	b003      	add	sp, #12
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	20000018 	.word	0x20000018
 80069dc:	ffff0208 	.word	0xffff0208

080069e0 <__sread>:
 80069e0:	b510      	push	{r4, lr}
 80069e2:	460c      	mov	r4, r1
 80069e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e8:	f000 f86c 	bl	8006ac4 <_read_r>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	bfab      	itete	ge
 80069f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069f2:	89a3      	ldrhlt	r3, [r4, #12]
 80069f4:	181b      	addge	r3, r3, r0
 80069f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069fa:	bfac      	ite	ge
 80069fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069fe:	81a3      	strhlt	r3, [r4, #12]
 8006a00:	bd10      	pop	{r4, pc}

08006a02 <__swrite>:
 8006a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a06:	461f      	mov	r7, r3
 8006a08:	898b      	ldrh	r3, [r1, #12]
 8006a0a:	05db      	lsls	r3, r3, #23
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	4616      	mov	r6, r2
 8006a12:	d505      	bpl.n	8006a20 <__swrite+0x1e>
 8006a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a18:	2302      	movs	r3, #2
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f000 f840 	bl	8006aa0 <_lseek_r>
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a2a:	81a3      	strh	r3, [r4, #12]
 8006a2c:	4632      	mov	r2, r6
 8006a2e:	463b      	mov	r3, r7
 8006a30:	4628      	mov	r0, r5
 8006a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a36:	f000 b857 	b.w	8006ae8 <_write_r>

08006a3a <__sseek>:
 8006a3a:	b510      	push	{r4, lr}
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a42:	f000 f82d 	bl	8006aa0 <_lseek_r>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	bf15      	itete	ne
 8006a4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a56:	81a3      	strheq	r3, [r4, #12]
 8006a58:	bf18      	it	ne
 8006a5a:	81a3      	strhne	r3, [r4, #12]
 8006a5c:	bd10      	pop	{r4, pc}

08006a5e <__sclose>:
 8006a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a62:	f000 b80d 	b.w	8006a80 <_close_r>

08006a66 <memset>:
 8006a66:	4402      	add	r2, r0
 8006a68:	4603      	mov	r3, r0
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d100      	bne.n	8006a70 <memset+0xa>
 8006a6e:	4770      	bx	lr
 8006a70:	f803 1b01 	strb.w	r1, [r3], #1
 8006a74:	e7f9      	b.n	8006a6a <memset+0x4>
	...

08006a78 <_localeconv_r>:
 8006a78:	4800      	ldr	r0, [pc, #0]	@ (8006a7c <_localeconv_r+0x4>)
 8006a7a:	4770      	bx	lr
 8006a7c:	20000158 	.word	0x20000158

08006a80 <_close_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4d06      	ldr	r5, [pc, #24]	@ (8006a9c <_close_r+0x1c>)
 8006a84:	2300      	movs	r3, #0
 8006a86:	4604      	mov	r4, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	f7fb f92a 	bl	8001ce4 <_close>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d102      	bne.n	8006a9a <_close_r+0x1a>
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	b103      	cbz	r3, 8006a9a <_close_r+0x1a>
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	20000580 	.word	0x20000580

08006aa0 <_lseek_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4d07      	ldr	r5, [pc, #28]	@ (8006ac0 <_lseek_r+0x20>)
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	602a      	str	r2, [r5, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f7fb f93f 	bl	8001d32 <_lseek>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_lseek_r+0x1e>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_lseek_r+0x1e>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	20000580 	.word	0x20000580

08006ac4 <_read_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4d07      	ldr	r5, [pc, #28]	@ (8006ae4 <_read_r+0x20>)
 8006ac8:	4604      	mov	r4, r0
 8006aca:	4608      	mov	r0, r1
 8006acc:	4611      	mov	r1, r2
 8006ace:	2200      	movs	r2, #0
 8006ad0:	602a      	str	r2, [r5, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f7fb f8cd 	bl	8001c72 <_read>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_read_r+0x1e>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_read_r+0x1e>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	20000580 	.word	0x20000580

08006ae8 <_write_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4d07      	ldr	r5, [pc, #28]	@ (8006b08 <_write_r+0x20>)
 8006aec:	4604      	mov	r4, r0
 8006aee:	4608      	mov	r0, r1
 8006af0:	4611      	mov	r1, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	602a      	str	r2, [r5, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f7fb f8d8 	bl	8001cac <_write>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_write_r+0x1e>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_write_r+0x1e>
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	20000580 	.word	0x20000580

08006b0c <__errno>:
 8006b0c:	4b01      	ldr	r3, [pc, #4]	@ (8006b14 <__errno+0x8>)
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20000018 	.word	0x20000018

08006b18 <__libc_init_array>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b50 <__libc_init_array+0x38>)
 8006b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b54 <__libc_init_array+0x3c>)
 8006b1e:	1b64      	subs	r4, r4, r5
 8006b20:	10a4      	asrs	r4, r4, #2
 8006b22:	2600      	movs	r6, #0
 8006b24:	42a6      	cmp	r6, r4
 8006b26:	d109      	bne.n	8006b3c <__libc_init_array+0x24>
 8006b28:	4d0b      	ldr	r5, [pc, #44]	@ (8006b58 <__libc_init_array+0x40>)
 8006b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b5c <__libc_init_array+0x44>)
 8006b2c:	f002 f868 	bl	8008c00 <_init>
 8006b30:	1b64      	subs	r4, r4, r5
 8006b32:	10a4      	asrs	r4, r4, #2
 8006b34:	2600      	movs	r6, #0
 8006b36:	42a6      	cmp	r6, r4
 8006b38:	d105      	bne.n	8006b46 <__libc_init_array+0x2e>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b40:	4798      	blx	r3
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7ee      	b.n	8006b24 <__libc_init_array+0xc>
 8006b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4a:	4798      	blx	r3
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	e7f2      	b.n	8006b36 <__libc_init_array+0x1e>
 8006b50:	08009044 	.word	0x08009044
 8006b54:	08009044 	.word	0x08009044
 8006b58:	08009044 	.word	0x08009044
 8006b5c:	08009048 	.word	0x08009048

08006b60 <__retarget_lock_init_recursive>:
 8006b60:	4770      	bx	lr

08006b62 <__retarget_lock_acquire_recursive>:
 8006b62:	4770      	bx	lr

08006b64 <__retarget_lock_release_recursive>:
 8006b64:	4770      	bx	lr

08006b66 <quorem>:
 8006b66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6a:	6903      	ldr	r3, [r0, #16]
 8006b6c:	690c      	ldr	r4, [r1, #16]
 8006b6e:	42a3      	cmp	r3, r4
 8006b70:	4607      	mov	r7, r0
 8006b72:	db7e      	blt.n	8006c72 <quorem+0x10c>
 8006b74:	3c01      	subs	r4, #1
 8006b76:	f101 0814 	add.w	r8, r1, #20
 8006b7a:	00a3      	lsls	r3, r4, #2
 8006b7c:	f100 0514 	add.w	r5, r0, #20
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b90:	3301      	adds	r3, #1
 8006b92:	429a      	cmp	r2, r3
 8006b94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b98:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b9c:	d32e      	bcc.n	8006bfc <quorem+0x96>
 8006b9e:	f04f 0a00 	mov.w	sl, #0
 8006ba2:	46c4      	mov	ip, r8
 8006ba4:	46ae      	mov	lr, r5
 8006ba6:	46d3      	mov	fp, sl
 8006ba8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bac:	b298      	uxth	r0, r3
 8006bae:	fb06 a000 	mla	r0, r6, r0, sl
 8006bb2:	0c02      	lsrs	r2, r0, #16
 8006bb4:	0c1b      	lsrs	r3, r3, #16
 8006bb6:	fb06 2303 	mla	r3, r6, r3, r2
 8006bba:	f8de 2000 	ldr.w	r2, [lr]
 8006bbe:	b280      	uxth	r0, r0
 8006bc0:	b292      	uxth	r2, r2
 8006bc2:	1a12      	subs	r2, r2, r0
 8006bc4:	445a      	add	r2, fp
 8006bc6:	f8de 0000 	ldr.w	r0, [lr]
 8006bca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006bd4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006bd8:	b292      	uxth	r2, r2
 8006bda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006bde:	45e1      	cmp	r9, ip
 8006be0:	f84e 2b04 	str.w	r2, [lr], #4
 8006be4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006be8:	d2de      	bcs.n	8006ba8 <quorem+0x42>
 8006bea:	9b00      	ldr	r3, [sp, #0]
 8006bec:	58eb      	ldr	r3, [r5, r3]
 8006bee:	b92b      	cbnz	r3, 8006bfc <quorem+0x96>
 8006bf0:	9b01      	ldr	r3, [sp, #4]
 8006bf2:	3b04      	subs	r3, #4
 8006bf4:	429d      	cmp	r5, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	d32f      	bcc.n	8006c5a <quorem+0xf4>
 8006bfa:	613c      	str	r4, [r7, #16]
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	f001 f97d 	bl	8007efc <__mcmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	db25      	blt.n	8006c52 <quorem+0xec>
 8006c06:	4629      	mov	r1, r5
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c0e:	f8d1 c000 	ldr.w	ip, [r1]
 8006c12:	fa1f fe82 	uxth.w	lr, r2
 8006c16:	fa1f f38c 	uxth.w	r3, ip
 8006c1a:	eba3 030e 	sub.w	r3, r3, lr
 8006c1e:	4403      	add	r3, r0
 8006c20:	0c12      	lsrs	r2, r2, #16
 8006c22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c30:	45c1      	cmp	r9, r8
 8006c32:	f841 3b04 	str.w	r3, [r1], #4
 8006c36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c3a:	d2e6      	bcs.n	8006c0a <quorem+0xa4>
 8006c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c44:	b922      	cbnz	r2, 8006c50 <quorem+0xea>
 8006c46:	3b04      	subs	r3, #4
 8006c48:	429d      	cmp	r5, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	d30b      	bcc.n	8006c66 <quorem+0x100>
 8006c4e:	613c      	str	r4, [r7, #16]
 8006c50:	3601      	adds	r6, #1
 8006c52:	4630      	mov	r0, r6
 8006c54:	b003      	add	sp, #12
 8006c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5a:	6812      	ldr	r2, [r2, #0]
 8006c5c:	3b04      	subs	r3, #4
 8006c5e:	2a00      	cmp	r2, #0
 8006c60:	d1cb      	bne.n	8006bfa <quorem+0x94>
 8006c62:	3c01      	subs	r4, #1
 8006c64:	e7c6      	b.n	8006bf4 <quorem+0x8e>
 8006c66:	6812      	ldr	r2, [r2, #0]
 8006c68:	3b04      	subs	r3, #4
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	d1ef      	bne.n	8006c4e <quorem+0xe8>
 8006c6e:	3c01      	subs	r4, #1
 8006c70:	e7ea      	b.n	8006c48 <quorem+0xe2>
 8006c72:	2000      	movs	r0, #0
 8006c74:	e7ee      	b.n	8006c54 <quorem+0xee>
	...

08006c78 <_dtoa_r>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	69c7      	ldr	r7, [r0, #28]
 8006c7e:	b097      	sub	sp, #92	@ 0x5c
 8006c80:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006c84:	ec55 4b10 	vmov	r4, r5, d0
 8006c88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006c8a:	9107      	str	r1, [sp, #28]
 8006c8c:	4681      	mov	r9, r0
 8006c8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006c90:	9311      	str	r3, [sp, #68]	@ 0x44
 8006c92:	b97f      	cbnz	r7, 8006cb4 <_dtoa_r+0x3c>
 8006c94:	2010      	movs	r0, #16
 8006c96:	f000 fe09 	bl	80078ac <malloc>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006ca0:	b920      	cbnz	r0, 8006cac <_dtoa_r+0x34>
 8006ca2:	4ba9      	ldr	r3, [pc, #676]	@ (8006f48 <_dtoa_r+0x2d0>)
 8006ca4:	21ef      	movs	r1, #239	@ 0xef
 8006ca6:	48a9      	ldr	r0, [pc, #676]	@ (8006f4c <_dtoa_r+0x2d4>)
 8006ca8:	f001 fc6c 	bl	8008584 <__assert_func>
 8006cac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006cb0:	6007      	str	r7, [r0, #0]
 8006cb2:	60c7      	str	r7, [r0, #12]
 8006cb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006cb8:	6819      	ldr	r1, [r3, #0]
 8006cba:	b159      	cbz	r1, 8006cd4 <_dtoa_r+0x5c>
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	604a      	str	r2, [r1, #4]
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	4093      	lsls	r3, r2
 8006cc4:	608b      	str	r3, [r1, #8]
 8006cc6:	4648      	mov	r0, r9
 8006cc8:	f000 fee6 	bl	8007a98 <_Bfree>
 8006ccc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	1e2b      	subs	r3, r5, #0
 8006cd6:	bfb9      	ittee	lt
 8006cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006cdc:	9305      	strlt	r3, [sp, #20]
 8006cde:	2300      	movge	r3, #0
 8006ce0:	6033      	strge	r3, [r6, #0]
 8006ce2:	9f05      	ldr	r7, [sp, #20]
 8006ce4:	4b9a      	ldr	r3, [pc, #616]	@ (8006f50 <_dtoa_r+0x2d8>)
 8006ce6:	bfbc      	itt	lt
 8006ce8:	2201      	movlt	r2, #1
 8006cea:	6032      	strlt	r2, [r6, #0]
 8006cec:	43bb      	bics	r3, r7
 8006cee:	d112      	bne.n	8006d16 <_dtoa_r+0x9e>
 8006cf0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006cf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cfc:	4323      	orrs	r3, r4
 8006cfe:	f000 855a 	beq.w	80077b6 <_dtoa_r+0xb3e>
 8006d02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006f64 <_dtoa_r+0x2ec>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 855c 	beq.w	80077c6 <_dtoa_r+0xb4e>
 8006d0e:	f10a 0303 	add.w	r3, sl, #3
 8006d12:	f000 bd56 	b.w	80077c2 <_dtoa_r+0xb4a>
 8006d16:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	ec51 0b17 	vmov	r0, r1, d7
 8006d20:	2300      	movs	r3, #0
 8006d22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006d26:	f7f9 fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d2a:	4680      	mov	r8, r0
 8006d2c:	b158      	cbz	r0, 8006d46 <_dtoa_r+0xce>
 8006d2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006d30:	2301      	movs	r3, #1
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d36:	b113      	cbz	r3, 8006d3e <_dtoa_r+0xc6>
 8006d38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006d3a:	4b86      	ldr	r3, [pc, #536]	@ (8006f54 <_dtoa_r+0x2dc>)
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006f68 <_dtoa_r+0x2f0>
 8006d42:	f000 bd40 	b.w	80077c6 <_dtoa_r+0xb4e>
 8006d46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006d4a:	aa14      	add	r2, sp, #80	@ 0x50
 8006d4c:	a915      	add	r1, sp, #84	@ 0x54
 8006d4e:	4648      	mov	r0, r9
 8006d50:	f001 f984 	bl	800805c <__d2b>
 8006d54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d58:	9002      	str	r0, [sp, #8]
 8006d5a:	2e00      	cmp	r6, #0
 8006d5c:	d078      	beq.n	8006e50 <_dtoa_r+0x1d8>
 8006d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d78:	4619      	mov	r1, r3
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	4b76      	ldr	r3, [pc, #472]	@ (8006f58 <_dtoa_r+0x2e0>)
 8006d7e:	f7f9 fa83 	bl	8000288 <__aeabi_dsub>
 8006d82:	a36b      	add	r3, pc, #428	@ (adr r3, 8006f30 <_dtoa_r+0x2b8>)
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	f7f9 fc36 	bl	80005f8 <__aeabi_dmul>
 8006d8c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006f38 <_dtoa_r+0x2c0>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f7f9 fa7b 	bl	800028c <__adddf3>
 8006d96:	4604      	mov	r4, r0
 8006d98:	4630      	mov	r0, r6
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	f7f9 fbc2 	bl	8000524 <__aeabi_i2d>
 8006da0:	a367      	add	r3, pc, #412	@ (adr r3, 8006f40 <_dtoa_r+0x2c8>)
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	f7f9 fc27 	bl	80005f8 <__aeabi_dmul>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4620      	mov	r0, r4
 8006db0:	4629      	mov	r1, r5
 8006db2:	f7f9 fa6b 	bl	800028c <__adddf3>
 8006db6:	4604      	mov	r4, r0
 8006db8:	460d      	mov	r5, r1
 8006dba:	f7f9 fecd 	bl	8000b58 <__aeabi_d2iz>
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	f7f9 fe88 	bl	8000adc <__aeabi_dcmplt>
 8006dcc:	b140      	cbz	r0, 8006de0 <_dtoa_r+0x168>
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f7f9 fba8 	bl	8000524 <__aeabi_i2d>
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	462b      	mov	r3, r5
 8006dd8:	f7f9 fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ddc:	b900      	cbnz	r0, 8006de0 <_dtoa_r+0x168>
 8006dde:	3f01      	subs	r7, #1
 8006de0:	2f16      	cmp	r7, #22
 8006de2:	d852      	bhi.n	8006e8a <_dtoa_r+0x212>
 8006de4:	4b5d      	ldr	r3, [pc, #372]	@ (8006f5c <_dtoa_r+0x2e4>)
 8006de6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006df2:	f7f9 fe73 	bl	8000adc <__aeabi_dcmplt>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d049      	beq.n	8006e8e <_dtoa_r+0x216>
 8006dfa:	3f01      	subs	r7, #1
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e02:	1b9b      	subs	r3, r3, r6
 8006e04:	1e5a      	subs	r2, r3, #1
 8006e06:	bf45      	ittet	mi
 8006e08:	f1c3 0301 	rsbmi	r3, r3, #1
 8006e0c:	9300      	strmi	r3, [sp, #0]
 8006e0e:	2300      	movpl	r3, #0
 8006e10:	2300      	movmi	r3, #0
 8006e12:	9206      	str	r2, [sp, #24]
 8006e14:	bf54      	ite	pl
 8006e16:	9300      	strpl	r3, [sp, #0]
 8006e18:	9306      	strmi	r3, [sp, #24]
 8006e1a:	2f00      	cmp	r7, #0
 8006e1c:	db39      	blt.n	8006e92 <_dtoa_r+0x21a>
 8006e1e:	9b06      	ldr	r3, [sp, #24]
 8006e20:	970d      	str	r7, [sp, #52]	@ 0x34
 8006e22:	443b      	add	r3, r7
 8006e24:	9306      	str	r3, [sp, #24]
 8006e26:	2300      	movs	r3, #0
 8006e28:	9308      	str	r3, [sp, #32]
 8006e2a:	9b07      	ldr	r3, [sp, #28]
 8006e2c:	2b09      	cmp	r3, #9
 8006e2e:	d863      	bhi.n	8006ef8 <_dtoa_r+0x280>
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	bfc4      	itt	gt
 8006e34:	3b04      	subgt	r3, #4
 8006e36:	9307      	strgt	r3, [sp, #28]
 8006e38:	9b07      	ldr	r3, [sp, #28]
 8006e3a:	f1a3 0302 	sub.w	r3, r3, #2
 8006e3e:	bfcc      	ite	gt
 8006e40:	2400      	movgt	r4, #0
 8006e42:	2401      	movle	r4, #1
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d863      	bhi.n	8006f10 <_dtoa_r+0x298>
 8006e48:	e8df f003 	tbb	[pc, r3]
 8006e4c:	2b375452 	.word	0x2b375452
 8006e50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006e54:	441e      	add	r6, r3
 8006e56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	bfc1      	itttt	gt
 8006e5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e62:	409f      	lslgt	r7, r3
 8006e64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e68:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e6c:	bfd6      	itet	le
 8006e6e:	f1c3 0320 	rsble	r3, r3, #32
 8006e72:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e76:	fa04 f003 	lslle.w	r0, r4, r3
 8006e7a:	f7f9 fb43 	bl	8000504 <__aeabi_ui2d>
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e84:	3e01      	subs	r6, #1
 8006e86:	9212      	str	r2, [sp, #72]	@ 0x48
 8006e88:	e776      	b.n	8006d78 <_dtoa_r+0x100>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e7b7      	b.n	8006dfe <_dtoa_r+0x186>
 8006e8e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006e90:	e7b6      	b.n	8006e00 <_dtoa_r+0x188>
 8006e92:	9b00      	ldr	r3, [sp, #0]
 8006e94:	1bdb      	subs	r3, r3, r7
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	427b      	negs	r3, r7
 8006e9a:	9308      	str	r3, [sp, #32]
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006ea0:	e7c3      	b.n	8006e2a <_dtoa_r+0x1b2>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ea8:	eb07 0b03 	add.w	fp, r7, r3
 8006eac:	f10b 0301 	add.w	r3, fp, #1
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	9303      	str	r3, [sp, #12]
 8006eb4:	bfb8      	it	lt
 8006eb6:	2301      	movlt	r3, #1
 8006eb8:	e006      	b.n	8006ec8 <_dtoa_r+0x250>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ebe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	dd28      	ble.n	8006f16 <_dtoa_r+0x29e>
 8006ec4:	469b      	mov	fp, r3
 8006ec6:	9303      	str	r3, [sp, #12]
 8006ec8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	2204      	movs	r2, #4
 8006ed0:	f102 0514 	add.w	r5, r2, #20
 8006ed4:	429d      	cmp	r5, r3
 8006ed6:	d926      	bls.n	8006f26 <_dtoa_r+0x2ae>
 8006ed8:	6041      	str	r1, [r0, #4]
 8006eda:	4648      	mov	r0, r9
 8006edc:	f000 fd9c 	bl	8007a18 <_Balloc>
 8006ee0:	4682      	mov	sl, r0
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d142      	bne.n	8006f6c <_dtoa_r+0x2f4>
 8006ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f60 <_dtoa_r+0x2e8>)
 8006ee8:	4602      	mov	r2, r0
 8006eea:	f240 11af 	movw	r1, #431	@ 0x1af
 8006eee:	e6da      	b.n	8006ca6 <_dtoa_r+0x2e>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e7e3      	b.n	8006ebc <_dtoa_r+0x244>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e7d5      	b.n	8006ea4 <_dtoa_r+0x22c>
 8006ef8:	2401      	movs	r4, #1
 8006efa:	2300      	movs	r3, #0
 8006efc:	9307      	str	r3, [sp, #28]
 8006efe:	9409      	str	r4, [sp, #36]	@ 0x24
 8006f00:	f04f 3bff 	mov.w	fp, #4294967295
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8cd b00c 	str.w	fp, [sp, #12]
 8006f0a:	2312      	movs	r3, #18
 8006f0c:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f0e:	e7db      	b.n	8006ec8 <_dtoa_r+0x250>
 8006f10:	2301      	movs	r3, #1
 8006f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f14:	e7f4      	b.n	8006f00 <_dtoa_r+0x288>
 8006f16:	f04f 0b01 	mov.w	fp, #1
 8006f1a:	f8cd b00c 	str.w	fp, [sp, #12]
 8006f1e:	465b      	mov	r3, fp
 8006f20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006f24:	e7d0      	b.n	8006ec8 <_dtoa_r+0x250>
 8006f26:	3101      	adds	r1, #1
 8006f28:	0052      	lsls	r2, r2, #1
 8006f2a:	e7d1      	b.n	8006ed0 <_dtoa_r+0x258>
 8006f2c:	f3af 8000 	nop.w
 8006f30:	636f4361 	.word	0x636f4361
 8006f34:	3fd287a7 	.word	0x3fd287a7
 8006f38:	8b60c8b3 	.word	0x8b60c8b3
 8006f3c:	3fc68a28 	.word	0x3fc68a28
 8006f40:	509f79fb 	.word	0x509f79fb
 8006f44:	3fd34413 	.word	0x3fd34413
 8006f48:	08008d05 	.word	0x08008d05
 8006f4c:	08008d1c 	.word	0x08008d1c
 8006f50:	7ff00000 	.word	0x7ff00000
 8006f54:	08008cd5 	.word	0x08008cd5
 8006f58:	3ff80000 	.word	0x3ff80000
 8006f5c:	08008e70 	.word	0x08008e70
 8006f60:	08008d74 	.word	0x08008d74
 8006f64:	08008d01 	.word	0x08008d01
 8006f68:	08008cd4 	.word	0x08008cd4
 8006f6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f70:	6018      	str	r0, [r3, #0]
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	2b0e      	cmp	r3, #14
 8006f76:	f200 80a1 	bhi.w	80070bc <_dtoa_r+0x444>
 8006f7a:	2c00      	cmp	r4, #0
 8006f7c:	f000 809e 	beq.w	80070bc <_dtoa_r+0x444>
 8006f80:	2f00      	cmp	r7, #0
 8006f82:	dd33      	ble.n	8006fec <_dtoa_r+0x374>
 8006f84:	4b9c      	ldr	r3, [pc, #624]	@ (80071f8 <_dtoa_r+0x580>)
 8006f86:	f007 020f 	and.w	r2, r7, #15
 8006f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f8e:	ed93 7b00 	vldr	d7, [r3]
 8006f92:	05f8      	lsls	r0, r7, #23
 8006f94:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006f98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f9c:	d516      	bpl.n	8006fcc <_dtoa_r+0x354>
 8006f9e:	4b97      	ldr	r3, [pc, #604]	@ (80071fc <_dtoa_r+0x584>)
 8006fa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fa8:	f7f9 fc50 	bl	800084c <__aeabi_ddiv>
 8006fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fb0:	f004 040f 	and.w	r4, r4, #15
 8006fb4:	2603      	movs	r6, #3
 8006fb6:	4d91      	ldr	r5, [pc, #580]	@ (80071fc <_dtoa_r+0x584>)
 8006fb8:	b954      	cbnz	r4, 8006fd0 <_dtoa_r+0x358>
 8006fba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fc2:	f7f9 fc43 	bl	800084c <__aeabi_ddiv>
 8006fc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fca:	e028      	b.n	800701e <_dtoa_r+0x3a6>
 8006fcc:	2602      	movs	r6, #2
 8006fce:	e7f2      	b.n	8006fb6 <_dtoa_r+0x33e>
 8006fd0:	07e1      	lsls	r1, r4, #31
 8006fd2:	d508      	bpl.n	8006fe6 <_dtoa_r+0x36e>
 8006fd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fdc:	f7f9 fb0c 	bl	80005f8 <__aeabi_dmul>
 8006fe0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006fe4:	3601      	adds	r6, #1
 8006fe6:	1064      	asrs	r4, r4, #1
 8006fe8:	3508      	adds	r5, #8
 8006fea:	e7e5      	b.n	8006fb8 <_dtoa_r+0x340>
 8006fec:	f000 80af 	beq.w	800714e <_dtoa_r+0x4d6>
 8006ff0:	427c      	negs	r4, r7
 8006ff2:	4b81      	ldr	r3, [pc, #516]	@ (80071f8 <_dtoa_r+0x580>)
 8006ff4:	4d81      	ldr	r5, [pc, #516]	@ (80071fc <_dtoa_r+0x584>)
 8006ff6:	f004 020f 	and.w	r2, r4, #15
 8006ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007006:	f7f9 faf7 	bl	80005f8 <__aeabi_dmul>
 800700a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800700e:	1124      	asrs	r4, r4, #4
 8007010:	2300      	movs	r3, #0
 8007012:	2602      	movs	r6, #2
 8007014:	2c00      	cmp	r4, #0
 8007016:	f040 808f 	bne.w	8007138 <_dtoa_r+0x4c0>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1d3      	bne.n	8006fc6 <_dtoa_r+0x34e>
 800701e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007020:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8094 	beq.w	8007152 <_dtoa_r+0x4da>
 800702a:	4b75      	ldr	r3, [pc, #468]	@ (8007200 <_dtoa_r+0x588>)
 800702c:	2200      	movs	r2, #0
 800702e:	4620      	mov	r0, r4
 8007030:	4629      	mov	r1, r5
 8007032:	f7f9 fd53 	bl	8000adc <__aeabi_dcmplt>
 8007036:	2800      	cmp	r0, #0
 8007038:	f000 808b 	beq.w	8007152 <_dtoa_r+0x4da>
 800703c:	9b03      	ldr	r3, [sp, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 8087 	beq.w	8007152 <_dtoa_r+0x4da>
 8007044:	f1bb 0f00 	cmp.w	fp, #0
 8007048:	dd34      	ble.n	80070b4 <_dtoa_r+0x43c>
 800704a:	4620      	mov	r0, r4
 800704c:	4b6d      	ldr	r3, [pc, #436]	@ (8007204 <_dtoa_r+0x58c>)
 800704e:	2200      	movs	r2, #0
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 fad1 	bl	80005f8 <__aeabi_dmul>
 8007056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800705a:	f107 38ff 	add.w	r8, r7, #4294967295
 800705e:	3601      	adds	r6, #1
 8007060:	465c      	mov	r4, fp
 8007062:	4630      	mov	r0, r6
 8007064:	f7f9 fa5e 	bl	8000524 <__aeabi_i2d>
 8007068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800706c:	f7f9 fac4 	bl	80005f8 <__aeabi_dmul>
 8007070:	4b65      	ldr	r3, [pc, #404]	@ (8007208 <_dtoa_r+0x590>)
 8007072:	2200      	movs	r2, #0
 8007074:	f7f9 f90a 	bl	800028c <__adddf3>
 8007078:	4605      	mov	r5, r0
 800707a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800707e:	2c00      	cmp	r4, #0
 8007080:	d16a      	bne.n	8007158 <_dtoa_r+0x4e0>
 8007082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007086:	4b61      	ldr	r3, [pc, #388]	@ (800720c <_dtoa_r+0x594>)
 8007088:	2200      	movs	r2, #0
 800708a:	f7f9 f8fd 	bl	8000288 <__aeabi_dsub>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007096:	462a      	mov	r2, r5
 8007098:	4633      	mov	r3, r6
 800709a:	f7f9 fd3d 	bl	8000b18 <__aeabi_dcmpgt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	f040 8298 	bne.w	80075d4 <_dtoa_r+0x95c>
 80070a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070a8:	462a      	mov	r2, r5
 80070aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070ae:	f7f9 fd15 	bl	8000adc <__aeabi_dcmplt>
 80070b2:	bb38      	cbnz	r0, 8007104 <_dtoa_r+0x48c>
 80070b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80070b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80070bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f2c0 8157 	blt.w	8007372 <_dtoa_r+0x6fa>
 80070c4:	2f0e      	cmp	r7, #14
 80070c6:	f300 8154 	bgt.w	8007372 <_dtoa_r+0x6fa>
 80070ca:	4b4b      	ldr	r3, [pc, #300]	@ (80071f8 <_dtoa_r+0x580>)
 80070cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070d0:	ed93 7b00 	vldr	d7, [r3]
 80070d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	ed8d 7b00 	vstr	d7, [sp]
 80070dc:	f280 80e5 	bge.w	80072aa <_dtoa_r+0x632>
 80070e0:	9b03      	ldr	r3, [sp, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f300 80e1 	bgt.w	80072aa <_dtoa_r+0x632>
 80070e8:	d10c      	bne.n	8007104 <_dtoa_r+0x48c>
 80070ea:	4b48      	ldr	r3, [pc, #288]	@ (800720c <_dtoa_r+0x594>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	ec51 0b17 	vmov	r0, r1, d7
 80070f2:	f7f9 fa81 	bl	80005f8 <__aeabi_dmul>
 80070f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070fa:	f7f9 fd03 	bl	8000b04 <__aeabi_dcmpge>
 80070fe:	2800      	cmp	r0, #0
 8007100:	f000 8266 	beq.w	80075d0 <_dtoa_r+0x958>
 8007104:	2400      	movs	r4, #0
 8007106:	4625      	mov	r5, r4
 8007108:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800710a:	4656      	mov	r6, sl
 800710c:	ea6f 0803 	mvn.w	r8, r3
 8007110:	2700      	movs	r7, #0
 8007112:	4621      	mov	r1, r4
 8007114:	4648      	mov	r0, r9
 8007116:	f000 fcbf 	bl	8007a98 <_Bfree>
 800711a:	2d00      	cmp	r5, #0
 800711c:	f000 80bd 	beq.w	800729a <_dtoa_r+0x622>
 8007120:	b12f      	cbz	r7, 800712e <_dtoa_r+0x4b6>
 8007122:	42af      	cmp	r7, r5
 8007124:	d003      	beq.n	800712e <_dtoa_r+0x4b6>
 8007126:	4639      	mov	r1, r7
 8007128:	4648      	mov	r0, r9
 800712a:	f000 fcb5 	bl	8007a98 <_Bfree>
 800712e:	4629      	mov	r1, r5
 8007130:	4648      	mov	r0, r9
 8007132:	f000 fcb1 	bl	8007a98 <_Bfree>
 8007136:	e0b0      	b.n	800729a <_dtoa_r+0x622>
 8007138:	07e2      	lsls	r2, r4, #31
 800713a:	d505      	bpl.n	8007148 <_dtoa_r+0x4d0>
 800713c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007140:	f7f9 fa5a 	bl	80005f8 <__aeabi_dmul>
 8007144:	3601      	adds	r6, #1
 8007146:	2301      	movs	r3, #1
 8007148:	1064      	asrs	r4, r4, #1
 800714a:	3508      	adds	r5, #8
 800714c:	e762      	b.n	8007014 <_dtoa_r+0x39c>
 800714e:	2602      	movs	r6, #2
 8007150:	e765      	b.n	800701e <_dtoa_r+0x3a6>
 8007152:	9c03      	ldr	r4, [sp, #12]
 8007154:	46b8      	mov	r8, r7
 8007156:	e784      	b.n	8007062 <_dtoa_r+0x3ea>
 8007158:	4b27      	ldr	r3, [pc, #156]	@ (80071f8 <_dtoa_r+0x580>)
 800715a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800715c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007160:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007164:	4454      	add	r4, sl
 8007166:	2900      	cmp	r1, #0
 8007168:	d054      	beq.n	8007214 <_dtoa_r+0x59c>
 800716a:	4929      	ldr	r1, [pc, #164]	@ (8007210 <_dtoa_r+0x598>)
 800716c:	2000      	movs	r0, #0
 800716e:	f7f9 fb6d 	bl	800084c <__aeabi_ddiv>
 8007172:	4633      	mov	r3, r6
 8007174:	462a      	mov	r2, r5
 8007176:	f7f9 f887 	bl	8000288 <__aeabi_dsub>
 800717a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800717e:	4656      	mov	r6, sl
 8007180:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007184:	f7f9 fce8 	bl	8000b58 <__aeabi_d2iz>
 8007188:	4605      	mov	r5, r0
 800718a:	f7f9 f9cb 	bl	8000524 <__aeabi_i2d>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007196:	f7f9 f877 	bl	8000288 <__aeabi_dsub>
 800719a:	3530      	adds	r5, #48	@ 0x30
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071a4:	f806 5b01 	strb.w	r5, [r6], #1
 80071a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071ac:	f7f9 fc96 	bl	8000adc <__aeabi_dcmplt>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d172      	bne.n	800729a <_dtoa_r+0x622>
 80071b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071b8:	4911      	ldr	r1, [pc, #68]	@ (8007200 <_dtoa_r+0x588>)
 80071ba:	2000      	movs	r0, #0
 80071bc:	f7f9 f864 	bl	8000288 <__aeabi_dsub>
 80071c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071c4:	f7f9 fc8a 	bl	8000adc <__aeabi_dcmplt>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	f040 80b4 	bne.w	8007336 <_dtoa_r+0x6be>
 80071ce:	42a6      	cmp	r6, r4
 80071d0:	f43f af70 	beq.w	80070b4 <_dtoa_r+0x43c>
 80071d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80071d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007204 <_dtoa_r+0x58c>)
 80071da:	2200      	movs	r2, #0
 80071dc:	f7f9 fa0c 	bl	80005f8 <__aeabi_dmul>
 80071e0:	4b08      	ldr	r3, [pc, #32]	@ (8007204 <_dtoa_r+0x58c>)
 80071e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80071e6:	2200      	movs	r2, #0
 80071e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071ec:	f7f9 fa04 	bl	80005f8 <__aeabi_dmul>
 80071f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071f4:	e7c4      	b.n	8007180 <_dtoa_r+0x508>
 80071f6:	bf00      	nop
 80071f8:	08008e70 	.word	0x08008e70
 80071fc:	08008e48 	.word	0x08008e48
 8007200:	3ff00000 	.word	0x3ff00000
 8007204:	40240000 	.word	0x40240000
 8007208:	401c0000 	.word	0x401c0000
 800720c:	40140000 	.word	0x40140000
 8007210:	3fe00000 	.word	0x3fe00000
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	f7f9 f9ee 	bl	80005f8 <__aeabi_dmul>
 800721c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007220:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007222:	4656      	mov	r6, sl
 8007224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007228:	f7f9 fc96 	bl	8000b58 <__aeabi_d2iz>
 800722c:	4605      	mov	r5, r0
 800722e:	f7f9 f979 	bl	8000524 <__aeabi_i2d>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800723a:	f7f9 f825 	bl	8000288 <__aeabi_dsub>
 800723e:	3530      	adds	r5, #48	@ 0x30
 8007240:	f806 5b01 	strb.w	r5, [r6], #1
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	42a6      	cmp	r6, r4
 800724a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	d124      	bne.n	800729e <_dtoa_r+0x626>
 8007254:	4baf      	ldr	r3, [pc, #700]	@ (8007514 <_dtoa_r+0x89c>)
 8007256:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800725a:	f7f9 f817 	bl	800028c <__adddf3>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007266:	f7f9 fc57 	bl	8000b18 <__aeabi_dcmpgt>
 800726a:	2800      	cmp	r0, #0
 800726c:	d163      	bne.n	8007336 <_dtoa_r+0x6be>
 800726e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007272:	49a8      	ldr	r1, [pc, #672]	@ (8007514 <_dtoa_r+0x89c>)
 8007274:	2000      	movs	r0, #0
 8007276:	f7f9 f807 	bl	8000288 <__aeabi_dsub>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007282:	f7f9 fc2b 	bl	8000adc <__aeabi_dcmplt>
 8007286:	2800      	cmp	r0, #0
 8007288:	f43f af14 	beq.w	80070b4 <_dtoa_r+0x43c>
 800728c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800728e:	1e73      	subs	r3, r6, #1
 8007290:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007292:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007296:	2b30      	cmp	r3, #48	@ 0x30
 8007298:	d0f8      	beq.n	800728c <_dtoa_r+0x614>
 800729a:	4647      	mov	r7, r8
 800729c:	e03b      	b.n	8007316 <_dtoa_r+0x69e>
 800729e:	4b9e      	ldr	r3, [pc, #632]	@ (8007518 <_dtoa_r+0x8a0>)
 80072a0:	f7f9 f9aa 	bl	80005f8 <__aeabi_dmul>
 80072a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072a8:	e7bc      	b.n	8007224 <_dtoa_r+0x5ac>
 80072aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80072ae:	4656      	mov	r6, sl
 80072b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072b4:	4620      	mov	r0, r4
 80072b6:	4629      	mov	r1, r5
 80072b8:	f7f9 fac8 	bl	800084c <__aeabi_ddiv>
 80072bc:	f7f9 fc4c 	bl	8000b58 <__aeabi_d2iz>
 80072c0:	4680      	mov	r8, r0
 80072c2:	f7f9 f92f 	bl	8000524 <__aeabi_i2d>
 80072c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ca:	f7f9 f995 	bl	80005f8 <__aeabi_dmul>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4620      	mov	r0, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80072da:	f7f8 ffd5 	bl	8000288 <__aeabi_dsub>
 80072de:	f806 4b01 	strb.w	r4, [r6], #1
 80072e2:	9d03      	ldr	r5, [sp, #12]
 80072e4:	eba6 040a 	sub.w	r4, r6, sl
 80072e8:	42a5      	cmp	r5, r4
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	d133      	bne.n	8007358 <_dtoa_r+0x6e0>
 80072f0:	f7f8 ffcc 	bl	800028c <__adddf3>
 80072f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072f8:	4604      	mov	r4, r0
 80072fa:	460d      	mov	r5, r1
 80072fc:	f7f9 fc0c 	bl	8000b18 <__aeabi_dcmpgt>
 8007300:	b9c0      	cbnz	r0, 8007334 <_dtoa_r+0x6bc>
 8007302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007306:	4620      	mov	r0, r4
 8007308:	4629      	mov	r1, r5
 800730a:	f7f9 fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800730e:	b110      	cbz	r0, 8007316 <_dtoa_r+0x69e>
 8007310:	f018 0f01 	tst.w	r8, #1
 8007314:	d10e      	bne.n	8007334 <_dtoa_r+0x6bc>
 8007316:	9902      	ldr	r1, [sp, #8]
 8007318:	4648      	mov	r0, r9
 800731a:	f000 fbbd 	bl	8007a98 <_Bfree>
 800731e:	2300      	movs	r3, #0
 8007320:	7033      	strb	r3, [r6, #0]
 8007322:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007324:	3701      	adds	r7, #1
 8007326:	601f      	str	r7, [r3, #0]
 8007328:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 824b 	beq.w	80077c6 <_dtoa_r+0xb4e>
 8007330:	601e      	str	r6, [r3, #0]
 8007332:	e248      	b.n	80077c6 <_dtoa_r+0xb4e>
 8007334:	46b8      	mov	r8, r7
 8007336:	4633      	mov	r3, r6
 8007338:	461e      	mov	r6, r3
 800733a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800733e:	2a39      	cmp	r2, #57	@ 0x39
 8007340:	d106      	bne.n	8007350 <_dtoa_r+0x6d8>
 8007342:	459a      	cmp	sl, r3
 8007344:	d1f8      	bne.n	8007338 <_dtoa_r+0x6c0>
 8007346:	2230      	movs	r2, #48	@ 0x30
 8007348:	f108 0801 	add.w	r8, r8, #1
 800734c:	f88a 2000 	strb.w	r2, [sl]
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	3201      	adds	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e7a0      	b.n	800729a <_dtoa_r+0x622>
 8007358:	4b6f      	ldr	r3, [pc, #444]	@ (8007518 <_dtoa_r+0x8a0>)
 800735a:	2200      	movs	r2, #0
 800735c:	f7f9 f94c 	bl	80005f8 <__aeabi_dmul>
 8007360:	2200      	movs	r2, #0
 8007362:	2300      	movs	r3, #0
 8007364:	4604      	mov	r4, r0
 8007366:	460d      	mov	r5, r1
 8007368:	f7f9 fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800736c:	2800      	cmp	r0, #0
 800736e:	d09f      	beq.n	80072b0 <_dtoa_r+0x638>
 8007370:	e7d1      	b.n	8007316 <_dtoa_r+0x69e>
 8007372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007374:	2a00      	cmp	r2, #0
 8007376:	f000 80ea 	beq.w	800754e <_dtoa_r+0x8d6>
 800737a:	9a07      	ldr	r2, [sp, #28]
 800737c:	2a01      	cmp	r2, #1
 800737e:	f300 80cd 	bgt.w	800751c <_dtoa_r+0x8a4>
 8007382:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007384:	2a00      	cmp	r2, #0
 8007386:	f000 80c1 	beq.w	800750c <_dtoa_r+0x894>
 800738a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800738e:	9c08      	ldr	r4, [sp, #32]
 8007390:	9e00      	ldr	r6, [sp, #0]
 8007392:	9a00      	ldr	r2, [sp, #0]
 8007394:	441a      	add	r2, r3
 8007396:	9200      	str	r2, [sp, #0]
 8007398:	9a06      	ldr	r2, [sp, #24]
 800739a:	2101      	movs	r1, #1
 800739c:	441a      	add	r2, r3
 800739e:	4648      	mov	r0, r9
 80073a0:	9206      	str	r2, [sp, #24]
 80073a2:	f000 fc2d 	bl	8007c00 <__i2b>
 80073a6:	4605      	mov	r5, r0
 80073a8:	b166      	cbz	r6, 80073c4 <_dtoa_r+0x74c>
 80073aa:	9b06      	ldr	r3, [sp, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd09      	ble.n	80073c4 <_dtoa_r+0x74c>
 80073b0:	42b3      	cmp	r3, r6
 80073b2:	9a00      	ldr	r2, [sp, #0]
 80073b4:	bfa8      	it	ge
 80073b6:	4633      	movge	r3, r6
 80073b8:	1ad2      	subs	r2, r2, r3
 80073ba:	9200      	str	r2, [sp, #0]
 80073bc:	9a06      	ldr	r2, [sp, #24]
 80073be:	1af6      	subs	r6, r6, r3
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	9306      	str	r3, [sp, #24]
 80073c4:	9b08      	ldr	r3, [sp, #32]
 80073c6:	b30b      	cbz	r3, 800740c <_dtoa_r+0x794>
 80073c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 80c6 	beq.w	800755c <_dtoa_r+0x8e4>
 80073d0:	2c00      	cmp	r4, #0
 80073d2:	f000 80c0 	beq.w	8007556 <_dtoa_r+0x8de>
 80073d6:	4629      	mov	r1, r5
 80073d8:	4622      	mov	r2, r4
 80073da:	4648      	mov	r0, r9
 80073dc:	f000 fcc8 	bl	8007d70 <__pow5mult>
 80073e0:	9a02      	ldr	r2, [sp, #8]
 80073e2:	4601      	mov	r1, r0
 80073e4:	4605      	mov	r5, r0
 80073e6:	4648      	mov	r0, r9
 80073e8:	f000 fc20 	bl	8007c2c <__multiply>
 80073ec:	9902      	ldr	r1, [sp, #8]
 80073ee:	4680      	mov	r8, r0
 80073f0:	4648      	mov	r0, r9
 80073f2:	f000 fb51 	bl	8007a98 <_Bfree>
 80073f6:	9b08      	ldr	r3, [sp, #32]
 80073f8:	1b1b      	subs	r3, r3, r4
 80073fa:	9308      	str	r3, [sp, #32]
 80073fc:	f000 80b1 	beq.w	8007562 <_dtoa_r+0x8ea>
 8007400:	9a08      	ldr	r2, [sp, #32]
 8007402:	4641      	mov	r1, r8
 8007404:	4648      	mov	r0, r9
 8007406:	f000 fcb3 	bl	8007d70 <__pow5mult>
 800740a:	9002      	str	r0, [sp, #8]
 800740c:	2101      	movs	r1, #1
 800740e:	4648      	mov	r0, r9
 8007410:	f000 fbf6 	bl	8007c00 <__i2b>
 8007414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007416:	4604      	mov	r4, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 81d8 	beq.w	80077ce <_dtoa_r+0xb56>
 800741e:	461a      	mov	r2, r3
 8007420:	4601      	mov	r1, r0
 8007422:	4648      	mov	r0, r9
 8007424:	f000 fca4 	bl	8007d70 <__pow5mult>
 8007428:	9b07      	ldr	r3, [sp, #28]
 800742a:	2b01      	cmp	r3, #1
 800742c:	4604      	mov	r4, r0
 800742e:	f300 809f 	bgt.w	8007570 <_dtoa_r+0x8f8>
 8007432:	9b04      	ldr	r3, [sp, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 8097 	bne.w	8007568 <_dtoa_r+0x8f0>
 800743a:	9b05      	ldr	r3, [sp, #20]
 800743c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007440:	2b00      	cmp	r3, #0
 8007442:	f040 8093 	bne.w	800756c <_dtoa_r+0x8f4>
 8007446:	9b05      	ldr	r3, [sp, #20]
 8007448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800744c:	0d1b      	lsrs	r3, r3, #20
 800744e:	051b      	lsls	r3, r3, #20
 8007450:	b133      	cbz	r3, 8007460 <_dtoa_r+0x7e8>
 8007452:	9b00      	ldr	r3, [sp, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	9b06      	ldr	r3, [sp, #24]
 800745a:	3301      	adds	r3, #1
 800745c:	9306      	str	r3, [sp, #24]
 800745e:	2301      	movs	r3, #1
 8007460:	9308      	str	r3, [sp, #32]
 8007462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 81b8 	beq.w	80077da <_dtoa_r+0xb62>
 800746a:	6923      	ldr	r3, [r4, #16]
 800746c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007470:	6918      	ldr	r0, [r3, #16]
 8007472:	f000 fb79 	bl	8007b68 <__hi0bits>
 8007476:	f1c0 0020 	rsb	r0, r0, #32
 800747a:	9b06      	ldr	r3, [sp, #24]
 800747c:	4418      	add	r0, r3
 800747e:	f010 001f 	ands.w	r0, r0, #31
 8007482:	f000 8082 	beq.w	800758a <_dtoa_r+0x912>
 8007486:	f1c0 0320 	rsb	r3, r0, #32
 800748a:	2b04      	cmp	r3, #4
 800748c:	dd73      	ble.n	8007576 <_dtoa_r+0x8fe>
 800748e:	9b00      	ldr	r3, [sp, #0]
 8007490:	f1c0 001c 	rsb	r0, r0, #28
 8007494:	4403      	add	r3, r0
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	9b06      	ldr	r3, [sp, #24]
 800749a:	4403      	add	r3, r0
 800749c:	4406      	add	r6, r0
 800749e:	9306      	str	r3, [sp, #24]
 80074a0:	9b00      	ldr	r3, [sp, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	dd05      	ble.n	80074b2 <_dtoa_r+0x83a>
 80074a6:	9902      	ldr	r1, [sp, #8]
 80074a8:	461a      	mov	r2, r3
 80074aa:	4648      	mov	r0, r9
 80074ac:	f000 fcba 	bl	8007e24 <__lshift>
 80074b0:	9002      	str	r0, [sp, #8]
 80074b2:	9b06      	ldr	r3, [sp, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dd05      	ble.n	80074c4 <_dtoa_r+0x84c>
 80074b8:	4621      	mov	r1, r4
 80074ba:	461a      	mov	r2, r3
 80074bc:	4648      	mov	r0, r9
 80074be:	f000 fcb1 	bl	8007e24 <__lshift>
 80074c2:	4604      	mov	r4, r0
 80074c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d061      	beq.n	800758e <_dtoa_r+0x916>
 80074ca:	9802      	ldr	r0, [sp, #8]
 80074cc:	4621      	mov	r1, r4
 80074ce:	f000 fd15 	bl	8007efc <__mcmp>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	da5b      	bge.n	800758e <_dtoa_r+0x916>
 80074d6:	2300      	movs	r3, #0
 80074d8:	9902      	ldr	r1, [sp, #8]
 80074da:	220a      	movs	r2, #10
 80074dc:	4648      	mov	r0, r9
 80074de:	f000 fafd 	bl	8007adc <__multadd>
 80074e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e4:	9002      	str	r0, [sp, #8]
 80074e6:	f107 38ff 	add.w	r8, r7, #4294967295
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 8177 	beq.w	80077de <_dtoa_r+0xb66>
 80074f0:	4629      	mov	r1, r5
 80074f2:	2300      	movs	r3, #0
 80074f4:	220a      	movs	r2, #10
 80074f6:	4648      	mov	r0, r9
 80074f8:	f000 faf0 	bl	8007adc <__multadd>
 80074fc:	f1bb 0f00 	cmp.w	fp, #0
 8007500:	4605      	mov	r5, r0
 8007502:	dc6f      	bgt.n	80075e4 <_dtoa_r+0x96c>
 8007504:	9b07      	ldr	r3, [sp, #28]
 8007506:	2b02      	cmp	r3, #2
 8007508:	dc49      	bgt.n	800759e <_dtoa_r+0x926>
 800750a:	e06b      	b.n	80075e4 <_dtoa_r+0x96c>
 800750c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800750e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007512:	e73c      	b.n	800738e <_dtoa_r+0x716>
 8007514:	3fe00000 	.word	0x3fe00000
 8007518:	40240000 	.word	0x40240000
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	1e5c      	subs	r4, r3, #1
 8007520:	9b08      	ldr	r3, [sp, #32]
 8007522:	42a3      	cmp	r3, r4
 8007524:	db09      	blt.n	800753a <_dtoa_r+0x8c2>
 8007526:	1b1c      	subs	r4, r3, r4
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f6bf af30 	bge.w	8007390 <_dtoa_r+0x718>
 8007530:	9b00      	ldr	r3, [sp, #0]
 8007532:	9a03      	ldr	r2, [sp, #12]
 8007534:	1a9e      	subs	r6, r3, r2
 8007536:	2300      	movs	r3, #0
 8007538:	e72b      	b.n	8007392 <_dtoa_r+0x71a>
 800753a:	9b08      	ldr	r3, [sp, #32]
 800753c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800753e:	9408      	str	r4, [sp, #32]
 8007540:	1ae3      	subs	r3, r4, r3
 8007542:	441a      	add	r2, r3
 8007544:	9e00      	ldr	r6, [sp, #0]
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	920d      	str	r2, [sp, #52]	@ 0x34
 800754a:	2400      	movs	r4, #0
 800754c:	e721      	b.n	8007392 <_dtoa_r+0x71a>
 800754e:	9c08      	ldr	r4, [sp, #32]
 8007550:	9e00      	ldr	r6, [sp, #0]
 8007552:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007554:	e728      	b.n	80073a8 <_dtoa_r+0x730>
 8007556:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800755a:	e751      	b.n	8007400 <_dtoa_r+0x788>
 800755c:	9a08      	ldr	r2, [sp, #32]
 800755e:	9902      	ldr	r1, [sp, #8]
 8007560:	e750      	b.n	8007404 <_dtoa_r+0x78c>
 8007562:	f8cd 8008 	str.w	r8, [sp, #8]
 8007566:	e751      	b.n	800740c <_dtoa_r+0x794>
 8007568:	2300      	movs	r3, #0
 800756a:	e779      	b.n	8007460 <_dtoa_r+0x7e8>
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	e777      	b.n	8007460 <_dtoa_r+0x7e8>
 8007570:	2300      	movs	r3, #0
 8007572:	9308      	str	r3, [sp, #32]
 8007574:	e779      	b.n	800746a <_dtoa_r+0x7f2>
 8007576:	d093      	beq.n	80074a0 <_dtoa_r+0x828>
 8007578:	9a00      	ldr	r2, [sp, #0]
 800757a:	331c      	adds	r3, #28
 800757c:	441a      	add	r2, r3
 800757e:	9200      	str	r2, [sp, #0]
 8007580:	9a06      	ldr	r2, [sp, #24]
 8007582:	441a      	add	r2, r3
 8007584:	441e      	add	r6, r3
 8007586:	9206      	str	r2, [sp, #24]
 8007588:	e78a      	b.n	80074a0 <_dtoa_r+0x828>
 800758a:	4603      	mov	r3, r0
 800758c:	e7f4      	b.n	8007578 <_dtoa_r+0x900>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	46b8      	mov	r8, r7
 8007594:	dc20      	bgt.n	80075d8 <_dtoa_r+0x960>
 8007596:	469b      	mov	fp, r3
 8007598:	9b07      	ldr	r3, [sp, #28]
 800759a:	2b02      	cmp	r3, #2
 800759c:	dd1e      	ble.n	80075dc <_dtoa_r+0x964>
 800759e:	f1bb 0f00 	cmp.w	fp, #0
 80075a2:	f47f adb1 	bne.w	8007108 <_dtoa_r+0x490>
 80075a6:	4621      	mov	r1, r4
 80075a8:	465b      	mov	r3, fp
 80075aa:	2205      	movs	r2, #5
 80075ac:	4648      	mov	r0, r9
 80075ae:	f000 fa95 	bl	8007adc <__multadd>
 80075b2:	4601      	mov	r1, r0
 80075b4:	4604      	mov	r4, r0
 80075b6:	9802      	ldr	r0, [sp, #8]
 80075b8:	f000 fca0 	bl	8007efc <__mcmp>
 80075bc:	2800      	cmp	r0, #0
 80075be:	f77f ada3 	ble.w	8007108 <_dtoa_r+0x490>
 80075c2:	4656      	mov	r6, sl
 80075c4:	2331      	movs	r3, #49	@ 0x31
 80075c6:	f806 3b01 	strb.w	r3, [r6], #1
 80075ca:	f108 0801 	add.w	r8, r8, #1
 80075ce:	e59f      	b.n	8007110 <_dtoa_r+0x498>
 80075d0:	9c03      	ldr	r4, [sp, #12]
 80075d2:	46b8      	mov	r8, r7
 80075d4:	4625      	mov	r5, r4
 80075d6:	e7f4      	b.n	80075c2 <_dtoa_r+0x94a>
 80075d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80075dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 8101 	beq.w	80077e6 <_dtoa_r+0xb6e>
 80075e4:	2e00      	cmp	r6, #0
 80075e6:	dd05      	ble.n	80075f4 <_dtoa_r+0x97c>
 80075e8:	4629      	mov	r1, r5
 80075ea:	4632      	mov	r2, r6
 80075ec:	4648      	mov	r0, r9
 80075ee:	f000 fc19 	bl	8007e24 <__lshift>
 80075f2:	4605      	mov	r5, r0
 80075f4:	9b08      	ldr	r3, [sp, #32]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d05c      	beq.n	80076b4 <_dtoa_r+0xa3c>
 80075fa:	6869      	ldr	r1, [r5, #4]
 80075fc:	4648      	mov	r0, r9
 80075fe:	f000 fa0b 	bl	8007a18 <_Balloc>
 8007602:	4606      	mov	r6, r0
 8007604:	b928      	cbnz	r0, 8007612 <_dtoa_r+0x99a>
 8007606:	4b82      	ldr	r3, [pc, #520]	@ (8007810 <_dtoa_r+0xb98>)
 8007608:	4602      	mov	r2, r0
 800760a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800760e:	f7ff bb4a 	b.w	8006ca6 <_dtoa_r+0x2e>
 8007612:	692a      	ldr	r2, [r5, #16]
 8007614:	3202      	adds	r2, #2
 8007616:	0092      	lsls	r2, r2, #2
 8007618:	f105 010c 	add.w	r1, r5, #12
 800761c:	300c      	adds	r0, #12
 800761e:	f000 ffa3 	bl	8008568 <memcpy>
 8007622:	2201      	movs	r2, #1
 8007624:	4631      	mov	r1, r6
 8007626:	4648      	mov	r0, r9
 8007628:	f000 fbfc 	bl	8007e24 <__lshift>
 800762c:	f10a 0301 	add.w	r3, sl, #1
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	eb0a 030b 	add.w	r3, sl, fp
 8007636:	9308      	str	r3, [sp, #32]
 8007638:	9b04      	ldr	r3, [sp, #16]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	462f      	mov	r7, r5
 8007640:	9306      	str	r3, [sp, #24]
 8007642:	4605      	mov	r5, r0
 8007644:	9b00      	ldr	r3, [sp, #0]
 8007646:	9802      	ldr	r0, [sp, #8]
 8007648:	4621      	mov	r1, r4
 800764a:	f103 3bff 	add.w	fp, r3, #4294967295
 800764e:	f7ff fa8a 	bl	8006b66 <quorem>
 8007652:	4603      	mov	r3, r0
 8007654:	3330      	adds	r3, #48	@ 0x30
 8007656:	9003      	str	r0, [sp, #12]
 8007658:	4639      	mov	r1, r7
 800765a:	9802      	ldr	r0, [sp, #8]
 800765c:	9309      	str	r3, [sp, #36]	@ 0x24
 800765e:	f000 fc4d 	bl	8007efc <__mcmp>
 8007662:	462a      	mov	r2, r5
 8007664:	9004      	str	r0, [sp, #16]
 8007666:	4621      	mov	r1, r4
 8007668:	4648      	mov	r0, r9
 800766a:	f000 fc63 	bl	8007f34 <__mdiff>
 800766e:	68c2      	ldr	r2, [r0, #12]
 8007670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007672:	4606      	mov	r6, r0
 8007674:	bb02      	cbnz	r2, 80076b8 <_dtoa_r+0xa40>
 8007676:	4601      	mov	r1, r0
 8007678:	9802      	ldr	r0, [sp, #8]
 800767a:	f000 fc3f 	bl	8007efc <__mcmp>
 800767e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007680:	4602      	mov	r2, r0
 8007682:	4631      	mov	r1, r6
 8007684:	4648      	mov	r0, r9
 8007686:	920c      	str	r2, [sp, #48]	@ 0x30
 8007688:	9309      	str	r3, [sp, #36]	@ 0x24
 800768a:	f000 fa05 	bl	8007a98 <_Bfree>
 800768e:	9b07      	ldr	r3, [sp, #28]
 8007690:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007692:	9e00      	ldr	r6, [sp, #0]
 8007694:	ea42 0103 	orr.w	r1, r2, r3
 8007698:	9b06      	ldr	r3, [sp, #24]
 800769a:	4319      	orrs	r1, r3
 800769c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800769e:	d10d      	bne.n	80076bc <_dtoa_r+0xa44>
 80076a0:	2b39      	cmp	r3, #57	@ 0x39
 80076a2:	d027      	beq.n	80076f4 <_dtoa_r+0xa7c>
 80076a4:	9a04      	ldr	r2, [sp, #16]
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	dd01      	ble.n	80076ae <_dtoa_r+0xa36>
 80076aa:	9b03      	ldr	r3, [sp, #12]
 80076ac:	3331      	adds	r3, #49	@ 0x31
 80076ae:	f88b 3000 	strb.w	r3, [fp]
 80076b2:	e52e      	b.n	8007112 <_dtoa_r+0x49a>
 80076b4:	4628      	mov	r0, r5
 80076b6:	e7b9      	b.n	800762c <_dtoa_r+0x9b4>
 80076b8:	2201      	movs	r2, #1
 80076ba:	e7e2      	b.n	8007682 <_dtoa_r+0xa0a>
 80076bc:	9904      	ldr	r1, [sp, #16]
 80076be:	2900      	cmp	r1, #0
 80076c0:	db04      	blt.n	80076cc <_dtoa_r+0xa54>
 80076c2:	9807      	ldr	r0, [sp, #28]
 80076c4:	4301      	orrs	r1, r0
 80076c6:	9806      	ldr	r0, [sp, #24]
 80076c8:	4301      	orrs	r1, r0
 80076ca:	d120      	bne.n	800770e <_dtoa_r+0xa96>
 80076cc:	2a00      	cmp	r2, #0
 80076ce:	ddee      	ble.n	80076ae <_dtoa_r+0xa36>
 80076d0:	9902      	ldr	r1, [sp, #8]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	2201      	movs	r2, #1
 80076d6:	4648      	mov	r0, r9
 80076d8:	f000 fba4 	bl	8007e24 <__lshift>
 80076dc:	4621      	mov	r1, r4
 80076de:	9002      	str	r0, [sp, #8]
 80076e0:	f000 fc0c 	bl	8007efc <__mcmp>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	9b00      	ldr	r3, [sp, #0]
 80076e8:	dc02      	bgt.n	80076f0 <_dtoa_r+0xa78>
 80076ea:	d1e0      	bne.n	80076ae <_dtoa_r+0xa36>
 80076ec:	07da      	lsls	r2, r3, #31
 80076ee:	d5de      	bpl.n	80076ae <_dtoa_r+0xa36>
 80076f0:	2b39      	cmp	r3, #57	@ 0x39
 80076f2:	d1da      	bne.n	80076aa <_dtoa_r+0xa32>
 80076f4:	2339      	movs	r3, #57	@ 0x39
 80076f6:	f88b 3000 	strb.w	r3, [fp]
 80076fa:	4633      	mov	r3, r6
 80076fc:	461e      	mov	r6, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007704:	2a39      	cmp	r2, #57	@ 0x39
 8007706:	d04e      	beq.n	80077a6 <_dtoa_r+0xb2e>
 8007708:	3201      	adds	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e501      	b.n	8007112 <_dtoa_r+0x49a>
 800770e:	2a00      	cmp	r2, #0
 8007710:	dd03      	ble.n	800771a <_dtoa_r+0xaa2>
 8007712:	2b39      	cmp	r3, #57	@ 0x39
 8007714:	d0ee      	beq.n	80076f4 <_dtoa_r+0xa7c>
 8007716:	3301      	adds	r3, #1
 8007718:	e7c9      	b.n	80076ae <_dtoa_r+0xa36>
 800771a:	9a00      	ldr	r2, [sp, #0]
 800771c:	9908      	ldr	r1, [sp, #32]
 800771e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007722:	428a      	cmp	r2, r1
 8007724:	d028      	beq.n	8007778 <_dtoa_r+0xb00>
 8007726:	9902      	ldr	r1, [sp, #8]
 8007728:	2300      	movs	r3, #0
 800772a:	220a      	movs	r2, #10
 800772c:	4648      	mov	r0, r9
 800772e:	f000 f9d5 	bl	8007adc <__multadd>
 8007732:	42af      	cmp	r7, r5
 8007734:	9002      	str	r0, [sp, #8]
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	f04f 020a 	mov.w	r2, #10
 800773e:	4639      	mov	r1, r7
 8007740:	4648      	mov	r0, r9
 8007742:	d107      	bne.n	8007754 <_dtoa_r+0xadc>
 8007744:	f000 f9ca 	bl	8007adc <__multadd>
 8007748:	4607      	mov	r7, r0
 800774a:	4605      	mov	r5, r0
 800774c:	9b00      	ldr	r3, [sp, #0]
 800774e:	3301      	adds	r3, #1
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	e777      	b.n	8007644 <_dtoa_r+0x9cc>
 8007754:	f000 f9c2 	bl	8007adc <__multadd>
 8007758:	4629      	mov	r1, r5
 800775a:	4607      	mov	r7, r0
 800775c:	2300      	movs	r3, #0
 800775e:	220a      	movs	r2, #10
 8007760:	4648      	mov	r0, r9
 8007762:	f000 f9bb 	bl	8007adc <__multadd>
 8007766:	4605      	mov	r5, r0
 8007768:	e7f0      	b.n	800774c <_dtoa_r+0xad4>
 800776a:	f1bb 0f00 	cmp.w	fp, #0
 800776e:	bfcc      	ite	gt
 8007770:	465e      	movgt	r6, fp
 8007772:	2601      	movle	r6, #1
 8007774:	4456      	add	r6, sl
 8007776:	2700      	movs	r7, #0
 8007778:	9902      	ldr	r1, [sp, #8]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	2201      	movs	r2, #1
 800777e:	4648      	mov	r0, r9
 8007780:	f000 fb50 	bl	8007e24 <__lshift>
 8007784:	4621      	mov	r1, r4
 8007786:	9002      	str	r0, [sp, #8]
 8007788:	f000 fbb8 	bl	8007efc <__mcmp>
 800778c:	2800      	cmp	r0, #0
 800778e:	dcb4      	bgt.n	80076fa <_dtoa_r+0xa82>
 8007790:	d102      	bne.n	8007798 <_dtoa_r+0xb20>
 8007792:	9b00      	ldr	r3, [sp, #0]
 8007794:	07db      	lsls	r3, r3, #31
 8007796:	d4b0      	bmi.n	80076fa <_dtoa_r+0xa82>
 8007798:	4633      	mov	r3, r6
 800779a:	461e      	mov	r6, r3
 800779c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077a0:	2a30      	cmp	r2, #48	@ 0x30
 80077a2:	d0fa      	beq.n	800779a <_dtoa_r+0xb22>
 80077a4:	e4b5      	b.n	8007112 <_dtoa_r+0x49a>
 80077a6:	459a      	cmp	sl, r3
 80077a8:	d1a8      	bne.n	80076fc <_dtoa_r+0xa84>
 80077aa:	2331      	movs	r3, #49	@ 0x31
 80077ac:	f108 0801 	add.w	r8, r8, #1
 80077b0:	f88a 3000 	strb.w	r3, [sl]
 80077b4:	e4ad      	b.n	8007112 <_dtoa_r+0x49a>
 80077b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007814 <_dtoa_r+0xb9c>
 80077bc:	b11b      	cbz	r3, 80077c6 <_dtoa_r+0xb4e>
 80077be:	f10a 0308 	add.w	r3, sl, #8
 80077c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	4650      	mov	r0, sl
 80077c8:	b017      	add	sp, #92	@ 0x5c
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	9b07      	ldr	r3, [sp, #28]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	f77f ae2e 	ble.w	8007432 <_dtoa_r+0x7ba>
 80077d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077d8:	9308      	str	r3, [sp, #32]
 80077da:	2001      	movs	r0, #1
 80077dc:	e64d      	b.n	800747a <_dtoa_r+0x802>
 80077de:	f1bb 0f00 	cmp.w	fp, #0
 80077e2:	f77f aed9 	ble.w	8007598 <_dtoa_r+0x920>
 80077e6:	4656      	mov	r6, sl
 80077e8:	9802      	ldr	r0, [sp, #8]
 80077ea:	4621      	mov	r1, r4
 80077ec:	f7ff f9bb 	bl	8006b66 <quorem>
 80077f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80077f4:	f806 3b01 	strb.w	r3, [r6], #1
 80077f8:	eba6 020a 	sub.w	r2, r6, sl
 80077fc:	4593      	cmp	fp, r2
 80077fe:	ddb4      	ble.n	800776a <_dtoa_r+0xaf2>
 8007800:	9902      	ldr	r1, [sp, #8]
 8007802:	2300      	movs	r3, #0
 8007804:	220a      	movs	r2, #10
 8007806:	4648      	mov	r0, r9
 8007808:	f000 f968 	bl	8007adc <__multadd>
 800780c:	9002      	str	r0, [sp, #8]
 800780e:	e7eb      	b.n	80077e8 <_dtoa_r+0xb70>
 8007810:	08008d74 	.word	0x08008d74
 8007814:	08008cf8 	.word	0x08008cf8

08007818 <_free_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4605      	mov	r5, r0
 800781c:	2900      	cmp	r1, #0
 800781e:	d041      	beq.n	80078a4 <_free_r+0x8c>
 8007820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007824:	1f0c      	subs	r4, r1, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	bfb8      	it	lt
 800782a:	18e4      	addlt	r4, r4, r3
 800782c:	f000 f8e8 	bl	8007a00 <__malloc_lock>
 8007830:	4a1d      	ldr	r2, [pc, #116]	@ (80078a8 <_free_r+0x90>)
 8007832:	6813      	ldr	r3, [r2, #0]
 8007834:	b933      	cbnz	r3, 8007844 <_free_r+0x2c>
 8007836:	6063      	str	r3, [r4, #4]
 8007838:	6014      	str	r4, [r2, #0]
 800783a:	4628      	mov	r0, r5
 800783c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007840:	f000 b8e4 	b.w	8007a0c <__malloc_unlock>
 8007844:	42a3      	cmp	r3, r4
 8007846:	d908      	bls.n	800785a <_free_r+0x42>
 8007848:	6820      	ldr	r0, [r4, #0]
 800784a:	1821      	adds	r1, r4, r0
 800784c:	428b      	cmp	r3, r1
 800784e:	bf01      	itttt	eq
 8007850:	6819      	ldreq	r1, [r3, #0]
 8007852:	685b      	ldreq	r3, [r3, #4]
 8007854:	1809      	addeq	r1, r1, r0
 8007856:	6021      	streq	r1, [r4, #0]
 8007858:	e7ed      	b.n	8007836 <_free_r+0x1e>
 800785a:	461a      	mov	r2, r3
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	b10b      	cbz	r3, 8007864 <_free_r+0x4c>
 8007860:	42a3      	cmp	r3, r4
 8007862:	d9fa      	bls.n	800785a <_free_r+0x42>
 8007864:	6811      	ldr	r1, [r2, #0]
 8007866:	1850      	adds	r0, r2, r1
 8007868:	42a0      	cmp	r0, r4
 800786a:	d10b      	bne.n	8007884 <_free_r+0x6c>
 800786c:	6820      	ldr	r0, [r4, #0]
 800786e:	4401      	add	r1, r0
 8007870:	1850      	adds	r0, r2, r1
 8007872:	4283      	cmp	r3, r0
 8007874:	6011      	str	r1, [r2, #0]
 8007876:	d1e0      	bne.n	800783a <_free_r+0x22>
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	6053      	str	r3, [r2, #4]
 800787e:	4408      	add	r0, r1
 8007880:	6010      	str	r0, [r2, #0]
 8007882:	e7da      	b.n	800783a <_free_r+0x22>
 8007884:	d902      	bls.n	800788c <_free_r+0x74>
 8007886:	230c      	movs	r3, #12
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	e7d6      	b.n	800783a <_free_r+0x22>
 800788c:	6820      	ldr	r0, [r4, #0]
 800788e:	1821      	adds	r1, r4, r0
 8007890:	428b      	cmp	r3, r1
 8007892:	bf04      	itt	eq
 8007894:	6819      	ldreq	r1, [r3, #0]
 8007896:	685b      	ldreq	r3, [r3, #4]
 8007898:	6063      	str	r3, [r4, #4]
 800789a:	bf04      	itt	eq
 800789c:	1809      	addeq	r1, r1, r0
 800789e:	6021      	streq	r1, [r4, #0]
 80078a0:	6054      	str	r4, [r2, #4]
 80078a2:	e7ca      	b.n	800783a <_free_r+0x22>
 80078a4:	bd38      	pop	{r3, r4, r5, pc}
 80078a6:	bf00      	nop
 80078a8:	2000058c 	.word	0x2000058c

080078ac <malloc>:
 80078ac:	4b02      	ldr	r3, [pc, #8]	@ (80078b8 <malloc+0xc>)
 80078ae:	4601      	mov	r1, r0
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	f000 b825 	b.w	8007900 <_malloc_r>
 80078b6:	bf00      	nop
 80078b8:	20000018 	.word	0x20000018

080078bc <sbrk_aligned>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	4e0f      	ldr	r6, [pc, #60]	@ (80078fc <sbrk_aligned+0x40>)
 80078c0:	460c      	mov	r4, r1
 80078c2:	6831      	ldr	r1, [r6, #0]
 80078c4:	4605      	mov	r5, r0
 80078c6:	b911      	cbnz	r1, 80078ce <sbrk_aligned+0x12>
 80078c8:	f000 fe3e 	bl	8008548 <_sbrk_r>
 80078cc:	6030      	str	r0, [r6, #0]
 80078ce:	4621      	mov	r1, r4
 80078d0:	4628      	mov	r0, r5
 80078d2:	f000 fe39 	bl	8008548 <_sbrk_r>
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	d103      	bne.n	80078e2 <sbrk_aligned+0x26>
 80078da:	f04f 34ff 	mov.w	r4, #4294967295
 80078de:	4620      	mov	r0, r4
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
 80078e2:	1cc4      	adds	r4, r0, #3
 80078e4:	f024 0403 	bic.w	r4, r4, #3
 80078e8:	42a0      	cmp	r0, r4
 80078ea:	d0f8      	beq.n	80078de <sbrk_aligned+0x22>
 80078ec:	1a21      	subs	r1, r4, r0
 80078ee:	4628      	mov	r0, r5
 80078f0:	f000 fe2a 	bl	8008548 <_sbrk_r>
 80078f4:	3001      	adds	r0, #1
 80078f6:	d1f2      	bne.n	80078de <sbrk_aligned+0x22>
 80078f8:	e7ef      	b.n	80078da <sbrk_aligned+0x1e>
 80078fa:	bf00      	nop
 80078fc:	20000588 	.word	0x20000588

08007900 <_malloc_r>:
 8007900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007904:	1ccd      	adds	r5, r1, #3
 8007906:	f025 0503 	bic.w	r5, r5, #3
 800790a:	3508      	adds	r5, #8
 800790c:	2d0c      	cmp	r5, #12
 800790e:	bf38      	it	cc
 8007910:	250c      	movcc	r5, #12
 8007912:	2d00      	cmp	r5, #0
 8007914:	4606      	mov	r6, r0
 8007916:	db01      	blt.n	800791c <_malloc_r+0x1c>
 8007918:	42a9      	cmp	r1, r5
 800791a:	d904      	bls.n	8007926 <_malloc_r+0x26>
 800791c:	230c      	movs	r3, #12
 800791e:	6033      	str	r3, [r6, #0]
 8007920:	2000      	movs	r0, #0
 8007922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079fc <_malloc_r+0xfc>
 800792a:	f000 f869 	bl	8007a00 <__malloc_lock>
 800792e:	f8d8 3000 	ldr.w	r3, [r8]
 8007932:	461c      	mov	r4, r3
 8007934:	bb44      	cbnz	r4, 8007988 <_malloc_r+0x88>
 8007936:	4629      	mov	r1, r5
 8007938:	4630      	mov	r0, r6
 800793a:	f7ff ffbf 	bl	80078bc <sbrk_aligned>
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	4604      	mov	r4, r0
 8007942:	d158      	bne.n	80079f6 <_malloc_r+0xf6>
 8007944:	f8d8 4000 	ldr.w	r4, [r8]
 8007948:	4627      	mov	r7, r4
 800794a:	2f00      	cmp	r7, #0
 800794c:	d143      	bne.n	80079d6 <_malloc_r+0xd6>
 800794e:	2c00      	cmp	r4, #0
 8007950:	d04b      	beq.n	80079ea <_malloc_r+0xea>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	4639      	mov	r1, r7
 8007956:	4630      	mov	r0, r6
 8007958:	eb04 0903 	add.w	r9, r4, r3
 800795c:	f000 fdf4 	bl	8008548 <_sbrk_r>
 8007960:	4581      	cmp	r9, r0
 8007962:	d142      	bne.n	80079ea <_malloc_r+0xea>
 8007964:	6821      	ldr	r1, [r4, #0]
 8007966:	1a6d      	subs	r5, r5, r1
 8007968:	4629      	mov	r1, r5
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff ffa6 	bl	80078bc <sbrk_aligned>
 8007970:	3001      	adds	r0, #1
 8007972:	d03a      	beq.n	80079ea <_malloc_r+0xea>
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	442b      	add	r3, r5
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	f8d8 3000 	ldr.w	r3, [r8]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	bb62      	cbnz	r2, 80079dc <_malloc_r+0xdc>
 8007982:	f8c8 7000 	str.w	r7, [r8]
 8007986:	e00f      	b.n	80079a8 <_malloc_r+0xa8>
 8007988:	6822      	ldr	r2, [r4, #0]
 800798a:	1b52      	subs	r2, r2, r5
 800798c:	d420      	bmi.n	80079d0 <_malloc_r+0xd0>
 800798e:	2a0b      	cmp	r2, #11
 8007990:	d917      	bls.n	80079c2 <_malloc_r+0xc2>
 8007992:	1961      	adds	r1, r4, r5
 8007994:	42a3      	cmp	r3, r4
 8007996:	6025      	str	r5, [r4, #0]
 8007998:	bf18      	it	ne
 800799a:	6059      	strne	r1, [r3, #4]
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	bf08      	it	eq
 80079a0:	f8c8 1000 	streq.w	r1, [r8]
 80079a4:	5162      	str	r2, [r4, r5]
 80079a6:	604b      	str	r3, [r1, #4]
 80079a8:	4630      	mov	r0, r6
 80079aa:	f000 f82f 	bl	8007a0c <__malloc_unlock>
 80079ae:	f104 000b 	add.w	r0, r4, #11
 80079b2:	1d23      	adds	r3, r4, #4
 80079b4:	f020 0007 	bic.w	r0, r0, #7
 80079b8:	1ac2      	subs	r2, r0, r3
 80079ba:	bf1c      	itt	ne
 80079bc:	1a1b      	subne	r3, r3, r0
 80079be:	50a3      	strne	r3, [r4, r2]
 80079c0:	e7af      	b.n	8007922 <_malloc_r+0x22>
 80079c2:	6862      	ldr	r2, [r4, #4]
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	bf0c      	ite	eq
 80079c8:	f8c8 2000 	streq.w	r2, [r8]
 80079cc:	605a      	strne	r2, [r3, #4]
 80079ce:	e7eb      	b.n	80079a8 <_malloc_r+0xa8>
 80079d0:	4623      	mov	r3, r4
 80079d2:	6864      	ldr	r4, [r4, #4]
 80079d4:	e7ae      	b.n	8007934 <_malloc_r+0x34>
 80079d6:	463c      	mov	r4, r7
 80079d8:	687f      	ldr	r7, [r7, #4]
 80079da:	e7b6      	b.n	800794a <_malloc_r+0x4a>
 80079dc:	461a      	mov	r2, r3
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d1fb      	bne.n	80079dc <_malloc_r+0xdc>
 80079e4:	2300      	movs	r3, #0
 80079e6:	6053      	str	r3, [r2, #4]
 80079e8:	e7de      	b.n	80079a8 <_malloc_r+0xa8>
 80079ea:	230c      	movs	r3, #12
 80079ec:	6033      	str	r3, [r6, #0]
 80079ee:	4630      	mov	r0, r6
 80079f0:	f000 f80c 	bl	8007a0c <__malloc_unlock>
 80079f4:	e794      	b.n	8007920 <_malloc_r+0x20>
 80079f6:	6005      	str	r5, [r0, #0]
 80079f8:	e7d6      	b.n	80079a8 <_malloc_r+0xa8>
 80079fa:	bf00      	nop
 80079fc:	2000058c 	.word	0x2000058c

08007a00 <__malloc_lock>:
 8007a00:	4801      	ldr	r0, [pc, #4]	@ (8007a08 <__malloc_lock+0x8>)
 8007a02:	f7ff b8ae 	b.w	8006b62 <__retarget_lock_acquire_recursive>
 8007a06:	bf00      	nop
 8007a08:	20000584 	.word	0x20000584

08007a0c <__malloc_unlock>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	@ (8007a14 <__malloc_unlock+0x8>)
 8007a0e:	f7ff b8a9 	b.w	8006b64 <__retarget_lock_release_recursive>
 8007a12:	bf00      	nop
 8007a14:	20000584 	.word	0x20000584

08007a18 <_Balloc>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	69c6      	ldr	r6, [r0, #28]
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	460d      	mov	r5, r1
 8007a20:	b976      	cbnz	r6, 8007a40 <_Balloc+0x28>
 8007a22:	2010      	movs	r0, #16
 8007a24:	f7ff ff42 	bl	80078ac <malloc>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	61e0      	str	r0, [r4, #28]
 8007a2c:	b920      	cbnz	r0, 8007a38 <_Balloc+0x20>
 8007a2e:	4b18      	ldr	r3, [pc, #96]	@ (8007a90 <_Balloc+0x78>)
 8007a30:	4818      	ldr	r0, [pc, #96]	@ (8007a94 <_Balloc+0x7c>)
 8007a32:	216b      	movs	r1, #107	@ 0x6b
 8007a34:	f000 fda6 	bl	8008584 <__assert_func>
 8007a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a3c:	6006      	str	r6, [r0, #0]
 8007a3e:	60c6      	str	r6, [r0, #12]
 8007a40:	69e6      	ldr	r6, [r4, #28]
 8007a42:	68f3      	ldr	r3, [r6, #12]
 8007a44:	b183      	cbz	r3, 8007a68 <_Balloc+0x50>
 8007a46:	69e3      	ldr	r3, [r4, #28]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a4e:	b9b8      	cbnz	r0, 8007a80 <_Balloc+0x68>
 8007a50:	2101      	movs	r1, #1
 8007a52:	fa01 f605 	lsl.w	r6, r1, r5
 8007a56:	1d72      	adds	r2, r6, #5
 8007a58:	0092      	lsls	r2, r2, #2
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fdb0 	bl	80085c0 <_calloc_r>
 8007a60:	b160      	cbz	r0, 8007a7c <_Balloc+0x64>
 8007a62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a66:	e00e      	b.n	8007a86 <_Balloc+0x6e>
 8007a68:	2221      	movs	r2, #33	@ 0x21
 8007a6a:	2104      	movs	r1, #4
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 fda7 	bl	80085c0 <_calloc_r>
 8007a72:	69e3      	ldr	r3, [r4, #28]
 8007a74:	60f0      	str	r0, [r6, #12]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e4      	bne.n	8007a46 <_Balloc+0x2e>
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	6802      	ldr	r2, [r0, #0]
 8007a82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a86:	2300      	movs	r3, #0
 8007a88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a8c:	e7f7      	b.n	8007a7e <_Balloc+0x66>
 8007a8e:	bf00      	nop
 8007a90:	08008d05 	.word	0x08008d05
 8007a94:	08008d85 	.word	0x08008d85

08007a98 <_Bfree>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	69c6      	ldr	r6, [r0, #28]
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	b976      	cbnz	r6, 8007ac0 <_Bfree+0x28>
 8007aa2:	2010      	movs	r0, #16
 8007aa4:	f7ff ff02 	bl	80078ac <malloc>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	61e8      	str	r0, [r5, #28]
 8007aac:	b920      	cbnz	r0, 8007ab8 <_Bfree+0x20>
 8007aae:	4b09      	ldr	r3, [pc, #36]	@ (8007ad4 <_Bfree+0x3c>)
 8007ab0:	4809      	ldr	r0, [pc, #36]	@ (8007ad8 <_Bfree+0x40>)
 8007ab2:	218f      	movs	r1, #143	@ 0x8f
 8007ab4:	f000 fd66 	bl	8008584 <__assert_func>
 8007ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007abc:	6006      	str	r6, [r0, #0]
 8007abe:	60c6      	str	r6, [r0, #12]
 8007ac0:	b13c      	cbz	r4, 8007ad2 <_Bfree+0x3a>
 8007ac2:	69eb      	ldr	r3, [r5, #28]
 8007ac4:	6862      	ldr	r2, [r4, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007acc:	6021      	str	r1, [r4, #0]
 8007ace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	08008d05 	.word	0x08008d05
 8007ad8:	08008d85 	.word	0x08008d85

08007adc <__multadd>:
 8007adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae0:	690d      	ldr	r5, [r1, #16]
 8007ae2:	4607      	mov	r7, r0
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	461e      	mov	r6, r3
 8007ae8:	f101 0c14 	add.w	ip, r1, #20
 8007aec:	2000      	movs	r0, #0
 8007aee:	f8dc 3000 	ldr.w	r3, [ip]
 8007af2:	b299      	uxth	r1, r3
 8007af4:	fb02 6101 	mla	r1, r2, r1, r6
 8007af8:	0c1e      	lsrs	r6, r3, #16
 8007afa:	0c0b      	lsrs	r3, r1, #16
 8007afc:	fb02 3306 	mla	r3, r2, r6, r3
 8007b00:	b289      	uxth	r1, r1
 8007b02:	3001      	adds	r0, #1
 8007b04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b08:	4285      	cmp	r5, r0
 8007b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b12:	dcec      	bgt.n	8007aee <__multadd+0x12>
 8007b14:	b30e      	cbz	r6, 8007b5a <__multadd+0x7e>
 8007b16:	68a3      	ldr	r3, [r4, #8]
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	dc19      	bgt.n	8007b50 <__multadd+0x74>
 8007b1c:	6861      	ldr	r1, [r4, #4]
 8007b1e:	4638      	mov	r0, r7
 8007b20:	3101      	adds	r1, #1
 8007b22:	f7ff ff79 	bl	8007a18 <_Balloc>
 8007b26:	4680      	mov	r8, r0
 8007b28:	b928      	cbnz	r0, 8007b36 <__multadd+0x5a>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b60 <__multadd+0x84>)
 8007b2e:	480d      	ldr	r0, [pc, #52]	@ (8007b64 <__multadd+0x88>)
 8007b30:	21ba      	movs	r1, #186	@ 0xba
 8007b32:	f000 fd27 	bl	8008584 <__assert_func>
 8007b36:	6922      	ldr	r2, [r4, #16]
 8007b38:	3202      	adds	r2, #2
 8007b3a:	f104 010c 	add.w	r1, r4, #12
 8007b3e:	0092      	lsls	r2, r2, #2
 8007b40:	300c      	adds	r0, #12
 8007b42:	f000 fd11 	bl	8008568 <memcpy>
 8007b46:	4621      	mov	r1, r4
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f7ff ffa5 	bl	8007a98 <_Bfree>
 8007b4e:	4644      	mov	r4, r8
 8007b50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b54:	3501      	adds	r5, #1
 8007b56:	615e      	str	r6, [r3, #20]
 8007b58:	6125      	str	r5, [r4, #16]
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b60:	08008d74 	.word	0x08008d74
 8007b64:	08008d85 	.word	0x08008d85

08007b68 <__hi0bits>:
 8007b68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	bf36      	itet	cc
 8007b70:	0403      	lslcc	r3, r0, #16
 8007b72:	2000      	movcs	r0, #0
 8007b74:	2010      	movcc	r0, #16
 8007b76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b7a:	bf3c      	itt	cc
 8007b7c:	021b      	lslcc	r3, r3, #8
 8007b7e:	3008      	addcc	r0, #8
 8007b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b84:	bf3c      	itt	cc
 8007b86:	011b      	lslcc	r3, r3, #4
 8007b88:	3004      	addcc	r0, #4
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8e:	bf3c      	itt	cc
 8007b90:	009b      	lslcc	r3, r3, #2
 8007b92:	3002      	addcc	r0, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	db05      	blt.n	8007ba4 <__hi0bits+0x3c>
 8007b98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b9c:	f100 0001 	add.w	r0, r0, #1
 8007ba0:	bf08      	it	eq
 8007ba2:	2020      	moveq	r0, #32
 8007ba4:	4770      	bx	lr

08007ba6 <__lo0bits>:
 8007ba6:	6803      	ldr	r3, [r0, #0]
 8007ba8:	4602      	mov	r2, r0
 8007baa:	f013 0007 	ands.w	r0, r3, #7
 8007bae:	d00b      	beq.n	8007bc8 <__lo0bits+0x22>
 8007bb0:	07d9      	lsls	r1, r3, #31
 8007bb2:	d421      	bmi.n	8007bf8 <__lo0bits+0x52>
 8007bb4:	0798      	lsls	r0, r3, #30
 8007bb6:	bf49      	itett	mi
 8007bb8:	085b      	lsrmi	r3, r3, #1
 8007bba:	089b      	lsrpl	r3, r3, #2
 8007bbc:	2001      	movmi	r0, #1
 8007bbe:	6013      	strmi	r3, [r2, #0]
 8007bc0:	bf5c      	itt	pl
 8007bc2:	6013      	strpl	r3, [r2, #0]
 8007bc4:	2002      	movpl	r0, #2
 8007bc6:	4770      	bx	lr
 8007bc8:	b299      	uxth	r1, r3
 8007bca:	b909      	cbnz	r1, 8007bd0 <__lo0bits+0x2a>
 8007bcc:	0c1b      	lsrs	r3, r3, #16
 8007bce:	2010      	movs	r0, #16
 8007bd0:	b2d9      	uxtb	r1, r3
 8007bd2:	b909      	cbnz	r1, 8007bd8 <__lo0bits+0x32>
 8007bd4:	3008      	adds	r0, #8
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	0719      	lsls	r1, r3, #28
 8007bda:	bf04      	itt	eq
 8007bdc:	091b      	lsreq	r3, r3, #4
 8007bde:	3004      	addeq	r0, #4
 8007be0:	0799      	lsls	r1, r3, #30
 8007be2:	bf04      	itt	eq
 8007be4:	089b      	lsreq	r3, r3, #2
 8007be6:	3002      	addeq	r0, #2
 8007be8:	07d9      	lsls	r1, r3, #31
 8007bea:	d403      	bmi.n	8007bf4 <__lo0bits+0x4e>
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	f100 0001 	add.w	r0, r0, #1
 8007bf2:	d003      	beq.n	8007bfc <__lo0bits+0x56>
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	4770      	bx	lr
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	4770      	bx	lr
 8007bfc:	2020      	movs	r0, #32
 8007bfe:	4770      	bx	lr

08007c00 <__i2b>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	460c      	mov	r4, r1
 8007c04:	2101      	movs	r1, #1
 8007c06:	f7ff ff07 	bl	8007a18 <_Balloc>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	b928      	cbnz	r0, 8007c1a <__i2b+0x1a>
 8007c0e:	4b05      	ldr	r3, [pc, #20]	@ (8007c24 <__i2b+0x24>)
 8007c10:	4805      	ldr	r0, [pc, #20]	@ (8007c28 <__i2b+0x28>)
 8007c12:	f240 1145 	movw	r1, #325	@ 0x145
 8007c16:	f000 fcb5 	bl	8008584 <__assert_func>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	6144      	str	r4, [r0, #20]
 8007c1e:	6103      	str	r3, [r0, #16]
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	bf00      	nop
 8007c24:	08008d74 	.word	0x08008d74
 8007c28:	08008d85 	.word	0x08008d85

08007c2c <__multiply>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	4617      	mov	r7, r2
 8007c32:	690a      	ldr	r2, [r1, #16]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	bfa8      	it	ge
 8007c3a:	463b      	movge	r3, r7
 8007c3c:	4689      	mov	r9, r1
 8007c3e:	bfa4      	itt	ge
 8007c40:	460f      	movge	r7, r1
 8007c42:	4699      	movge	r9, r3
 8007c44:	693d      	ldr	r5, [r7, #16]
 8007c46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	eb05 060a 	add.w	r6, r5, sl
 8007c52:	42b3      	cmp	r3, r6
 8007c54:	b085      	sub	sp, #20
 8007c56:	bfb8      	it	lt
 8007c58:	3101      	addlt	r1, #1
 8007c5a:	f7ff fedd 	bl	8007a18 <_Balloc>
 8007c5e:	b930      	cbnz	r0, 8007c6e <__multiply+0x42>
 8007c60:	4602      	mov	r2, r0
 8007c62:	4b41      	ldr	r3, [pc, #260]	@ (8007d68 <__multiply+0x13c>)
 8007c64:	4841      	ldr	r0, [pc, #260]	@ (8007d6c <__multiply+0x140>)
 8007c66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c6a:	f000 fc8b 	bl	8008584 <__assert_func>
 8007c6e:	f100 0414 	add.w	r4, r0, #20
 8007c72:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007c76:	4623      	mov	r3, r4
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4573      	cmp	r3, lr
 8007c7c:	d320      	bcc.n	8007cc0 <__multiply+0x94>
 8007c7e:	f107 0814 	add.w	r8, r7, #20
 8007c82:	f109 0114 	add.w	r1, r9, #20
 8007c86:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007c8a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007c8e:	9302      	str	r3, [sp, #8]
 8007c90:	1beb      	subs	r3, r5, r7
 8007c92:	3b15      	subs	r3, #21
 8007c94:	f023 0303 	bic.w	r3, r3, #3
 8007c98:	3304      	adds	r3, #4
 8007c9a:	3715      	adds	r7, #21
 8007c9c:	42bd      	cmp	r5, r7
 8007c9e:	bf38      	it	cc
 8007ca0:	2304      	movcc	r3, #4
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	9b02      	ldr	r3, [sp, #8]
 8007ca6:	9103      	str	r1, [sp, #12]
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	d80c      	bhi.n	8007cc6 <__multiply+0x9a>
 8007cac:	2e00      	cmp	r6, #0
 8007cae:	dd03      	ble.n	8007cb8 <__multiply+0x8c>
 8007cb0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d055      	beq.n	8007d64 <__multiply+0x138>
 8007cb8:	6106      	str	r6, [r0, #16]
 8007cba:	b005      	add	sp, #20
 8007cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc0:	f843 2b04 	str.w	r2, [r3], #4
 8007cc4:	e7d9      	b.n	8007c7a <__multiply+0x4e>
 8007cc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007cca:	f1ba 0f00 	cmp.w	sl, #0
 8007cce:	d01f      	beq.n	8007d10 <__multiply+0xe4>
 8007cd0:	46c4      	mov	ip, r8
 8007cd2:	46a1      	mov	r9, r4
 8007cd4:	2700      	movs	r7, #0
 8007cd6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007cda:	f8d9 3000 	ldr.w	r3, [r9]
 8007cde:	fa1f fb82 	uxth.w	fp, r2
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ce8:	443b      	add	r3, r7
 8007cea:	f8d9 7000 	ldr.w	r7, [r9]
 8007cee:	0c12      	lsrs	r2, r2, #16
 8007cf0:	0c3f      	lsrs	r7, r7, #16
 8007cf2:	fb0a 7202 	mla	r2, sl, r2, r7
 8007cf6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d00:	4565      	cmp	r5, ip
 8007d02:	f849 3b04 	str.w	r3, [r9], #4
 8007d06:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007d0a:	d8e4      	bhi.n	8007cd6 <__multiply+0xaa>
 8007d0c:	9b01      	ldr	r3, [sp, #4]
 8007d0e:	50e7      	str	r7, [r4, r3]
 8007d10:	9b03      	ldr	r3, [sp, #12]
 8007d12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d16:	3104      	adds	r1, #4
 8007d18:	f1b9 0f00 	cmp.w	r9, #0
 8007d1c:	d020      	beq.n	8007d60 <__multiply+0x134>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	4647      	mov	r7, r8
 8007d22:	46a4      	mov	ip, r4
 8007d24:	f04f 0a00 	mov.w	sl, #0
 8007d28:	f8b7 b000 	ldrh.w	fp, [r7]
 8007d2c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007d30:	fb09 220b 	mla	r2, r9, fp, r2
 8007d34:	4452      	add	r2, sl
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d3c:	f84c 3b04 	str.w	r3, [ip], #4
 8007d40:	f857 3b04 	ldr.w	r3, [r7], #4
 8007d44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d48:	f8bc 3000 	ldrh.w	r3, [ip]
 8007d4c:	fb09 330a 	mla	r3, r9, sl, r3
 8007d50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007d54:	42bd      	cmp	r5, r7
 8007d56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d5a:	d8e5      	bhi.n	8007d28 <__multiply+0xfc>
 8007d5c:	9a01      	ldr	r2, [sp, #4]
 8007d5e:	50a3      	str	r3, [r4, r2]
 8007d60:	3404      	adds	r4, #4
 8007d62:	e79f      	b.n	8007ca4 <__multiply+0x78>
 8007d64:	3e01      	subs	r6, #1
 8007d66:	e7a1      	b.n	8007cac <__multiply+0x80>
 8007d68:	08008d74 	.word	0x08008d74
 8007d6c:	08008d85 	.word	0x08008d85

08007d70 <__pow5mult>:
 8007d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d74:	4615      	mov	r5, r2
 8007d76:	f012 0203 	ands.w	r2, r2, #3
 8007d7a:	4607      	mov	r7, r0
 8007d7c:	460e      	mov	r6, r1
 8007d7e:	d007      	beq.n	8007d90 <__pow5mult+0x20>
 8007d80:	4c25      	ldr	r4, [pc, #148]	@ (8007e18 <__pow5mult+0xa8>)
 8007d82:	3a01      	subs	r2, #1
 8007d84:	2300      	movs	r3, #0
 8007d86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d8a:	f7ff fea7 	bl	8007adc <__multadd>
 8007d8e:	4606      	mov	r6, r0
 8007d90:	10ad      	asrs	r5, r5, #2
 8007d92:	d03d      	beq.n	8007e10 <__pow5mult+0xa0>
 8007d94:	69fc      	ldr	r4, [r7, #28]
 8007d96:	b97c      	cbnz	r4, 8007db8 <__pow5mult+0x48>
 8007d98:	2010      	movs	r0, #16
 8007d9a:	f7ff fd87 	bl	80078ac <malloc>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	61f8      	str	r0, [r7, #28]
 8007da2:	b928      	cbnz	r0, 8007db0 <__pow5mult+0x40>
 8007da4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e1c <__pow5mult+0xac>)
 8007da6:	481e      	ldr	r0, [pc, #120]	@ (8007e20 <__pow5mult+0xb0>)
 8007da8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007dac:	f000 fbea 	bl	8008584 <__assert_func>
 8007db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007db4:	6004      	str	r4, [r0, #0]
 8007db6:	60c4      	str	r4, [r0, #12]
 8007db8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007dbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dc0:	b94c      	cbnz	r4, 8007dd6 <__pow5mult+0x66>
 8007dc2:	f240 2171 	movw	r1, #625	@ 0x271
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	f7ff ff1a 	bl	8007c00 <__i2b>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	6003      	str	r3, [r0, #0]
 8007dd6:	f04f 0900 	mov.w	r9, #0
 8007dda:	07eb      	lsls	r3, r5, #31
 8007ddc:	d50a      	bpl.n	8007df4 <__pow5mult+0x84>
 8007dde:	4631      	mov	r1, r6
 8007de0:	4622      	mov	r2, r4
 8007de2:	4638      	mov	r0, r7
 8007de4:	f7ff ff22 	bl	8007c2c <__multiply>
 8007de8:	4631      	mov	r1, r6
 8007dea:	4680      	mov	r8, r0
 8007dec:	4638      	mov	r0, r7
 8007dee:	f7ff fe53 	bl	8007a98 <_Bfree>
 8007df2:	4646      	mov	r6, r8
 8007df4:	106d      	asrs	r5, r5, #1
 8007df6:	d00b      	beq.n	8007e10 <__pow5mult+0xa0>
 8007df8:	6820      	ldr	r0, [r4, #0]
 8007dfa:	b938      	cbnz	r0, 8007e0c <__pow5mult+0x9c>
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	4621      	mov	r1, r4
 8007e00:	4638      	mov	r0, r7
 8007e02:	f7ff ff13 	bl	8007c2c <__multiply>
 8007e06:	6020      	str	r0, [r4, #0]
 8007e08:	f8c0 9000 	str.w	r9, [r0]
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	e7e4      	b.n	8007dda <__pow5mult+0x6a>
 8007e10:	4630      	mov	r0, r6
 8007e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e16:	bf00      	nop
 8007e18:	08008e38 	.word	0x08008e38
 8007e1c:	08008d05 	.word	0x08008d05
 8007e20:	08008d85 	.word	0x08008d85

08007e24 <__lshift>:
 8007e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e28:	460c      	mov	r4, r1
 8007e2a:	6849      	ldr	r1, [r1, #4]
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e32:	68a3      	ldr	r3, [r4, #8]
 8007e34:	4607      	mov	r7, r0
 8007e36:	4691      	mov	r9, r2
 8007e38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e3c:	f108 0601 	add.w	r6, r8, #1
 8007e40:	42b3      	cmp	r3, r6
 8007e42:	db0b      	blt.n	8007e5c <__lshift+0x38>
 8007e44:	4638      	mov	r0, r7
 8007e46:	f7ff fde7 	bl	8007a18 <_Balloc>
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	b948      	cbnz	r0, 8007e62 <__lshift+0x3e>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	4b28      	ldr	r3, [pc, #160]	@ (8007ef4 <__lshift+0xd0>)
 8007e52:	4829      	ldr	r0, [pc, #164]	@ (8007ef8 <__lshift+0xd4>)
 8007e54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e58:	f000 fb94 	bl	8008584 <__assert_func>
 8007e5c:	3101      	adds	r1, #1
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	e7ee      	b.n	8007e40 <__lshift+0x1c>
 8007e62:	2300      	movs	r3, #0
 8007e64:	f100 0114 	add.w	r1, r0, #20
 8007e68:	f100 0210 	add.w	r2, r0, #16
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	4553      	cmp	r3, sl
 8007e70:	db33      	blt.n	8007eda <__lshift+0xb6>
 8007e72:	6920      	ldr	r0, [r4, #16]
 8007e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e78:	f104 0314 	add.w	r3, r4, #20
 8007e7c:	f019 091f 	ands.w	r9, r9, #31
 8007e80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e88:	d02b      	beq.n	8007ee2 <__lshift+0xbe>
 8007e8a:	f1c9 0e20 	rsb	lr, r9, #32
 8007e8e:	468a      	mov	sl, r1
 8007e90:	2200      	movs	r2, #0
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	fa00 f009 	lsl.w	r0, r0, r9
 8007e98:	4310      	orrs	r0, r2
 8007e9a:	f84a 0b04 	str.w	r0, [sl], #4
 8007e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea2:	459c      	cmp	ip, r3
 8007ea4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ea8:	d8f3      	bhi.n	8007e92 <__lshift+0x6e>
 8007eaa:	ebac 0304 	sub.w	r3, ip, r4
 8007eae:	3b15      	subs	r3, #21
 8007eb0:	f023 0303 	bic.w	r3, r3, #3
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	f104 0015 	add.w	r0, r4, #21
 8007eba:	4560      	cmp	r0, ip
 8007ebc:	bf88      	it	hi
 8007ebe:	2304      	movhi	r3, #4
 8007ec0:	50ca      	str	r2, [r1, r3]
 8007ec2:	b10a      	cbz	r2, 8007ec8 <__lshift+0xa4>
 8007ec4:	f108 0602 	add.w	r6, r8, #2
 8007ec8:	3e01      	subs	r6, #1
 8007eca:	4638      	mov	r0, r7
 8007ecc:	612e      	str	r6, [r5, #16]
 8007ece:	4621      	mov	r1, r4
 8007ed0:	f7ff fde2 	bl	8007a98 <_Bfree>
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eda:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ede:	3301      	adds	r3, #1
 8007ee0:	e7c5      	b.n	8007e6e <__lshift+0x4a>
 8007ee2:	3904      	subs	r1, #4
 8007ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ee8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007eec:	459c      	cmp	ip, r3
 8007eee:	d8f9      	bhi.n	8007ee4 <__lshift+0xc0>
 8007ef0:	e7ea      	b.n	8007ec8 <__lshift+0xa4>
 8007ef2:	bf00      	nop
 8007ef4:	08008d74 	.word	0x08008d74
 8007ef8:	08008d85 	.word	0x08008d85

08007efc <__mcmp>:
 8007efc:	690a      	ldr	r2, [r1, #16]
 8007efe:	4603      	mov	r3, r0
 8007f00:	6900      	ldr	r0, [r0, #16]
 8007f02:	1a80      	subs	r0, r0, r2
 8007f04:	b530      	push	{r4, r5, lr}
 8007f06:	d10e      	bne.n	8007f26 <__mcmp+0x2a>
 8007f08:	3314      	adds	r3, #20
 8007f0a:	3114      	adds	r1, #20
 8007f0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f1c:	4295      	cmp	r5, r2
 8007f1e:	d003      	beq.n	8007f28 <__mcmp+0x2c>
 8007f20:	d205      	bcs.n	8007f2e <__mcmp+0x32>
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	bd30      	pop	{r4, r5, pc}
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	d3f3      	bcc.n	8007f14 <__mcmp+0x18>
 8007f2c:	e7fb      	b.n	8007f26 <__mcmp+0x2a>
 8007f2e:	2001      	movs	r0, #1
 8007f30:	e7f9      	b.n	8007f26 <__mcmp+0x2a>
	...

08007f34 <__mdiff>:
 8007f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f38:	4689      	mov	r9, r1
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	4648      	mov	r0, r9
 8007f40:	4614      	mov	r4, r2
 8007f42:	f7ff ffdb 	bl	8007efc <__mcmp>
 8007f46:	1e05      	subs	r5, r0, #0
 8007f48:	d112      	bne.n	8007f70 <__mdiff+0x3c>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f7ff fd63 	bl	8007a18 <_Balloc>
 8007f52:	4602      	mov	r2, r0
 8007f54:	b928      	cbnz	r0, 8007f62 <__mdiff+0x2e>
 8007f56:	4b3f      	ldr	r3, [pc, #252]	@ (8008054 <__mdiff+0x120>)
 8007f58:	f240 2137 	movw	r1, #567	@ 0x237
 8007f5c:	483e      	ldr	r0, [pc, #248]	@ (8008058 <__mdiff+0x124>)
 8007f5e:	f000 fb11 	bl	8008584 <__assert_func>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f68:	4610      	mov	r0, r2
 8007f6a:	b003      	add	sp, #12
 8007f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f70:	bfbc      	itt	lt
 8007f72:	464b      	movlt	r3, r9
 8007f74:	46a1      	movlt	r9, r4
 8007f76:	4630      	mov	r0, r6
 8007f78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f7c:	bfba      	itte	lt
 8007f7e:	461c      	movlt	r4, r3
 8007f80:	2501      	movlt	r5, #1
 8007f82:	2500      	movge	r5, #0
 8007f84:	f7ff fd48 	bl	8007a18 <_Balloc>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	b918      	cbnz	r0, 8007f94 <__mdiff+0x60>
 8007f8c:	4b31      	ldr	r3, [pc, #196]	@ (8008054 <__mdiff+0x120>)
 8007f8e:	f240 2145 	movw	r1, #581	@ 0x245
 8007f92:	e7e3      	b.n	8007f5c <__mdiff+0x28>
 8007f94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f98:	6926      	ldr	r6, [r4, #16]
 8007f9a:	60c5      	str	r5, [r0, #12]
 8007f9c:	f109 0310 	add.w	r3, r9, #16
 8007fa0:	f109 0514 	add.w	r5, r9, #20
 8007fa4:	f104 0e14 	add.w	lr, r4, #20
 8007fa8:	f100 0b14 	add.w	fp, r0, #20
 8007fac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	46d9      	mov	r9, fp
 8007fb8:	f04f 0c00 	mov.w	ip, #0
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007fc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	fa1f f38a 	uxth.w	r3, sl
 8007fcc:	4619      	mov	r1, r3
 8007fce:	b283      	uxth	r3, r0
 8007fd0:	1acb      	subs	r3, r1, r3
 8007fd2:	0c00      	lsrs	r0, r0, #16
 8007fd4:	4463      	add	r3, ip
 8007fd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007fda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007fe4:	4576      	cmp	r6, lr
 8007fe6:	f849 3b04 	str.w	r3, [r9], #4
 8007fea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fee:	d8e5      	bhi.n	8007fbc <__mdiff+0x88>
 8007ff0:	1b33      	subs	r3, r6, r4
 8007ff2:	3b15      	subs	r3, #21
 8007ff4:	f023 0303 	bic.w	r3, r3, #3
 8007ff8:	3415      	adds	r4, #21
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	42a6      	cmp	r6, r4
 8007ffe:	bf38      	it	cc
 8008000:	2304      	movcc	r3, #4
 8008002:	441d      	add	r5, r3
 8008004:	445b      	add	r3, fp
 8008006:	461e      	mov	r6, r3
 8008008:	462c      	mov	r4, r5
 800800a:	4544      	cmp	r4, r8
 800800c:	d30e      	bcc.n	800802c <__mdiff+0xf8>
 800800e:	f108 0103 	add.w	r1, r8, #3
 8008012:	1b49      	subs	r1, r1, r5
 8008014:	f021 0103 	bic.w	r1, r1, #3
 8008018:	3d03      	subs	r5, #3
 800801a:	45a8      	cmp	r8, r5
 800801c:	bf38      	it	cc
 800801e:	2100      	movcc	r1, #0
 8008020:	440b      	add	r3, r1
 8008022:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008026:	b191      	cbz	r1, 800804e <__mdiff+0x11a>
 8008028:	6117      	str	r7, [r2, #16]
 800802a:	e79d      	b.n	8007f68 <__mdiff+0x34>
 800802c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008030:	46e6      	mov	lr, ip
 8008032:	0c08      	lsrs	r0, r1, #16
 8008034:	fa1c fc81 	uxtah	ip, ip, r1
 8008038:	4471      	add	r1, lr
 800803a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800803e:	b289      	uxth	r1, r1
 8008040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008044:	f846 1b04 	str.w	r1, [r6], #4
 8008048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800804c:	e7dd      	b.n	800800a <__mdiff+0xd6>
 800804e:	3f01      	subs	r7, #1
 8008050:	e7e7      	b.n	8008022 <__mdiff+0xee>
 8008052:	bf00      	nop
 8008054:	08008d74 	.word	0x08008d74
 8008058:	08008d85 	.word	0x08008d85

0800805c <__d2b>:
 800805c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008060:	460f      	mov	r7, r1
 8008062:	2101      	movs	r1, #1
 8008064:	ec59 8b10 	vmov	r8, r9, d0
 8008068:	4616      	mov	r6, r2
 800806a:	f7ff fcd5 	bl	8007a18 <_Balloc>
 800806e:	4604      	mov	r4, r0
 8008070:	b930      	cbnz	r0, 8008080 <__d2b+0x24>
 8008072:	4602      	mov	r2, r0
 8008074:	4b23      	ldr	r3, [pc, #140]	@ (8008104 <__d2b+0xa8>)
 8008076:	4824      	ldr	r0, [pc, #144]	@ (8008108 <__d2b+0xac>)
 8008078:	f240 310f 	movw	r1, #783	@ 0x30f
 800807c:	f000 fa82 	bl	8008584 <__assert_func>
 8008080:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008084:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008088:	b10d      	cbz	r5, 800808e <__d2b+0x32>
 800808a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	f1b8 0300 	subs.w	r3, r8, #0
 8008094:	d023      	beq.n	80080de <__d2b+0x82>
 8008096:	4668      	mov	r0, sp
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	f7ff fd84 	bl	8007ba6 <__lo0bits>
 800809e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080a2:	b1d0      	cbz	r0, 80080da <__d2b+0x7e>
 80080a4:	f1c0 0320 	rsb	r3, r0, #32
 80080a8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ac:	430b      	orrs	r3, r1
 80080ae:	40c2      	lsrs	r2, r0
 80080b0:	6163      	str	r3, [r4, #20]
 80080b2:	9201      	str	r2, [sp, #4]
 80080b4:	9b01      	ldr	r3, [sp, #4]
 80080b6:	61a3      	str	r3, [r4, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bf0c      	ite	eq
 80080bc:	2201      	moveq	r2, #1
 80080be:	2202      	movne	r2, #2
 80080c0:	6122      	str	r2, [r4, #16]
 80080c2:	b1a5      	cbz	r5, 80080ee <__d2b+0x92>
 80080c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80080c8:	4405      	add	r5, r0
 80080ca:	603d      	str	r5, [r7, #0]
 80080cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80080d0:	6030      	str	r0, [r6, #0]
 80080d2:	4620      	mov	r0, r4
 80080d4:	b003      	add	sp, #12
 80080d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080da:	6161      	str	r1, [r4, #20]
 80080dc:	e7ea      	b.n	80080b4 <__d2b+0x58>
 80080de:	a801      	add	r0, sp, #4
 80080e0:	f7ff fd61 	bl	8007ba6 <__lo0bits>
 80080e4:	9b01      	ldr	r3, [sp, #4]
 80080e6:	6163      	str	r3, [r4, #20]
 80080e8:	3020      	adds	r0, #32
 80080ea:	2201      	movs	r2, #1
 80080ec:	e7e8      	b.n	80080c0 <__d2b+0x64>
 80080ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80080f6:	6038      	str	r0, [r7, #0]
 80080f8:	6918      	ldr	r0, [r3, #16]
 80080fa:	f7ff fd35 	bl	8007b68 <__hi0bits>
 80080fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008102:	e7e5      	b.n	80080d0 <__d2b+0x74>
 8008104:	08008d74 	.word	0x08008d74
 8008108:	08008d85 	.word	0x08008d85

0800810c <__ssputs_r>:
 800810c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008110:	688e      	ldr	r6, [r1, #8]
 8008112:	461f      	mov	r7, r3
 8008114:	42be      	cmp	r6, r7
 8008116:	680b      	ldr	r3, [r1, #0]
 8008118:	4682      	mov	sl, r0
 800811a:	460c      	mov	r4, r1
 800811c:	4690      	mov	r8, r2
 800811e:	d82d      	bhi.n	800817c <__ssputs_r+0x70>
 8008120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008124:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008128:	d026      	beq.n	8008178 <__ssputs_r+0x6c>
 800812a:	6965      	ldr	r5, [r4, #20]
 800812c:	6909      	ldr	r1, [r1, #16]
 800812e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008132:	eba3 0901 	sub.w	r9, r3, r1
 8008136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800813a:	1c7b      	adds	r3, r7, #1
 800813c:	444b      	add	r3, r9
 800813e:	106d      	asrs	r5, r5, #1
 8008140:	429d      	cmp	r5, r3
 8008142:	bf38      	it	cc
 8008144:	461d      	movcc	r5, r3
 8008146:	0553      	lsls	r3, r2, #21
 8008148:	d527      	bpl.n	800819a <__ssputs_r+0x8e>
 800814a:	4629      	mov	r1, r5
 800814c:	f7ff fbd8 	bl	8007900 <_malloc_r>
 8008150:	4606      	mov	r6, r0
 8008152:	b360      	cbz	r0, 80081ae <__ssputs_r+0xa2>
 8008154:	6921      	ldr	r1, [r4, #16]
 8008156:	464a      	mov	r2, r9
 8008158:	f000 fa06 	bl	8008568 <memcpy>
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	6126      	str	r6, [r4, #16]
 800816a:	6165      	str	r5, [r4, #20]
 800816c:	444e      	add	r6, r9
 800816e:	eba5 0509 	sub.w	r5, r5, r9
 8008172:	6026      	str	r6, [r4, #0]
 8008174:	60a5      	str	r5, [r4, #8]
 8008176:	463e      	mov	r6, r7
 8008178:	42be      	cmp	r6, r7
 800817a:	d900      	bls.n	800817e <__ssputs_r+0x72>
 800817c:	463e      	mov	r6, r7
 800817e:	6820      	ldr	r0, [r4, #0]
 8008180:	4632      	mov	r2, r6
 8008182:	4641      	mov	r1, r8
 8008184:	f000 f9c6 	bl	8008514 <memmove>
 8008188:	68a3      	ldr	r3, [r4, #8]
 800818a:	1b9b      	subs	r3, r3, r6
 800818c:	60a3      	str	r3, [r4, #8]
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	4433      	add	r3, r6
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	2000      	movs	r0, #0
 8008196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800819a:	462a      	mov	r2, r5
 800819c:	f000 fa36 	bl	800860c <_realloc_r>
 80081a0:	4606      	mov	r6, r0
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d1e0      	bne.n	8008168 <__ssputs_r+0x5c>
 80081a6:	6921      	ldr	r1, [r4, #16]
 80081a8:	4650      	mov	r0, sl
 80081aa:	f7ff fb35 	bl	8007818 <_free_r>
 80081ae:	230c      	movs	r3, #12
 80081b0:	f8ca 3000 	str.w	r3, [sl]
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081ba:	81a3      	strh	r3, [r4, #12]
 80081bc:	f04f 30ff 	mov.w	r0, #4294967295
 80081c0:	e7e9      	b.n	8008196 <__ssputs_r+0x8a>
	...

080081c4 <_svfiprintf_r>:
 80081c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c8:	4698      	mov	r8, r3
 80081ca:	898b      	ldrh	r3, [r1, #12]
 80081cc:	061b      	lsls	r3, r3, #24
 80081ce:	b09d      	sub	sp, #116	@ 0x74
 80081d0:	4607      	mov	r7, r0
 80081d2:	460d      	mov	r5, r1
 80081d4:	4614      	mov	r4, r2
 80081d6:	d510      	bpl.n	80081fa <_svfiprintf_r+0x36>
 80081d8:	690b      	ldr	r3, [r1, #16]
 80081da:	b973      	cbnz	r3, 80081fa <_svfiprintf_r+0x36>
 80081dc:	2140      	movs	r1, #64	@ 0x40
 80081de:	f7ff fb8f 	bl	8007900 <_malloc_r>
 80081e2:	6028      	str	r0, [r5, #0]
 80081e4:	6128      	str	r0, [r5, #16]
 80081e6:	b930      	cbnz	r0, 80081f6 <_svfiprintf_r+0x32>
 80081e8:	230c      	movs	r3, #12
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	b01d      	add	sp, #116	@ 0x74
 80081f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f6:	2340      	movs	r3, #64	@ 0x40
 80081f8:	616b      	str	r3, [r5, #20]
 80081fa:	2300      	movs	r3, #0
 80081fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081fe:	2320      	movs	r3, #32
 8008200:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008204:	f8cd 800c 	str.w	r8, [sp, #12]
 8008208:	2330      	movs	r3, #48	@ 0x30
 800820a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083a8 <_svfiprintf_r+0x1e4>
 800820e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008212:	f04f 0901 	mov.w	r9, #1
 8008216:	4623      	mov	r3, r4
 8008218:	469a      	mov	sl, r3
 800821a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800821e:	b10a      	cbz	r2, 8008224 <_svfiprintf_r+0x60>
 8008220:	2a25      	cmp	r2, #37	@ 0x25
 8008222:	d1f9      	bne.n	8008218 <_svfiprintf_r+0x54>
 8008224:	ebba 0b04 	subs.w	fp, sl, r4
 8008228:	d00b      	beq.n	8008242 <_svfiprintf_r+0x7e>
 800822a:	465b      	mov	r3, fp
 800822c:	4622      	mov	r2, r4
 800822e:	4629      	mov	r1, r5
 8008230:	4638      	mov	r0, r7
 8008232:	f7ff ff6b 	bl	800810c <__ssputs_r>
 8008236:	3001      	adds	r0, #1
 8008238:	f000 80a7 	beq.w	800838a <_svfiprintf_r+0x1c6>
 800823c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800823e:	445a      	add	r2, fp
 8008240:	9209      	str	r2, [sp, #36]	@ 0x24
 8008242:	f89a 3000 	ldrb.w	r3, [sl]
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 809f 	beq.w	800838a <_svfiprintf_r+0x1c6>
 800824c:	2300      	movs	r3, #0
 800824e:	f04f 32ff 	mov.w	r2, #4294967295
 8008252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008256:	f10a 0a01 	add.w	sl, sl, #1
 800825a:	9304      	str	r3, [sp, #16]
 800825c:	9307      	str	r3, [sp, #28]
 800825e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008262:	931a      	str	r3, [sp, #104]	@ 0x68
 8008264:	4654      	mov	r4, sl
 8008266:	2205      	movs	r2, #5
 8008268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826c:	484e      	ldr	r0, [pc, #312]	@ (80083a8 <_svfiprintf_r+0x1e4>)
 800826e:	f7f7 ffaf 	bl	80001d0 <memchr>
 8008272:	9a04      	ldr	r2, [sp, #16]
 8008274:	b9d8      	cbnz	r0, 80082ae <_svfiprintf_r+0xea>
 8008276:	06d0      	lsls	r0, r2, #27
 8008278:	bf44      	itt	mi
 800827a:	2320      	movmi	r3, #32
 800827c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008280:	0711      	lsls	r1, r2, #28
 8008282:	bf44      	itt	mi
 8008284:	232b      	movmi	r3, #43	@ 0x2b
 8008286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800828a:	f89a 3000 	ldrb.w	r3, [sl]
 800828e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008290:	d015      	beq.n	80082be <_svfiprintf_r+0xfa>
 8008292:	9a07      	ldr	r2, [sp, #28]
 8008294:	4654      	mov	r4, sl
 8008296:	2000      	movs	r0, #0
 8008298:	f04f 0c0a 	mov.w	ip, #10
 800829c:	4621      	mov	r1, r4
 800829e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082a2:	3b30      	subs	r3, #48	@ 0x30
 80082a4:	2b09      	cmp	r3, #9
 80082a6:	d94b      	bls.n	8008340 <_svfiprintf_r+0x17c>
 80082a8:	b1b0      	cbz	r0, 80082d8 <_svfiprintf_r+0x114>
 80082aa:	9207      	str	r2, [sp, #28]
 80082ac:	e014      	b.n	80082d8 <_svfiprintf_r+0x114>
 80082ae:	eba0 0308 	sub.w	r3, r0, r8
 80082b2:	fa09 f303 	lsl.w	r3, r9, r3
 80082b6:	4313      	orrs	r3, r2
 80082b8:	9304      	str	r3, [sp, #16]
 80082ba:	46a2      	mov	sl, r4
 80082bc:	e7d2      	b.n	8008264 <_svfiprintf_r+0xa0>
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	1d19      	adds	r1, r3, #4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	9103      	str	r1, [sp, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	bfbb      	ittet	lt
 80082ca:	425b      	neglt	r3, r3
 80082cc:	f042 0202 	orrlt.w	r2, r2, #2
 80082d0:	9307      	strge	r3, [sp, #28]
 80082d2:	9307      	strlt	r3, [sp, #28]
 80082d4:	bfb8      	it	lt
 80082d6:	9204      	strlt	r2, [sp, #16]
 80082d8:	7823      	ldrb	r3, [r4, #0]
 80082da:	2b2e      	cmp	r3, #46	@ 0x2e
 80082dc:	d10a      	bne.n	80082f4 <_svfiprintf_r+0x130>
 80082de:	7863      	ldrb	r3, [r4, #1]
 80082e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082e2:	d132      	bne.n	800834a <_svfiprintf_r+0x186>
 80082e4:	9b03      	ldr	r3, [sp, #12]
 80082e6:	1d1a      	adds	r2, r3, #4
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	9203      	str	r2, [sp, #12]
 80082ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082f0:	3402      	adds	r4, #2
 80082f2:	9305      	str	r3, [sp, #20]
 80082f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083b8 <_svfiprintf_r+0x1f4>
 80082f8:	7821      	ldrb	r1, [r4, #0]
 80082fa:	2203      	movs	r2, #3
 80082fc:	4650      	mov	r0, sl
 80082fe:	f7f7 ff67 	bl	80001d0 <memchr>
 8008302:	b138      	cbz	r0, 8008314 <_svfiprintf_r+0x150>
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	eba0 000a 	sub.w	r0, r0, sl
 800830a:	2240      	movs	r2, #64	@ 0x40
 800830c:	4082      	lsls	r2, r0
 800830e:	4313      	orrs	r3, r2
 8008310:	3401      	adds	r4, #1
 8008312:	9304      	str	r3, [sp, #16]
 8008314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008318:	4824      	ldr	r0, [pc, #144]	@ (80083ac <_svfiprintf_r+0x1e8>)
 800831a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800831e:	2206      	movs	r2, #6
 8008320:	f7f7 ff56 	bl	80001d0 <memchr>
 8008324:	2800      	cmp	r0, #0
 8008326:	d036      	beq.n	8008396 <_svfiprintf_r+0x1d2>
 8008328:	4b21      	ldr	r3, [pc, #132]	@ (80083b0 <_svfiprintf_r+0x1ec>)
 800832a:	bb1b      	cbnz	r3, 8008374 <_svfiprintf_r+0x1b0>
 800832c:	9b03      	ldr	r3, [sp, #12]
 800832e:	3307      	adds	r3, #7
 8008330:	f023 0307 	bic.w	r3, r3, #7
 8008334:	3308      	adds	r3, #8
 8008336:	9303      	str	r3, [sp, #12]
 8008338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800833a:	4433      	add	r3, r6
 800833c:	9309      	str	r3, [sp, #36]	@ 0x24
 800833e:	e76a      	b.n	8008216 <_svfiprintf_r+0x52>
 8008340:	fb0c 3202 	mla	r2, ip, r2, r3
 8008344:	460c      	mov	r4, r1
 8008346:	2001      	movs	r0, #1
 8008348:	e7a8      	b.n	800829c <_svfiprintf_r+0xd8>
 800834a:	2300      	movs	r3, #0
 800834c:	3401      	adds	r4, #1
 800834e:	9305      	str	r3, [sp, #20]
 8008350:	4619      	mov	r1, r3
 8008352:	f04f 0c0a 	mov.w	ip, #10
 8008356:	4620      	mov	r0, r4
 8008358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800835c:	3a30      	subs	r2, #48	@ 0x30
 800835e:	2a09      	cmp	r2, #9
 8008360:	d903      	bls.n	800836a <_svfiprintf_r+0x1a6>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0c6      	beq.n	80082f4 <_svfiprintf_r+0x130>
 8008366:	9105      	str	r1, [sp, #20]
 8008368:	e7c4      	b.n	80082f4 <_svfiprintf_r+0x130>
 800836a:	fb0c 2101 	mla	r1, ip, r1, r2
 800836e:	4604      	mov	r4, r0
 8008370:	2301      	movs	r3, #1
 8008372:	e7f0      	b.n	8008356 <_svfiprintf_r+0x192>
 8008374:	ab03      	add	r3, sp, #12
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	462a      	mov	r2, r5
 800837a:	4b0e      	ldr	r3, [pc, #56]	@ (80083b4 <_svfiprintf_r+0x1f0>)
 800837c:	a904      	add	r1, sp, #16
 800837e:	4638      	mov	r0, r7
 8008380:	f7fd fe94 	bl	80060ac <_printf_float>
 8008384:	1c42      	adds	r2, r0, #1
 8008386:	4606      	mov	r6, r0
 8008388:	d1d6      	bne.n	8008338 <_svfiprintf_r+0x174>
 800838a:	89ab      	ldrh	r3, [r5, #12]
 800838c:	065b      	lsls	r3, r3, #25
 800838e:	f53f af2d 	bmi.w	80081ec <_svfiprintf_r+0x28>
 8008392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008394:	e72c      	b.n	80081f0 <_svfiprintf_r+0x2c>
 8008396:	ab03      	add	r3, sp, #12
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	462a      	mov	r2, r5
 800839c:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <_svfiprintf_r+0x1f0>)
 800839e:	a904      	add	r1, sp, #16
 80083a0:	4638      	mov	r0, r7
 80083a2:	f7fe f91b 	bl	80065dc <_printf_i>
 80083a6:	e7ed      	b.n	8008384 <_svfiprintf_r+0x1c0>
 80083a8:	08008dde 	.word	0x08008dde
 80083ac:	08008de8 	.word	0x08008de8
 80083b0:	080060ad 	.word	0x080060ad
 80083b4:	0800810d 	.word	0x0800810d
 80083b8:	08008de4 	.word	0x08008de4

080083bc <__sflush_r>:
 80083bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c4:	0716      	lsls	r6, r2, #28
 80083c6:	4605      	mov	r5, r0
 80083c8:	460c      	mov	r4, r1
 80083ca:	d454      	bmi.n	8008476 <__sflush_r+0xba>
 80083cc:	684b      	ldr	r3, [r1, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	dc02      	bgt.n	80083d8 <__sflush_r+0x1c>
 80083d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dd48      	ble.n	800846a <__sflush_r+0xae>
 80083d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083da:	2e00      	cmp	r6, #0
 80083dc:	d045      	beq.n	800846a <__sflush_r+0xae>
 80083de:	2300      	movs	r3, #0
 80083e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083e4:	682f      	ldr	r7, [r5, #0]
 80083e6:	6a21      	ldr	r1, [r4, #32]
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	d030      	beq.n	800844e <__sflush_r+0x92>
 80083ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	0759      	lsls	r1, r3, #29
 80083f2:	d505      	bpl.n	8008400 <__sflush_r+0x44>
 80083f4:	6863      	ldr	r3, [r4, #4]
 80083f6:	1ad2      	subs	r2, r2, r3
 80083f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083fa:	b10b      	cbz	r3, 8008400 <__sflush_r+0x44>
 80083fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083fe:	1ad2      	subs	r2, r2, r3
 8008400:	2300      	movs	r3, #0
 8008402:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008404:	6a21      	ldr	r1, [r4, #32]
 8008406:	4628      	mov	r0, r5
 8008408:	47b0      	blx	r6
 800840a:	1c43      	adds	r3, r0, #1
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	d106      	bne.n	800841e <__sflush_r+0x62>
 8008410:	6829      	ldr	r1, [r5, #0]
 8008412:	291d      	cmp	r1, #29
 8008414:	d82b      	bhi.n	800846e <__sflush_r+0xb2>
 8008416:	4a2a      	ldr	r2, [pc, #168]	@ (80084c0 <__sflush_r+0x104>)
 8008418:	40ca      	lsrs	r2, r1
 800841a:	07d6      	lsls	r6, r2, #31
 800841c:	d527      	bpl.n	800846e <__sflush_r+0xb2>
 800841e:	2200      	movs	r2, #0
 8008420:	6062      	str	r2, [r4, #4]
 8008422:	04d9      	lsls	r1, r3, #19
 8008424:	6922      	ldr	r2, [r4, #16]
 8008426:	6022      	str	r2, [r4, #0]
 8008428:	d504      	bpl.n	8008434 <__sflush_r+0x78>
 800842a:	1c42      	adds	r2, r0, #1
 800842c:	d101      	bne.n	8008432 <__sflush_r+0x76>
 800842e:	682b      	ldr	r3, [r5, #0]
 8008430:	b903      	cbnz	r3, 8008434 <__sflush_r+0x78>
 8008432:	6560      	str	r0, [r4, #84]	@ 0x54
 8008434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008436:	602f      	str	r7, [r5, #0]
 8008438:	b1b9      	cbz	r1, 800846a <__sflush_r+0xae>
 800843a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800843e:	4299      	cmp	r1, r3
 8008440:	d002      	beq.n	8008448 <__sflush_r+0x8c>
 8008442:	4628      	mov	r0, r5
 8008444:	f7ff f9e8 	bl	8007818 <_free_r>
 8008448:	2300      	movs	r3, #0
 800844a:	6363      	str	r3, [r4, #52]	@ 0x34
 800844c:	e00d      	b.n	800846a <__sflush_r+0xae>
 800844e:	2301      	movs	r3, #1
 8008450:	4628      	mov	r0, r5
 8008452:	47b0      	blx	r6
 8008454:	4602      	mov	r2, r0
 8008456:	1c50      	adds	r0, r2, #1
 8008458:	d1c9      	bne.n	80083ee <__sflush_r+0x32>
 800845a:	682b      	ldr	r3, [r5, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0c6      	beq.n	80083ee <__sflush_r+0x32>
 8008460:	2b1d      	cmp	r3, #29
 8008462:	d001      	beq.n	8008468 <__sflush_r+0xac>
 8008464:	2b16      	cmp	r3, #22
 8008466:	d11e      	bne.n	80084a6 <__sflush_r+0xea>
 8008468:	602f      	str	r7, [r5, #0]
 800846a:	2000      	movs	r0, #0
 800846c:	e022      	b.n	80084b4 <__sflush_r+0xf8>
 800846e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008472:	b21b      	sxth	r3, r3
 8008474:	e01b      	b.n	80084ae <__sflush_r+0xf2>
 8008476:	690f      	ldr	r7, [r1, #16]
 8008478:	2f00      	cmp	r7, #0
 800847a:	d0f6      	beq.n	800846a <__sflush_r+0xae>
 800847c:	0793      	lsls	r3, r2, #30
 800847e:	680e      	ldr	r6, [r1, #0]
 8008480:	bf08      	it	eq
 8008482:	694b      	ldreq	r3, [r1, #20]
 8008484:	600f      	str	r7, [r1, #0]
 8008486:	bf18      	it	ne
 8008488:	2300      	movne	r3, #0
 800848a:	eba6 0807 	sub.w	r8, r6, r7
 800848e:	608b      	str	r3, [r1, #8]
 8008490:	f1b8 0f00 	cmp.w	r8, #0
 8008494:	dde9      	ble.n	800846a <__sflush_r+0xae>
 8008496:	6a21      	ldr	r1, [r4, #32]
 8008498:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800849a:	4643      	mov	r3, r8
 800849c:	463a      	mov	r2, r7
 800849e:	4628      	mov	r0, r5
 80084a0:	47b0      	blx	r6
 80084a2:	2800      	cmp	r0, #0
 80084a4:	dc08      	bgt.n	80084b8 <__sflush_r+0xfc>
 80084a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ae:	81a3      	strh	r3, [r4, #12]
 80084b0:	f04f 30ff 	mov.w	r0, #4294967295
 80084b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084b8:	4407      	add	r7, r0
 80084ba:	eba8 0800 	sub.w	r8, r8, r0
 80084be:	e7e7      	b.n	8008490 <__sflush_r+0xd4>
 80084c0:	20400001 	.word	0x20400001

080084c4 <_fflush_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	690b      	ldr	r3, [r1, #16]
 80084c8:	4605      	mov	r5, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	b913      	cbnz	r3, 80084d4 <_fflush_r+0x10>
 80084ce:	2500      	movs	r5, #0
 80084d0:	4628      	mov	r0, r5
 80084d2:	bd38      	pop	{r3, r4, r5, pc}
 80084d4:	b118      	cbz	r0, 80084de <_fflush_r+0x1a>
 80084d6:	6a03      	ldr	r3, [r0, #32]
 80084d8:	b90b      	cbnz	r3, 80084de <_fflush_r+0x1a>
 80084da:	f7fe fa29 	bl	8006930 <__sinit>
 80084de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0f3      	beq.n	80084ce <_fflush_r+0xa>
 80084e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084e8:	07d0      	lsls	r0, r2, #31
 80084ea:	d404      	bmi.n	80084f6 <_fflush_r+0x32>
 80084ec:	0599      	lsls	r1, r3, #22
 80084ee:	d402      	bmi.n	80084f6 <_fflush_r+0x32>
 80084f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084f2:	f7fe fb36 	bl	8006b62 <__retarget_lock_acquire_recursive>
 80084f6:	4628      	mov	r0, r5
 80084f8:	4621      	mov	r1, r4
 80084fa:	f7ff ff5f 	bl	80083bc <__sflush_r>
 80084fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008500:	07da      	lsls	r2, r3, #31
 8008502:	4605      	mov	r5, r0
 8008504:	d4e4      	bmi.n	80084d0 <_fflush_r+0xc>
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	059b      	lsls	r3, r3, #22
 800850a:	d4e1      	bmi.n	80084d0 <_fflush_r+0xc>
 800850c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800850e:	f7fe fb29 	bl	8006b64 <__retarget_lock_release_recursive>
 8008512:	e7dd      	b.n	80084d0 <_fflush_r+0xc>

08008514 <memmove>:
 8008514:	4288      	cmp	r0, r1
 8008516:	b510      	push	{r4, lr}
 8008518:	eb01 0402 	add.w	r4, r1, r2
 800851c:	d902      	bls.n	8008524 <memmove+0x10>
 800851e:	4284      	cmp	r4, r0
 8008520:	4623      	mov	r3, r4
 8008522:	d807      	bhi.n	8008534 <memmove+0x20>
 8008524:	1e43      	subs	r3, r0, #1
 8008526:	42a1      	cmp	r1, r4
 8008528:	d008      	beq.n	800853c <memmove+0x28>
 800852a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800852e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008532:	e7f8      	b.n	8008526 <memmove+0x12>
 8008534:	4402      	add	r2, r0
 8008536:	4601      	mov	r1, r0
 8008538:	428a      	cmp	r2, r1
 800853a:	d100      	bne.n	800853e <memmove+0x2a>
 800853c:	bd10      	pop	{r4, pc}
 800853e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008546:	e7f7      	b.n	8008538 <memmove+0x24>

08008548 <_sbrk_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4d06      	ldr	r5, [pc, #24]	@ (8008564 <_sbrk_r+0x1c>)
 800854c:	2300      	movs	r3, #0
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	602b      	str	r3, [r5, #0]
 8008554:	f7f9 fbfa 	bl	8001d4c <_sbrk>
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	d102      	bne.n	8008562 <_sbrk_r+0x1a>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b103      	cbz	r3, 8008562 <_sbrk_r+0x1a>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	20000580 	.word	0x20000580

08008568 <memcpy>:
 8008568:	440a      	add	r2, r1
 800856a:	4291      	cmp	r1, r2
 800856c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008570:	d100      	bne.n	8008574 <memcpy+0xc>
 8008572:	4770      	bx	lr
 8008574:	b510      	push	{r4, lr}
 8008576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800857e:	4291      	cmp	r1, r2
 8008580:	d1f9      	bne.n	8008576 <memcpy+0xe>
 8008582:	bd10      	pop	{r4, pc}

08008584 <__assert_func>:
 8008584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008586:	4614      	mov	r4, r2
 8008588:	461a      	mov	r2, r3
 800858a:	4b09      	ldr	r3, [pc, #36]	@ (80085b0 <__assert_func+0x2c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4605      	mov	r5, r0
 8008590:	68d8      	ldr	r0, [r3, #12]
 8008592:	b14c      	cbz	r4, 80085a8 <__assert_func+0x24>
 8008594:	4b07      	ldr	r3, [pc, #28]	@ (80085b4 <__assert_func+0x30>)
 8008596:	9100      	str	r1, [sp, #0]
 8008598:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800859c:	4906      	ldr	r1, [pc, #24]	@ (80085b8 <__assert_func+0x34>)
 800859e:	462b      	mov	r3, r5
 80085a0:	f000 f870 	bl	8008684 <fiprintf>
 80085a4:	f000 f880 	bl	80086a8 <abort>
 80085a8:	4b04      	ldr	r3, [pc, #16]	@ (80085bc <__assert_func+0x38>)
 80085aa:	461c      	mov	r4, r3
 80085ac:	e7f3      	b.n	8008596 <__assert_func+0x12>
 80085ae:	bf00      	nop
 80085b0:	20000018 	.word	0x20000018
 80085b4:	08008df9 	.word	0x08008df9
 80085b8:	08008e06 	.word	0x08008e06
 80085bc:	08008e34 	.word	0x08008e34

080085c0 <_calloc_r>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	fba1 5402 	umull	r5, r4, r1, r2
 80085c6:	b934      	cbnz	r4, 80085d6 <_calloc_r+0x16>
 80085c8:	4629      	mov	r1, r5
 80085ca:	f7ff f999 	bl	8007900 <_malloc_r>
 80085ce:	4606      	mov	r6, r0
 80085d0:	b928      	cbnz	r0, 80085de <_calloc_r+0x1e>
 80085d2:	4630      	mov	r0, r6
 80085d4:	bd70      	pop	{r4, r5, r6, pc}
 80085d6:	220c      	movs	r2, #12
 80085d8:	6002      	str	r2, [r0, #0]
 80085da:	2600      	movs	r6, #0
 80085dc:	e7f9      	b.n	80085d2 <_calloc_r+0x12>
 80085de:	462a      	mov	r2, r5
 80085e0:	4621      	mov	r1, r4
 80085e2:	f7fe fa40 	bl	8006a66 <memset>
 80085e6:	e7f4      	b.n	80085d2 <_calloc_r+0x12>

080085e8 <__ascii_mbtowc>:
 80085e8:	b082      	sub	sp, #8
 80085ea:	b901      	cbnz	r1, 80085ee <__ascii_mbtowc+0x6>
 80085ec:	a901      	add	r1, sp, #4
 80085ee:	b142      	cbz	r2, 8008602 <__ascii_mbtowc+0x1a>
 80085f0:	b14b      	cbz	r3, 8008606 <__ascii_mbtowc+0x1e>
 80085f2:	7813      	ldrb	r3, [r2, #0]
 80085f4:	600b      	str	r3, [r1, #0]
 80085f6:	7812      	ldrb	r2, [r2, #0]
 80085f8:	1e10      	subs	r0, r2, #0
 80085fa:	bf18      	it	ne
 80085fc:	2001      	movne	r0, #1
 80085fe:	b002      	add	sp, #8
 8008600:	4770      	bx	lr
 8008602:	4610      	mov	r0, r2
 8008604:	e7fb      	b.n	80085fe <__ascii_mbtowc+0x16>
 8008606:	f06f 0001 	mvn.w	r0, #1
 800860a:	e7f8      	b.n	80085fe <__ascii_mbtowc+0x16>

0800860c <_realloc_r>:
 800860c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008610:	4607      	mov	r7, r0
 8008612:	4614      	mov	r4, r2
 8008614:	460d      	mov	r5, r1
 8008616:	b921      	cbnz	r1, 8008622 <_realloc_r+0x16>
 8008618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800861c:	4611      	mov	r1, r2
 800861e:	f7ff b96f 	b.w	8007900 <_malloc_r>
 8008622:	b92a      	cbnz	r2, 8008630 <_realloc_r+0x24>
 8008624:	f7ff f8f8 	bl	8007818 <_free_r>
 8008628:	4625      	mov	r5, r4
 800862a:	4628      	mov	r0, r5
 800862c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008630:	f000 f841 	bl	80086b6 <_malloc_usable_size_r>
 8008634:	4284      	cmp	r4, r0
 8008636:	4606      	mov	r6, r0
 8008638:	d802      	bhi.n	8008640 <_realloc_r+0x34>
 800863a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800863e:	d8f4      	bhi.n	800862a <_realloc_r+0x1e>
 8008640:	4621      	mov	r1, r4
 8008642:	4638      	mov	r0, r7
 8008644:	f7ff f95c 	bl	8007900 <_malloc_r>
 8008648:	4680      	mov	r8, r0
 800864a:	b908      	cbnz	r0, 8008650 <_realloc_r+0x44>
 800864c:	4645      	mov	r5, r8
 800864e:	e7ec      	b.n	800862a <_realloc_r+0x1e>
 8008650:	42b4      	cmp	r4, r6
 8008652:	4622      	mov	r2, r4
 8008654:	4629      	mov	r1, r5
 8008656:	bf28      	it	cs
 8008658:	4632      	movcs	r2, r6
 800865a:	f7ff ff85 	bl	8008568 <memcpy>
 800865e:	4629      	mov	r1, r5
 8008660:	4638      	mov	r0, r7
 8008662:	f7ff f8d9 	bl	8007818 <_free_r>
 8008666:	e7f1      	b.n	800864c <_realloc_r+0x40>

08008668 <__ascii_wctomb>:
 8008668:	4603      	mov	r3, r0
 800866a:	4608      	mov	r0, r1
 800866c:	b141      	cbz	r1, 8008680 <__ascii_wctomb+0x18>
 800866e:	2aff      	cmp	r2, #255	@ 0xff
 8008670:	d904      	bls.n	800867c <__ascii_wctomb+0x14>
 8008672:	228a      	movs	r2, #138	@ 0x8a
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	f04f 30ff 	mov.w	r0, #4294967295
 800867a:	4770      	bx	lr
 800867c:	700a      	strb	r2, [r1, #0]
 800867e:	2001      	movs	r0, #1
 8008680:	4770      	bx	lr
	...

08008684 <fiprintf>:
 8008684:	b40e      	push	{r1, r2, r3}
 8008686:	b503      	push	{r0, r1, lr}
 8008688:	4601      	mov	r1, r0
 800868a:	ab03      	add	r3, sp, #12
 800868c:	4805      	ldr	r0, [pc, #20]	@ (80086a4 <fiprintf+0x20>)
 800868e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008692:	6800      	ldr	r0, [r0, #0]
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	f000 f83f 	bl	8008718 <_vfiprintf_r>
 800869a:	b002      	add	sp, #8
 800869c:	f85d eb04 	ldr.w	lr, [sp], #4
 80086a0:	b003      	add	sp, #12
 80086a2:	4770      	bx	lr
 80086a4:	20000018 	.word	0x20000018

080086a8 <abort>:
 80086a8:	b508      	push	{r3, lr}
 80086aa:	2006      	movs	r0, #6
 80086ac:	f000 fa08 	bl	8008ac0 <raise>
 80086b0:	2001      	movs	r0, #1
 80086b2:	f7f9 fad3 	bl	8001c5c <_exit>

080086b6 <_malloc_usable_size_r>:
 80086b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ba:	1f18      	subs	r0, r3, #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	bfbc      	itt	lt
 80086c0:	580b      	ldrlt	r3, [r1, r0]
 80086c2:	18c0      	addlt	r0, r0, r3
 80086c4:	4770      	bx	lr

080086c6 <__sfputc_r>:
 80086c6:	6893      	ldr	r3, [r2, #8]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	b410      	push	{r4}
 80086ce:	6093      	str	r3, [r2, #8]
 80086d0:	da08      	bge.n	80086e4 <__sfputc_r+0x1e>
 80086d2:	6994      	ldr	r4, [r2, #24]
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	db01      	blt.n	80086dc <__sfputc_r+0x16>
 80086d8:	290a      	cmp	r1, #10
 80086da:	d103      	bne.n	80086e4 <__sfputc_r+0x1e>
 80086dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086e0:	f000 b932 	b.w	8008948 <__swbuf_r>
 80086e4:	6813      	ldr	r3, [r2, #0]
 80086e6:	1c58      	adds	r0, r3, #1
 80086e8:	6010      	str	r0, [r2, #0]
 80086ea:	7019      	strb	r1, [r3, #0]
 80086ec:	4608      	mov	r0, r1
 80086ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <__sfputs_r>:
 80086f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f6:	4606      	mov	r6, r0
 80086f8:	460f      	mov	r7, r1
 80086fa:	4614      	mov	r4, r2
 80086fc:	18d5      	adds	r5, r2, r3
 80086fe:	42ac      	cmp	r4, r5
 8008700:	d101      	bne.n	8008706 <__sfputs_r+0x12>
 8008702:	2000      	movs	r0, #0
 8008704:	e007      	b.n	8008716 <__sfputs_r+0x22>
 8008706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870a:	463a      	mov	r2, r7
 800870c:	4630      	mov	r0, r6
 800870e:	f7ff ffda 	bl	80086c6 <__sfputc_r>
 8008712:	1c43      	adds	r3, r0, #1
 8008714:	d1f3      	bne.n	80086fe <__sfputs_r+0xa>
 8008716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008718 <_vfiprintf_r>:
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	460d      	mov	r5, r1
 800871e:	b09d      	sub	sp, #116	@ 0x74
 8008720:	4614      	mov	r4, r2
 8008722:	4698      	mov	r8, r3
 8008724:	4606      	mov	r6, r0
 8008726:	b118      	cbz	r0, 8008730 <_vfiprintf_r+0x18>
 8008728:	6a03      	ldr	r3, [r0, #32]
 800872a:	b90b      	cbnz	r3, 8008730 <_vfiprintf_r+0x18>
 800872c:	f7fe f900 	bl	8006930 <__sinit>
 8008730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008732:	07d9      	lsls	r1, r3, #31
 8008734:	d405      	bmi.n	8008742 <_vfiprintf_r+0x2a>
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	059a      	lsls	r2, r3, #22
 800873a:	d402      	bmi.n	8008742 <_vfiprintf_r+0x2a>
 800873c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800873e:	f7fe fa10 	bl	8006b62 <__retarget_lock_acquire_recursive>
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	071b      	lsls	r3, r3, #28
 8008746:	d501      	bpl.n	800874c <_vfiprintf_r+0x34>
 8008748:	692b      	ldr	r3, [r5, #16]
 800874a:	b99b      	cbnz	r3, 8008774 <_vfiprintf_r+0x5c>
 800874c:	4629      	mov	r1, r5
 800874e:	4630      	mov	r0, r6
 8008750:	f000 f938 	bl	80089c4 <__swsetup_r>
 8008754:	b170      	cbz	r0, 8008774 <_vfiprintf_r+0x5c>
 8008756:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008758:	07dc      	lsls	r4, r3, #31
 800875a:	d504      	bpl.n	8008766 <_vfiprintf_r+0x4e>
 800875c:	f04f 30ff 	mov.w	r0, #4294967295
 8008760:	b01d      	add	sp, #116	@ 0x74
 8008762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008766:	89ab      	ldrh	r3, [r5, #12]
 8008768:	0598      	lsls	r0, r3, #22
 800876a:	d4f7      	bmi.n	800875c <_vfiprintf_r+0x44>
 800876c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800876e:	f7fe f9f9 	bl	8006b64 <__retarget_lock_release_recursive>
 8008772:	e7f3      	b.n	800875c <_vfiprintf_r+0x44>
 8008774:	2300      	movs	r3, #0
 8008776:	9309      	str	r3, [sp, #36]	@ 0x24
 8008778:	2320      	movs	r3, #32
 800877a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800877e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008782:	2330      	movs	r3, #48	@ 0x30
 8008784:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008934 <_vfiprintf_r+0x21c>
 8008788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800878c:	f04f 0901 	mov.w	r9, #1
 8008790:	4623      	mov	r3, r4
 8008792:	469a      	mov	sl, r3
 8008794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008798:	b10a      	cbz	r2, 800879e <_vfiprintf_r+0x86>
 800879a:	2a25      	cmp	r2, #37	@ 0x25
 800879c:	d1f9      	bne.n	8008792 <_vfiprintf_r+0x7a>
 800879e:	ebba 0b04 	subs.w	fp, sl, r4
 80087a2:	d00b      	beq.n	80087bc <_vfiprintf_r+0xa4>
 80087a4:	465b      	mov	r3, fp
 80087a6:	4622      	mov	r2, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7ff ffa2 	bl	80086f4 <__sfputs_r>
 80087b0:	3001      	adds	r0, #1
 80087b2:	f000 80a7 	beq.w	8008904 <_vfiprintf_r+0x1ec>
 80087b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087b8:	445a      	add	r2, fp
 80087ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80087bc:	f89a 3000 	ldrb.w	r3, [sl]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 809f 	beq.w	8008904 <_vfiprintf_r+0x1ec>
 80087c6:	2300      	movs	r3, #0
 80087c8:	f04f 32ff 	mov.w	r2, #4294967295
 80087cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087d0:	f10a 0a01 	add.w	sl, sl, #1
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	9307      	str	r3, [sp, #28]
 80087d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80087de:	4654      	mov	r4, sl
 80087e0:	2205      	movs	r2, #5
 80087e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e6:	4853      	ldr	r0, [pc, #332]	@ (8008934 <_vfiprintf_r+0x21c>)
 80087e8:	f7f7 fcf2 	bl	80001d0 <memchr>
 80087ec:	9a04      	ldr	r2, [sp, #16]
 80087ee:	b9d8      	cbnz	r0, 8008828 <_vfiprintf_r+0x110>
 80087f0:	06d1      	lsls	r1, r2, #27
 80087f2:	bf44      	itt	mi
 80087f4:	2320      	movmi	r3, #32
 80087f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087fa:	0713      	lsls	r3, r2, #28
 80087fc:	bf44      	itt	mi
 80087fe:	232b      	movmi	r3, #43	@ 0x2b
 8008800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008804:	f89a 3000 	ldrb.w	r3, [sl]
 8008808:	2b2a      	cmp	r3, #42	@ 0x2a
 800880a:	d015      	beq.n	8008838 <_vfiprintf_r+0x120>
 800880c:	9a07      	ldr	r2, [sp, #28]
 800880e:	4654      	mov	r4, sl
 8008810:	2000      	movs	r0, #0
 8008812:	f04f 0c0a 	mov.w	ip, #10
 8008816:	4621      	mov	r1, r4
 8008818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800881c:	3b30      	subs	r3, #48	@ 0x30
 800881e:	2b09      	cmp	r3, #9
 8008820:	d94b      	bls.n	80088ba <_vfiprintf_r+0x1a2>
 8008822:	b1b0      	cbz	r0, 8008852 <_vfiprintf_r+0x13a>
 8008824:	9207      	str	r2, [sp, #28]
 8008826:	e014      	b.n	8008852 <_vfiprintf_r+0x13a>
 8008828:	eba0 0308 	sub.w	r3, r0, r8
 800882c:	fa09 f303 	lsl.w	r3, r9, r3
 8008830:	4313      	orrs	r3, r2
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	46a2      	mov	sl, r4
 8008836:	e7d2      	b.n	80087de <_vfiprintf_r+0xc6>
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	1d19      	adds	r1, r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	9103      	str	r1, [sp, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	bfbb      	ittet	lt
 8008844:	425b      	neglt	r3, r3
 8008846:	f042 0202 	orrlt.w	r2, r2, #2
 800884a:	9307      	strge	r3, [sp, #28]
 800884c:	9307      	strlt	r3, [sp, #28]
 800884e:	bfb8      	it	lt
 8008850:	9204      	strlt	r2, [sp, #16]
 8008852:	7823      	ldrb	r3, [r4, #0]
 8008854:	2b2e      	cmp	r3, #46	@ 0x2e
 8008856:	d10a      	bne.n	800886e <_vfiprintf_r+0x156>
 8008858:	7863      	ldrb	r3, [r4, #1]
 800885a:	2b2a      	cmp	r3, #42	@ 0x2a
 800885c:	d132      	bne.n	80088c4 <_vfiprintf_r+0x1ac>
 800885e:	9b03      	ldr	r3, [sp, #12]
 8008860:	1d1a      	adds	r2, r3, #4
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	9203      	str	r2, [sp, #12]
 8008866:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800886a:	3402      	adds	r4, #2
 800886c:	9305      	str	r3, [sp, #20]
 800886e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008944 <_vfiprintf_r+0x22c>
 8008872:	7821      	ldrb	r1, [r4, #0]
 8008874:	2203      	movs	r2, #3
 8008876:	4650      	mov	r0, sl
 8008878:	f7f7 fcaa 	bl	80001d0 <memchr>
 800887c:	b138      	cbz	r0, 800888e <_vfiprintf_r+0x176>
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	eba0 000a 	sub.w	r0, r0, sl
 8008884:	2240      	movs	r2, #64	@ 0x40
 8008886:	4082      	lsls	r2, r0
 8008888:	4313      	orrs	r3, r2
 800888a:	3401      	adds	r4, #1
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008892:	4829      	ldr	r0, [pc, #164]	@ (8008938 <_vfiprintf_r+0x220>)
 8008894:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008898:	2206      	movs	r2, #6
 800889a:	f7f7 fc99 	bl	80001d0 <memchr>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d03f      	beq.n	8008922 <_vfiprintf_r+0x20a>
 80088a2:	4b26      	ldr	r3, [pc, #152]	@ (800893c <_vfiprintf_r+0x224>)
 80088a4:	bb1b      	cbnz	r3, 80088ee <_vfiprintf_r+0x1d6>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	3307      	adds	r3, #7
 80088aa:	f023 0307 	bic.w	r3, r3, #7
 80088ae:	3308      	adds	r3, #8
 80088b0:	9303      	str	r3, [sp, #12]
 80088b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b4:	443b      	add	r3, r7
 80088b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80088b8:	e76a      	b.n	8008790 <_vfiprintf_r+0x78>
 80088ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80088be:	460c      	mov	r4, r1
 80088c0:	2001      	movs	r0, #1
 80088c2:	e7a8      	b.n	8008816 <_vfiprintf_r+0xfe>
 80088c4:	2300      	movs	r3, #0
 80088c6:	3401      	adds	r4, #1
 80088c8:	9305      	str	r3, [sp, #20]
 80088ca:	4619      	mov	r1, r3
 80088cc:	f04f 0c0a 	mov.w	ip, #10
 80088d0:	4620      	mov	r0, r4
 80088d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088d6:	3a30      	subs	r2, #48	@ 0x30
 80088d8:	2a09      	cmp	r2, #9
 80088da:	d903      	bls.n	80088e4 <_vfiprintf_r+0x1cc>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0c6      	beq.n	800886e <_vfiprintf_r+0x156>
 80088e0:	9105      	str	r1, [sp, #20]
 80088e2:	e7c4      	b.n	800886e <_vfiprintf_r+0x156>
 80088e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80088e8:	4604      	mov	r4, r0
 80088ea:	2301      	movs	r3, #1
 80088ec:	e7f0      	b.n	80088d0 <_vfiprintf_r+0x1b8>
 80088ee:	ab03      	add	r3, sp, #12
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	462a      	mov	r2, r5
 80088f4:	4b12      	ldr	r3, [pc, #72]	@ (8008940 <_vfiprintf_r+0x228>)
 80088f6:	a904      	add	r1, sp, #16
 80088f8:	4630      	mov	r0, r6
 80088fa:	f7fd fbd7 	bl	80060ac <_printf_float>
 80088fe:	4607      	mov	r7, r0
 8008900:	1c78      	adds	r0, r7, #1
 8008902:	d1d6      	bne.n	80088b2 <_vfiprintf_r+0x19a>
 8008904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008906:	07d9      	lsls	r1, r3, #31
 8008908:	d405      	bmi.n	8008916 <_vfiprintf_r+0x1fe>
 800890a:	89ab      	ldrh	r3, [r5, #12]
 800890c:	059a      	lsls	r2, r3, #22
 800890e:	d402      	bmi.n	8008916 <_vfiprintf_r+0x1fe>
 8008910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008912:	f7fe f927 	bl	8006b64 <__retarget_lock_release_recursive>
 8008916:	89ab      	ldrh	r3, [r5, #12]
 8008918:	065b      	lsls	r3, r3, #25
 800891a:	f53f af1f 	bmi.w	800875c <_vfiprintf_r+0x44>
 800891e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008920:	e71e      	b.n	8008760 <_vfiprintf_r+0x48>
 8008922:	ab03      	add	r3, sp, #12
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	462a      	mov	r2, r5
 8008928:	4b05      	ldr	r3, [pc, #20]	@ (8008940 <_vfiprintf_r+0x228>)
 800892a:	a904      	add	r1, sp, #16
 800892c:	4630      	mov	r0, r6
 800892e:	f7fd fe55 	bl	80065dc <_printf_i>
 8008932:	e7e4      	b.n	80088fe <_vfiprintf_r+0x1e6>
 8008934:	08008dde 	.word	0x08008dde
 8008938:	08008de8 	.word	0x08008de8
 800893c:	080060ad 	.word	0x080060ad
 8008940:	080086f5 	.word	0x080086f5
 8008944:	08008de4 	.word	0x08008de4

08008948 <__swbuf_r>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	460e      	mov	r6, r1
 800894c:	4614      	mov	r4, r2
 800894e:	4605      	mov	r5, r0
 8008950:	b118      	cbz	r0, 800895a <__swbuf_r+0x12>
 8008952:	6a03      	ldr	r3, [r0, #32]
 8008954:	b90b      	cbnz	r3, 800895a <__swbuf_r+0x12>
 8008956:	f7fd ffeb 	bl	8006930 <__sinit>
 800895a:	69a3      	ldr	r3, [r4, #24]
 800895c:	60a3      	str	r3, [r4, #8]
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	071a      	lsls	r2, r3, #28
 8008962:	d501      	bpl.n	8008968 <__swbuf_r+0x20>
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	b943      	cbnz	r3, 800897a <__swbuf_r+0x32>
 8008968:	4621      	mov	r1, r4
 800896a:	4628      	mov	r0, r5
 800896c:	f000 f82a 	bl	80089c4 <__swsetup_r>
 8008970:	b118      	cbz	r0, 800897a <__swbuf_r+0x32>
 8008972:	f04f 37ff 	mov.w	r7, #4294967295
 8008976:	4638      	mov	r0, r7
 8008978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	6922      	ldr	r2, [r4, #16]
 800897e:	1a98      	subs	r0, r3, r2
 8008980:	6963      	ldr	r3, [r4, #20]
 8008982:	b2f6      	uxtb	r6, r6
 8008984:	4283      	cmp	r3, r0
 8008986:	4637      	mov	r7, r6
 8008988:	dc05      	bgt.n	8008996 <__swbuf_r+0x4e>
 800898a:	4621      	mov	r1, r4
 800898c:	4628      	mov	r0, r5
 800898e:	f7ff fd99 	bl	80084c4 <_fflush_r>
 8008992:	2800      	cmp	r0, #0
 8008994:	d1ed      	bne.n	8008972 <__swbuf_r+0x2a>
 8008996:	68a3      	ldr	r3, [r4, #8]
 8008998:	3b01      	subs	r3, #1
 800899a:	60a3      	str	r3, [r4, #8]
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	6022      	str	r2, [r4, #0]
 80089a2:	701e      	strb	r6, [r3, #0]
 80089a4:	6962      	ldr	r2, [r4, #20]
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d004      	beq.n	80089b6 <__swbuf_r+0x6e>
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	07db      	lsls	r3, r3, #31
 80089b0:	d5e1      	bpl.n	8008976 <__swbuf_r+0x2e>
 80089b2:	2e0a      	cmp	r6, #10
 80089b4:	d1df      	bne.n	8008976 <__swbuf_r+0x2e>
 80089b6:	4621      	mov	r1, r4
 80089b8:	4628      	mov	r0, r5
 80089ba:	f7ff fd83 	bl	80084c4 <_fflush_r>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d0d9      	beq.n	8008976 <__swbuf_r+0x2e>
 80089c2:	e7d6      	b.n	8008972 <__swbuf_r+0x2a>

080089c4 <__swsetup_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4b29      	ldr	r3, [pc, #164]	@ (8008a6c <__swsetup_r+0xa8>)
 80089c8:	4605      	mov	r5, r0
 80089ca:	6818      	ldr	r0, [r3, #0]
 80089cc:	460c      	mov	r4, r1
 80089ce:	b118      	cbz	r0, 80089d8 <__swsetup_r+0x14>
 80089d0:	6a03      	ldr	r3, [r0, #32]
 80089d2:	b90b      	cbnz	r3, 80089d8 <__swsetup_r+0x14>
 80089d4:	f7fd ffac 	bl	8006930 <__sinit>
 80089d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089dc:	0719      	lsls	r1, r3, #28
 80089de:	d422      	bmi.n	8008a26 <__swsetup_r+0x62>
 80089e0:	06da      	lsls	r2, r3, #27
 80089e2:	d407      	bmi.n	80089f4 <__swsetup_r+0x30>
 80089e4:	2209      	movs	r2, #9
 80089e6:	602a      	str	r2, [r5, #0]
 80089e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	f04f 30ff 	mov.w	r0, #4294967295
 80089f2:	e033      	b.n	8008a5c <__swsetup_r+0x98>
 80089f4:	0758      	lsls	r0, r3, #29
 80089f6:	d512      	bpl.n	8008a1e <__swsetup_r+0x5a>
 80089f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089fa:	b141      	cbz	r1, 8008a0e <__swsetup_r+0x4a>
 80089fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a00:	4299      	cmp	r1, r3
 8008a02:	d002      	beq.n	8008a0a <__swsetup_r+0x46>
 8008a04:	4628      	mov	r0, r5
 8008a06:	f7fe ff07 	bl	8007818 <_free_r>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	2300      	movs	r3, #0
 8008a18:	6063      	str	r3, [r4, #4]
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	f043 0308 	orr.w	r3, r3, #8
 8008a24:	81a3      	strh	r3, [r4, #12]
 8008a26:	6923      	ldr	r3, [r4, #16]
 8008a28:	b94b      	cbnz	r3, 8008a3e <__swsetup_r+0x7a>
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a34:	d003      	beq.n	8008a3e <__swsetup_r+0x7a>
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 f883 	bl	8008b44 <__smakebuf_r>
 8008a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a42:	f013 0201 	ands.w	r2, r3, #1
 8008a46:	d00a      	beq.n	8008a5e <__swsetup_r+0x9a>
 8008a48:	2200      	movs	r2, #0
 8008a4a:	60a2      	str	r2, [r4, #8]
 8008a4c:	6962      	ldr	r2, [r4, #20]
 8008a4e:	4252      	negs	r2, r2
 8008a50:	61a2      	str	r2, [r4, #24]
 8008a52:	6922      	ldr	r2, [r4, #16]
 8008a54:	b942      	cbnz	r2, 8008a68 <__swsetup_r+0xa4>
 8008a56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a5a:	d1c5      	bne.n	80089e8 <__swsetup_r+0x24>
 8008a5c:	bd38      	pop	{r3, r4, r5, pc}
 8008a5e:	0799      	lsls	r1, r3, #30
 8008a60:	bf58      	it	pl
 8008a62:	6962      	ldrpl	r2, [r4, #20]
 8008a64:	60a2      	str	r2, [r4, #8]
 8008a66:	e7f4      	b.n	8008a52 <__swsetup_r+0x8e>
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e7f7      	b.n	8008a5c <__swsetup_r+0x98>
 8008a6c:	20000018 	.word	0x20000018

08008a70 <_raise_r>:
 8008a70:	291f      	cmp	r1, #31
 8008a72:	b538      	push	{r3, r4, r5, lr}
 8008a74:	4605      	mov	r5, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	d904      	bls.n	8008a84 <_raise_r+0x14>
 8008a7a:	2316      	movs	r3, #22
 8008a7c:	6003      	str	r3, [r0, #0]
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a86:	b112      	cbz	r2, 8008a8e <_raise_r+0x1e>
 8008a88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a8c:	b94b      	cbnz	r3, 8008aa2 <_raise_r+0x32>
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f000 f830 	bl	8008af4 <_getpid_r>
 8008a94:	4622      	mov	r2, r4
 8008a96:	4601      	mov	r1, r0
 8008a98:	4628      	mov	r0, r5
 8008a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a9e:	f000 b817 	b.w	8008ad0 <_kill_r>
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d00a      	beq.n	8008abc <_raise_r+0x4c>
 8008aa6:	1c59      	adds	r1, r3, #1
 8008aa8:	d103      	bne.n	8008ab2 <_raise_r+0x42>
 8008aaa:	2316      	movs	r3, #22
 8008aac:	6003      	str	r3, [r0, #0]
 8008aae:	2001      	movs	r0, #1
 8008ab0:	e7e7      	b.n	8008a82 <_raise_r+0x12>
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ab8:	4620      	mov	r0, r4
 8008aba:	4798      	blx	r3
 8008abc:	2000      	movs	r0, #0
 8008abe:	e7e0      	b.n	8008a82 <_raise_r+0x12>

08008ac0 <raise>:
 8008ac0:	4b02      	ldr	r3, [pc, #8]	@ (8008acc <raise+0xc>)
 8008ac2:	4601      	mov	r1, r0
 8008ac4:	6818      	ldr	r0, [r3, #0]
 8008ac6:	f7ff bfd3 	b.w	8008a70 <_raise_r>
 8008aca:	bf00      	nop
 8008acc:	20000018 	.word	0x20000018

08008ad0 <_kill_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4d07      	ldr	r5, [pc, #28]	@ (8008af0 <_kill_r+0x20>)
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	4608      	mov	r0, r1
 8008ada:	4611      	mov	r1, r2
 8008adc:	602b      	str	r3, [r5, #0]
 8008ade:	f7f9 f8ad 	bl	8001c3c <_kill>
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	d102      	bne.n	8008aec <_kill_r+0x1c>
 8008ae6:	682b      	ldr	r3, [r5, #0]
 8008ae8:	b103      	cbz	r3, 8008aec <_kill_r+0x1c>
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	bd38      	pop	{r3, r4, r5, pc}
 8008aee:	bf00      	nop
 8008af0:	20000580 	.word	0x20000580

08008af4 <_getpid_r>:
 8008af4:	f7f9 b89a 	b.w	8001c2c <_getpid>

08008af8 <__swhatbuf_r>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	460c      	mov	r4, r1
 8008afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b00:	2900      	cmp	r1, #0
 8008b02:	b096      	sub	sp, #88	@ 0x58
 8008b04:	4615      	mov	r5, r2
 8008b06:	461e      	mov	r6, r3
 8008b08:	da0d      	bge.n	8008b26 <__swhatbuf_r+0x2e>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b10:	f04f 0100 	mov.w	r1, #0
 8008b14:	bf14      	ite	ne
 8008b16:	2340      	movne	r3, #64	@ 0x40
 8008b18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	6031      	str	r1, [r6, #0]
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	b016      	add	sp, #88	@ 0x58
 8008b24:	bd70      	pop	{r4, r5, r6, pc}
 8008b26:	466a      	mov	r2, sp
 8008b28:	f000 f848 	bl	8008bbc <_fstat_r>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	dbec      	blt.n	8008b0a <__swhatbuf_r+0x12>
 8008b30:	9901      	ldr	r1, [sp, #4]
 8008b32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b3a:	4259      	negs	r1, r3
 8008b3c:	4159      	adcs	r1, r3
 8008b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b42:	e7eb      	b.n	8008b1c <__swhatbuf_r+0x24>

08008b44 <__smakebuf_r>:
 8008b44:	898b      	ldrh	r3, [r1, #12]
 8008b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b48:	079d      	lsls	r5, r3, #30
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	d507      	bpl.n	8008b60 <__smakebuf_r+0x1c>
 8008b50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	6123      	str	r3, [r4, #16]
 8008b58:	2301      	movs	r3, #1
 8008b5a:	6163      	str	r3, [r4, #20]
 8008b5c:	b003      	add	sp, #12
 8008b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b60:	ab01      	add	r3, sp, #4
 8008b62:	466a      	mov	r2, sp
 8008b64:	f7ff ffc8 	bl	8008af8 <__swhatbuf_r>
 8008b68:	9f00      	ldr	r7, [sp, #0]
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f7fe fec6 	bl	8007900 <_malloc_r>
 8008b74:	b948      	cbnz	r0, 8008b8a <__smakebuf_r+0x46>
 8008b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7a:	059a      	lsls	r2, r3, #22
 8008b7c:	d4ee      	bmi.n	8008b5c <__smakebuf_r+0x18>
 8008b7e:	f023 0303 	bic.w	r3, r3, #3
 8008b82:	f043 0302 	orr.w	r3, r3, #2
 8008b86:	81a3      	strh	r3, [r4, #12]
 8008b88:	e7e2      	b.n	8008b50 <__smakebuf_r+0xc>
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	6020      	str	r0, [r4, #0]
 8008b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b92:	81a3      	strh	r3, [r4, #12]
 8008b94:	9b01      	ldr	r3, [sp, #4]
 8008b96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b9a:	b15b      	cbz	r3, 8008bb4 <__smakebuf_r+0x70>
 8008b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	f000 f81d 	bl	8008be0 <_isatty_r>
 8008ba6:	b128      	cbz	r0, 8008bb4 <__smakebuf_r+0x70>
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	f023 0303 	bic.w	r3, r3, #3
 8008bae:	f043 0301 	orr.w	r3, r3, #1
 8008bb2:	81a3      	strh	r3, [r4, #12]
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	431d      	orrs	r5, r3
 8008bb8:	81a5      	strh	r5, [r4, #12]
 8008bba:	e7cf      	b.n	8008b5c <__smakebuf_r+0x18>

08008bbc <_fstat_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4d07      	ldr	r5, [pc, #28]	@ (8008bdc <_fstat_r+0x20>)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	602b      	str	r3, [r5, #0]
 8008bca:	f7f9 f897 	bl	8001cfc <_fstat>
 8008bce:	1c43      	adds	r3, r0, #1
 8008bd0:	d102      	bne.n	8008bd8 <_fstat_r+0x1c>
 8008bd2:	682b      	ldr	r3, [r5, #0]
 8008bd4:	b103      	cbz	r3, 8008bd8 <_fstat_r+0x1c>
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	bd38      	pop	{r3, r4, r5, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000580 	.word	0x20000580

08008be0 <_isatty_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d06      	ldr	r5, [pc, #24]	@ (8008bfc <_isatty_r+0x1c>)
 8008be4:	2300      	movs	r3, #0
 8008be6:	4604      	mov	r4, r0
 8008be8:	4608      	mov	r0, r1
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	f7f9 f896 	bl	8001d1c <_isatty>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d102      	bne.n	8008bfa <_isatty_r+0x1a>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b103      	cbz	r3, 8008bfa <_isatty_r+0x1a>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	20000580 	.word	0x20000580

08008c00 <_init>:
 8008c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c02:	bf00      	nop
 8008c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c06:	bc08      	pop	{r3}
 8008c08:	469e      	mov	lr, r3
 8008c0a:	4770      	bx	lr

08008c0c <_fini>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	bf00      	nop
 8008c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c12:	bc08      	pop	{r3}
 8008c14:	469e      	mov	lr, r3
 8008c16:	4770      	bx	lr
